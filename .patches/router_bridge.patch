diff --git a/src/api_schema.rs b/src/api_schema.rs
index 057feeb..bef5486 100644
--- a/src/api_schema.rs
+++ b/src/api_schema.rs
@@ -36,7 +36,7 @@ pub type ApiSchemaResult = Result<String, Vec<ApiSchemaError>>;
 pub fn api_schema(sdl: &str) -> Result<ApiSchemaResult, Error> {
     Js::new()
         .with_parameter("sdl", sdl)?
-        .execute::<ApiSchemaResult>("do_api_schema", include_str!("../js-dist/do_api_schema.js"))
+        .execute::<ApiSchemaResult>("do_api_schema", include_str!(concat!(env!("STATIC_DIR"), "/js-dist/do_api_schema.js")))
 }

 #[cfg(test)]
diff --git a/src/introspect.rs b/src/introspect.rs
index b4b1fa3..9157fdc 100644
--- a/src/introspect.rs
+++ b/src/introspect.rs
@@ -88,7 +88,7 @@ pub fn batch_introspect(sdl: &str, queries: Vec<String>) -> Result<Introspection
         .with_parameter("queries", queries)?
         .execute::<IntrospectionResult>(
             "do_introspect",
-            include_str!("../js-dist/do_introspect.js"),
+            include_str!(concat!(env!("STATIC_DIR"), "/js-dist/do_introspect.js")),
         )
 }

diff --git a/src/js.rs b/src/js.rs
index 40875be..aca6659 100644
--- a/src/js.rs
+++ b/src/js.rs
@@ -55,7 +55,7 @@ impl Js {
             .build();

         // The snapshot is created in our build.rs script and included in our binary image
-        let buffer = include_bytes!(concat!(env!("OUT_DIR"), "/query_runtime.snap"));
+        let buffer = include_bytes!(concat!(env!("STATIC_DIR"), "/snapshots/query_runtime.snap"));

         // Use our snapshot to provision our new runtime
         let options = RuntimeOptions {
diff --git a/src/planner.rs b/src/planner.rs
index 8d125bd..4736aa4 100644
--- a/src/planner.rs
+++ b/src/planner.rs
@@ -199,7 +199,7 @@ where
     /// Instantiate a `Planner` from a schema string
     pub async fn new(schema: String) -> Result<Self, Vec<BridgeError>> {
         let worker =
-            JsWorker::<PlanCmd, BridgeResult<T>>::new(include_str!("../js-dist/plan_worker.js"));
+            JsWorker::<PlanCmd, BridgeResult<T>>::new(include_str!(concat!(env!("STATIC_DIR"), "/js-dist/plan_worker.js")));
         let worker_is_set_up = worker
             .request(PlanCmd::UpdateSchema { schema })
             .await
diff --git a/src/worker.rs b/src/worker.rs
index 0f6ba7b..30da264 100644
--- a/src/worker.rs
+++ b/src/worker.rs
@@ -42,7 +42,7 @@ where
                 })
                 .build();
             // Initialize a runtime instance
-            let buffer = include_bytes!(concat!(env!("OUT_DIR"), "/query_runtime.snap"));
+            let buffer = include_bytes!(concat!(env!("STATIC_DIR"), "/snapshots/query_runtime.snap"));

             let mut js_runtime = JsRuntime::new(RuntimeOptions {
                 extensions: vec![my_ext],
--
2.25.1

