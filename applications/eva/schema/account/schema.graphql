type Account implements Node & Actor @key(fields: "id") {
  """ID representing the account"""
  id: ID!

  """A URL pointing to the accounts's public avatar."""
  avatar(
    """The size of the resulting square image."""
    size: Int
  ): URI! @goField(forceResolver: true)

  """The username of the account."""
  username: String!

  """Whether or not this account is a staff member"""
  isStaff: Boolean!

  """Whether or not this account is part of the moderation team"""
  isModerator: Boolean!

  """Whether or not this account is locked"""
  isLocked: Boolean!

  """The details of the account lock"""
  lockDetails: AccountLockDetails
}

enum AccountLockReasonEnum {
  PostInfraction
}

type AccountLockDetails {
  expires: Int!
  reason: AccountLockReasonEnum!
}

"""Input for unlocking an account"""
input UnlockAccountInput {
  accountID: ID!
}

"""Payload for the unlocked account"""
type UnlockAccountPayload {
  """Account that was unlocked"""
  account: Account
}

extend type Mutation {
  """
  Unlock Account - account may be locked for any reason. Use this endpoint to unlock the account
  """
  unlockAccount: UnlockAccountPayload @auth
}

extend type Query {
  """
  Get the currently-authenticated account
  """
  viewer: Account
}
