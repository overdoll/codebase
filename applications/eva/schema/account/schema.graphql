enum AccountRoleEnum {
  Moderator
  Staff
}

type Viewer @key(fields: "id") {
  id: String!
  username: String!
  roles: [AccountRoleEnum!]!
  avatar: String!
  verified: Boolean!
  lock: AccountLock
}

enum AccountLockReasonEnum {
  PostInfraction
}

type AccountLock {
  expires: Int!
  reason: AccountLockReasonEnum!
}

input RegisterInput {
  username: String!
}

input AuthenticationInput {
  email: String!
}

extend type Mutation {
  """
  Initiates an authentication flow for the specified account
  """
  authenticate(data: AuthenticationInput): Response!

  """
  Re-send the authentication email
  """
  authenticateEmail: Response!

  """
  Registration for the account. Will only work once authenticate is initiated
  and the cookie is still valid when redeemed (5 minutes)
  """
  register(data: RegisterInput): Response!

  """
  Authenticate with a TOTP code - should be used after a cookie is redeemed
  """
  authenticateTOTP(code: String!): Response!

  """
  Authenticate with a recovery code - should be used after a cookie is redeemed but user does not remember their credentials
  """
  authenticateRecoveryCode(code: String!): Response!

  """
  Unlock Account - account may be locked for any reason. Use this endpoint to unlock the currently-logged in account (time must be after the expiration of the unlock)
  """
  unlockAccount: Response!

  """
  Logout the current account
  """
  logout: Response!
}

extend type Query {
  """
  Get the currently-authenticated account
  """
  viewer: Viewer
}
