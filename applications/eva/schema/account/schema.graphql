type Account implements Node @key(fields: "id") {
  """ID representing the account"""
  id: ID!

  """The ID that the account can be referenced by"""
  reference: String!

  """A URL pointing to the account's public avatar."""
  avatar: Resource

  """The username of the account."""
  username: String!

  """Whether or not this account is a staff member"""
  isStaff: Boolean!

  """Whether or not this account is part of the moderation team"""
  isModerator: Boolean!

  """The details of the account lock"""
  lock: AccountLock @goField(forceResolver: true)
}

type AccountLock {
  expires: Time!
}

"""Input for locking an account."""
input LockAccountInput {
  """The account to lock."""
  accountID: ID!

  """When the lock should end."""
  endTime: Time!
}

"""Input for unlocking an account"""
input UnlockAccountInput {
  """The account to unlock."""
  accountID: ID!
}

"""Payload for the unlocked account"""
type UnlockAccountPayload {
  """Account that was unlocked"""
  account: Account
}

"""Payload for the locked account"""
type LockAccountPayload {
  """Account that was locked"""
  account: Account
}

"""Properties by which accounts connections can be sorted."""
enum AccountsSort {
  """Accounts by newest first"""
  NEW
}

extend type Mutation {
  """
  Unlock Account - account may be locked for any reason. Use this endpoint to unlock the account.

  Can be unlocked by staff+ regardless if time is past.
  """
  unlockAccount(input: UnlockAccountInput!): UnlockAccountPayload

  """
  Lock an account for a specific duration.
  """
  lockAccount(input: LockAccountInput!): LockAccountPayload
}

extend type Query {

  """
  Get the currently-authenticated account
  """
  viewer: Account

  """Look up a single account"""
  account(
    """Look up a post by a username"""
    username: String!
  ): Account
}
