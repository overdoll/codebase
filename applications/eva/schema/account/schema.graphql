type Account implements Node @key(fields: "id") {
  """ID representing the account"""
  id: ID!

  """The ID that the account can be referenced by"""
  reference: String!

  """A URL pointing to the accounts's public avatar."""
  avatar(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """The username of the account."""
  username: String!

  """Whether or not this account is a staff member"""
  isStaff: Boolean!

  """Whether or not this account is part of the moderation team"""
  isModerator: Boolean!

  """The details of the account lock"""
  lock: AccountLock
}

"""Edge of the account"""
type AccountEdge {
  node: Account!
  cursor: String!
}

"""Connection of the account"""
type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
}

enum AccountLockReason {
  PostInfraction
}

type AccountLock {
  expires: Int!
  reason: AccountLockReason!
}

"""Input for unlocking an account"""
input UnlockAccountInput {
  accountID: ID!
}

"""Payload for the unlocked account"""
type UnlockAccountPayload {
  """Account that was unlocked"""
  account: Account
}

extend type Mutation {
  """
  Unlock Account - account may be locked for any reason. Use this endpoint to unlock the account
  """
  unlockAccount: UnlockAccountPayload
}

extend type Query {
  """
  Get the currently-authenticated account
  """
  viewer: Account

  """Look up a single account"""
  account(
    """Look up a post by a username"""
    username: String!
  ): Account

  """Look up or search multiple accounts"""
  accounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the account username."""
    username: String
  ): AccountConnection!
}
