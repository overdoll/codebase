enum AccountEmailStatusEnum {
  CONFIRMED
  UNCONFIRMED
  PRIMARY
}

"""Email belonging to a specific account"""
type AccountEmail implements Node @key(fields: "id") {
  """ID of the account email"""
  id: ID!

  """The account email"""
  email: String!

  """The current status of the account email"""
  status: AccountEmailStatusEnum!

  """The account that this email belongs to"""
  account: Account! @goField(forceResolver: true)
}

"""Edge of the account email"""
type AccountEmailEdge {
  cursor: String!
  node: AccountEmail!
}

"""Connection of the account email"""
type AccountEmailConnection {
  pageInfo: PageInfo!
  edges: [AccountEmailEdge!]!
}

"""Session belonging to a specific account"""
type AccountSession implements Node @key(fields: "id") {
  """ID of the session"""
  id: ID!

  """The user agent who first created the sesssion"""
  userAgent: String!

  """The IP of who first created the session"""
  ip: String!

  """When the session was created"""
  created: String!

  """If the session belongs to the currently authenticated account"""
  current: Boolean!
}

"""Edge of the account session"""
type AccountSessionEdge {
  cursor: String!
  node: AccountSession!
}

"""Edge of the account session"""
type AccountSessionConnection {
  pageInfo: PageInfo!
  edges: [AccountSessionEdge!]!
}

"""Username belonging to a specific account"""
type AccountUsername implements Node @key(fields: "id") {
  """ID of the account username"""
  id: ID!

  """The account username"""
  username: String!

  """The account that this username belongs to"""
  account: Account! @goField(forceResolver: true)
}

"""Edge of the account username"""
type AccountUsernameEdge {
  cursor: String!
  node: AccountUsername!
}

"""Connection of the account username"""
type AccountUsernameConnection {
  pageInfo: PageInfo!
  edges: [AccountUsernameEdge!]!
}

"""The multi-factor recovery code belonging to the account"""
type AccountMultiFactorRecoveryCode {
  """The multi factor recovery code"""
  code: String!
}

"""TOTP secret + image combination"""
type MultiFactorTotp  {
  """The TOTP secret"""
  secret: String!

  """
  Always html image compatible. Just set SRC tag to this and it will work!
  """
  imageSrc: String!
}

type AccountMultiFactorSettings {
  """
  Have recovery codes been generated? Required in order to configure TOTP
  """
  recoveryCodesGenerated: Boolean!

  """
  Is multi factor enabled - can be toggled off if they want to
  """
  multiFactorEnabled: Boolean!

  """
  Privileged users cannot disable MFA (moderators, staff)
  """
  canDisableMultiFactor: Boolean!

  """
  Has TOTP been configured? Recovery codes must be generated before configuring
  """
  multiFactorTotpConfigured: Boolean!
}

extend type Account @key(fields: "id") {
  """
  Usernames for account (history)
  """
  usernames(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountUsernameConnection! @goField(forceResolver: true)

  """
  Emails for account (multiple emails per account)

  Only queryable if the currently logged-in account belongs to the requested account
  """
  emails(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountEmailConnection! @goField(forceResolver: true) @auth

  """
  Sessions linked to this account

  Only queryable if the currently logged-in account belongs to the requested account
  """
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountSessionConnection! @goField(forceResolver: true) @auth

  """
  Multi factor account settings

  Only queryable if the currently logged-in account belongs to the requested account
  """
  multiFactorSettings: AccountMultiFactorSettings! @goField(forceResolver: true) @auth

  """
  MFA Recovery codes belonging to this account

  Only queryable if the currently logged-in account belongs to the requested account
  """
  recoveryCodes: [AccountMultiFactorRecoveryCode!]! @goField(forceResolver: true) @auth
}

"""Add an email to the account"""
input AddAccountEmailInput {
  """
  The email that should be added to this account
  """
  email: String!
}

"""Input for removing an email from an account"""
input DeleteAccountEmailInput {
  """
  The email that should be removed
  """
  accountEmailId: ID!
}

"""Input for updating an account's username"""
input UpdateAccountUsernameAndRetainPreviousInput {
  """
  The username that the account should be updated to
  """
  username: String!
}

"""Input for updating the account status to primary"""
input UpdateAccountEmailStatusToPrimaryInput {
  """
  The email that should be updated
  """
  accountEmailId: ID!
}

"""Input for updating an account's username"""
input RevokeAccountSessionInput {
  """
  Session ID that should be revoked
  """
  id: String!
}


"""Input for enrolling the account into TOTP"""
input EnrollAccountMultiFactorTotpInput {
  """
  The code that the TOTP expects
  """
  code: String!
}

"""Input for confirming the account email"""
input ConfirmAccountEmailInput {
  """
  The ID that is sent for confirmation
  """
  id: String!
}

"""Email to add the account"""
type AddAccountEmailPayload {
  """The account email that was added to"""
  accountEmail: AccountEmail
}

"""Email to add the account"""
type DeleteAccountEmailPayload {
  """The ID of the account email that was removed"""
  accountEmailId: ID!
}

"""Payload of the updated username"""
type UpdateAccountUsernameAndRetainPreviousPayload {
  """The account username that was added"""
  accountUsername: AccountUsername
}

"""Payload of the revoked account session"""
type RevokeAccountSessionPayload {
  """The ID of the session that was revoked"""
  accountSessionId: AccountUsername
}

"""Payload of the updated account email"""
type UpdateAccountEmailStatusToPrimaryPayload {
  """The account email that was updated"""
  accountEmail: AccountEmail
}

"""Payload of the created account recovery codes"""
type CreateAccountMultiFactorRecoveryCodesAndDeletePreviousPayload {
  """The recovery codes that were created"""
  accountMultiFactorRecoveryCodes: [AccountMultiFactorRecoveryCode!]!
}

"""Payload of the generated TOTP token"""
type GenerateAccountMultiFactorTotpPayload {
  """TOTP pair that was generated"""
  multiFactorTOTP: MultiFactorTotp
}

"""Payload of the enrolled totp payload"""
type EnrollAccountMultiFactorTotpPayload {
  """TOTP that belongs to this account now"""
  accountMultiFactorTOTPEnabled: Boolean
}

"""Payload for disabling account multi factor"""
type DisableAccountMultiFactorPayload {
  """TOTP that was removed from this account, if it was removed"""
  accountMultiFactorTOTPEnabled: Boolean
}

"""Payload for confirming the account email"""
type ConfirmAccountEmailPayload {
  """The account email that was confirmed"""
  accountEmail: AccountEmail
}

extend type Mutation {
  """
  Add an email to the account, will need to be confirmed
  """
  addAccountEmail(input: AddAccountEmailInput!): AddAccountEmailPayload @auth

  """
  Delete account email - email must belong to account and cannot be the primary email
  """
  deleteAccountEmail(input: DeleteAccountEmailInput!): DeleteAccountEmailPayload @auth

  """
  Update the account username

  Will retain the old username
  """
  updateAccountUsernameAndRetainPrevious(input: UpdateAccountUsernameAndRetainPreviousInput!): UpdateAccountUsernameAndRetainPreviousPayload @auth

  """
  Revoke a session for this account
  """
  revokeAccountSession(input: RevokeAccountSessionInput!): RevokeAccountSessionPayload @auth

  """
  Update the account email status to primary

  Cannot update if the email is not confirmed
  """
  updateAccountEmailStatusToPrimary(input: UpdateAccountEmailStatusToPrimaryInput!): UpdateAccountEmailStatusToPrimaryPayload @auth

  """
  Generates a new set of recovery codes. The previous set (whatever it was) will be deleted!
  """
  createAccountMultiFactorRecoveryCodesAndDeletePrevious: CreateAccountMultiFactorRecoveryCodesAndDeletePreviousPayload @auth

  """
  Generate a TOTP key for the current user. Recovery codes must be generated first.
  """
  generateAccountMultiFactorTotp: GenerateAccountMultiFactorTotpPayload @auth

  """
  Enroll into TOTP.

  Must have called "generateAccountMultiFactorTOTP" first before enrolling, since this will
  generate a valid secret
  """
  enrollAccountMultiFactorTotp(input: EnrollAccountMultiFactorTotpInput!): EnrollAccountMultiFactorTotpPayload @auth

  """
  Disable account multi factor

  Will delete all multi factor settings (if TOTP is set up, etc...)

  Priv. users cannot disable multi factor
  """
  disableAccountMultiFactor: DisableAccountMultiFactorPayload @auth
}

extend type Query {
  """
  Confirm account email, so it may be used
  """
  confirmAccountEmail(input: ConfirmAccountEmailInput!): ConfirmAccountEmailPayload @auth
}
