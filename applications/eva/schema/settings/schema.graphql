enum AccountEmailStatusEnum {
  CONFIRMED
  UNCONFIRMED
  PRIMARY
}

"""Email belonging to a specific account"""
type AccountEmail implements Node @key(fields: "id") {
  """ID of the account email"""
  id: ID!

  """The account email"""
  email: String!

  """The current status of the account email"""
  status: AccountEmailStatusEnum!

  """The account that this email belongs to"""
  account: Account! @goField(forceResolver: true)
}

"""Session belonging to a specific account"""
type AccountSession implements Node @key(fields: "id") {
  """ID of the session"""
  id: ID!

  """The user agent who first created the sesssion"""
  userAgent: String!

  """The IP of who first created the session"""
  ip: String!

  """When the session was created"""
  created: String!

  """If the session belongs to the currently authenticated account"""
  current: Boolean!
}

"""Edge of the account session"""
type AccountSessionEdge {
  cursor: String!
  edge: AccountSession!
}

"""Edge of the account session"""
type AccountSessionConnection {
  pageInfo: PageInfo!
  edges: [AccountSession!]!
}

"""Username belonging to a specific account"""
type AccountUsername implements Node @key(fields: "id") {
  """ID of the account username"""
  id: ID!

  """The account username"""
  username: String!

  """The account that this username belongs to"""
  account: Account! @goField(forceResolver: true)
}

"""The multi-factor recovery code belonging to the account"""
type AccountMultiFactorRecoveryCode implements Node @key(fields: "id") {
  """ID of the multi factor recovery code"""
  id: ID!

  """The multi factor recovery code"""
  code: String!

  """The account that this code belongs to"""
  account: Account! @goField(forceResolver: true)
}

"""TOTP secret belonging to a specific account"""
type AccountMultiFactorTotp implements Node @key(fields: "id") {
  """ID of the TOTP secret code"""
  id: ID!

  """The TOTP secret"""
  secret: String!

  """The account that this secret belongs to"""
  account: Account! @goField(forceResolver: true)
}

"""TOTP secret + image combination"""
type MultiFactorTotp  {
  """The TOTP secret"""
  secret: String!

  """
  Always html image compatible. Just set SRC tag to this and it will work!
  """
  imageSrc: String!
}

type AccountGeneralSettings {
  """
  Emails for account (multiple emails per account)
  """
  emails: [AccountEmail!]! @goField(forceResolver: true)

  """
  Usernames for account (history)
  """
  usernames: [AccountUsername!]! @goField(forceResolver: true)
}

type AccountMultiFactorSecuritySettings {
  """
  Have recovery codes been generated? Required in order to configure TOTP
  """
  recoveryCodesGenerated: Boolean!

  """
  Is multi factor enabled - can be toggled off if they want to
  """
  multiFactorEnabled: Boolean!

  """
  Privileged users cannot disable MFA (moderators, staff)
  """
  canDisableMultiFactor: Boolean!

  """
  Has TOTP been configured? Recovery codes must be generated before configuring
  """
  multiFactorTotpConfigured: Boolean!
}

type AccountSecuritySettings {
  """
  Sessions linked to this account
  """
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountSessionConnection! @goField(forceResolver: true)

  """
  Multi factor account settings
  """
  multiFactor: AccountMultiFactorSecuritySettings! @goField(forceResolver: true)

  """
  MFA Recovery codes belonging to this account
  """
  recoveryCodes: [AccountMultiFactorRecoveryCode!]! @goField(forceResolver: true)
}

type AccountSettings {
  """
  General account settings for the user
  """
  general: AccountGeneralSettings!

  """
  Security settings for the user
  """
  security: AccountSecuritySettings!
}

extend type Account @key(fields: "id") {
  """
  View settings for this account

  Only queryable if the currently logged-in account belongs to the requested account
  """
  settings: AccountSettings @goField(forceResolver: true)
}

"""Add an email to the account"""
input AddAccountEmailInput {
  """
  Account ID of the account that the email should be added to

  Send a blank string if you want the email to be added to the currently logged-in account

  Staff+ may add emails to any accounts
  """
  accountId: String!

  """
  The email that should be added to this account
  """
  email: String!
}

"""Input for removing an email from an"""
input RemoveAccountEmailInput {
  """
  Account ID of the account that the email should be removed from

  Send a blank string if you want the email to be added to the currently logged-in account

  Staff+ may remove emails from any account
  """
  accountId: String!

  """
  The email that should be removed
  """
  email: String!
}

"""Input for updating an account's username"""
input UpdateAccountUsernameAndRetainPreviousInput {
  """
  Account ID of the account that the username should be updated

  Send a blank string if you want to update the currently logged-in account's username

  Staff+ may update usernames from any account
  """
  accountId: String!

  """
  The username that the account should be updated to
  """
  username: String!
}

"""Input for updating the account status to primary"""
input UpdateAccountEmailStatusToPrimaryInput {
  """
  Account ID of the account that the email belongs to

  Send a blank string if you want to update the currently logged-in account's username

  Staff+ may update any acount
  """
  accountId: String!

  """
  The email that should be updated
  """
  email: String!
}

"""Input for updating an account's username"""
input RevokeAccountSessionInput {
  """
  Session ID that should be revoked
  """
  id: String!
}


"""Input for enrolling the account into TOTP"""
input EnrollAccountMultiFactorTotpInput {
  """
  The code that the TOTP expects
  """
  code: String!
}

"""Email to add the account"""
type AddAccountEmailPayload {
  """The account email that was added to"""
  accountEmail: AccountEmail
}

"""Email to add the account"""
type RemoveAccountEmailPayload {
  """The ID of the account email that was removed"""
  accountEmailId: ID!
}

"""Payload of the updated username"""
type UpdateAccountUsernameAndRetainPreviousPayload {
  """The account username that was added"""
  accountUsername: AccountUsername
}

"""Payload of the revoked account session"""
type RevokeAccountSessionPayload {
  """The ID of the session that was revoked"""
  accountSessionId: AccountUsername
}

"""Payload of the updated account email"""
type UpdateAccountEmailStatusToPrimaryPayload {
  """The account email that was updated"""
  accountEmail: AccountEmail
}

"""Payload of the created account recovery codes"""
type CreateAccountMultiFactorRecoveryCodesAndDeletePreviousPayload {
  """The recovery codes that were created"""
  accountMultiFactorRecoveryCodes: [AccountMultiFactorRecoveryCode!]!
}

"""Payload of the generated TOTP token"""
type GenerateAccountMultiFactorTotpPayload {
  """TOTP pair that was generated"""
  multiFactorTOTP: MultiFactorTotp
}

"""Payload of the enrolled totp payload"""
type EnrollAccountMultiFactorTotpPayload {
  """TOTP that belongs to this account now"""
  accountMultiFactorTOTP: AccountMultiFactorTotp
}

extend type Mutation {
  """
  Add an email to the account, will need to be confirmed
  """
  addAccountEmail(input: AddAccountEmailInput!): AddAccountEmailPayload

  """
  Remove account email - email must belong to account and cannot be the primary email
  """
  removeAccountEmail(input: RemoveAccountEmailInput!): RemoveAccountEmailPayload

  """
  Update the account username

  Will retain the old username
  """
  updateAccountUsernameAndRetainPrevious(input: UpdateAccountUsernameAndRetainPreviousInput!): UpdateAccountUsernameAndRetainPreviousPayload

  """
  Revoke a session for this account
  """
  revokeAccountSession(input: RevokeAccountSessionInput!): RevokeAccountSessionPayload

  """
  Update the account email status to primary

  Cannot update if the email is not confirmed
  """
  updateAccountEmailStatusToPrimary(input: UpdateAccountEmailStatusToPrimaryInput!): UpdateAccountEmailStatusToPrimaryPayload

  """
  Generates a new set of recovery codes. The previous set (whatever it was) will be deleted!
  """
  createAccountMultiFactorRecoveryCodesAndDeletePrevious: CreateAccountMultiFactorRecoveryCodesAndDeletePreviousPayload

  """
  Generate a TOTP key for the current user. Recovery codes must be generated first.
  """
  generateAccountMultiFactorTotp: GenerateAccountMultiFactorTotpPayload

  """
  Enroll into TOTP.

  Must have called "generateAccountMultiFactorTOTP" first before enrolling, since this will
  generate a valid secret
  """
  enrollAccountMultiFactorTotp(input: EnrollAccountMultiFactorTotpInput!): EnrollAccountMultiFactorTotpPayload

  """
  Toggle Multi-Factor for the user (enable or disable)

  Privileged users cannot disable

  If it's disabled, all MFA settings will be removed and it will need to be set up again next time
  """
  toggleAccountMultiFactor: Response!
}

extend type Query {
  """
  Confirm account email, so it may be used
  """
  confirmAccountEmail(id: String!): Response!
}
