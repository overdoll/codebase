"""The type of authentication token."""
enum AuthenticationTokenMethod {
  MAGIC_LINK
  CODE
}

"""Types of multi factor enabled for this account"""
type MultiFactor {
  totp: Boolean!
}

type AuthenticationTokenAccountStatus {
  """When verified, whether or not there is an account belonging to this token."""
  registered: Boolean!

  """If multi-factor is enabled for this account"""
  multiFactor: MultiFactor
}

"""Authentication token. Used for logging in."""
type AuthenticationToken {
  """Unique ID of the token"""
  id: ID!

  """Token belong to this authentication token"""
  token: String!

  """When the token is viewed with the correct ID, whether or not the devices match (you cannot use the token unless the device is the same)."""
  sameDevice: Boolean!

  """Whether or not the token is verified (required in order to see account status, and to use it for completing the auth flow)."""
  verified: Boolean!

  """The method that is used by this authentication token."""
  method: AuthenticationTokenMethod!

  """
  Whether or not this token is "secure"
  Secure means that the token has been viewed from the same network as originally created
  if it wasn't viewed in the same network, the interface should take care and double-check with
  the user that they want to verify the token.
  """
  secure: Boolean!

  """The userAgent this token was created from."""
  userAgent: String!

  """The location where this token was created at."""
  location: Location!

  """Once the token is verified, you can see the status of the account."""
  accountStatus: AuthenticationTokenAccountStatus
}

"""Input for granting an authentication token"""
input GrantAuthenticationTokenInput {
  """The email that the token will be granted for"""
  email: String!

  """The method that will be used for the authentication token. By default, MAGIC_LINK is used."""
  method: AuthenticationTokenMethod
}

"""Payload for granting access to an account using the token and the totp code"""
input GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpInput {
  """The original token"""
  token: String!

  """TOTP code"""
  code: String!
}

"""Payload for granting access to an account using the token and the recovery code"""
input GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeInput {
  """The original token"""
  token: String!

  """Recovery code"""
  recoveryCode: String!
}

"""Input for verifying authentication token"""
input VerifyAuthenticationTokenInput {
  """The original token"""
  token: String!

  """Secret (get it from the email). Will either be a code or can be used as a link"""
  secret: String!
}

"""Payload for creating an account with authentication token"""
input CreateAccountWithAuthenticationTokenInput {
  """The original token"""
  token: String!

  """
  The username to create the account with.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  username: String!
}

"""Payload for granting account access with the token. Will fail if account has multi-factor auth enabled."""
input GrantAccountAccessWithAuthenticationTokenInput {
  """The original token"""
  token: String!
}

"""Validation for granting an authentication token"""
enum GrantAuthenticationTokenValidation {
  INVALID_EMAIL
}

"""Payload for starting an authentication"""
type GrantAuthenticationTokenPayload {
  """The authentication token after starting"""
  authenticationToken: AuthenticationToken

  """Validation for granting an authentication token"""
  validation: GrantAuthenticationTokenValidation
}

"""Validation for creating an account with an authentication token"""
enum CreateAccountWithAuthenticationTokenValidation {
  EMAIL_TAKEN
  USERNAME_TAKEN
  TOKEN_INVALID
}

"""Payload for creating an account"""
type CreateAccountWithAuthenticationTokenPayload {
  """Validation for creating an account"""
  validation: CreateAccountWithAuthenticationTokenValidation

  """The account that was created"""
  account: Account

  """A token is revoked once an account is created, this represents it"""
  revokedAuthenticationTokenId: ID!
}

"""Payload for revoking the current viewer"""
type RevokeAccountAccessPayload {
  """The account that was revoked"""
  revokedAccountId: ID!
}

"""Payload for revoking the authentication token"""
type RevokeAuthenticationTokenPayload {
  """The authentication token that was removed"""
  revokedAuthenticationTokenId: ID!
}

"""Validation for granting account access with multi factor"""
enum GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpValidation {
  TOKEN_INVALID
  CODE_INVALID
}

"""Payload for granting access to an account using the authentication token and TOTP code"""
type GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpPayload {
  """Validation options"""
  validation: GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpValidation

  """The account that granted access to"""
  account: Account

  """A token is revoked once the account access is granted, this represents it"""
  revokedAuthenticationTokenId: ID!
}

"""Validation for granting account access with multi factor"""
enum GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeValidation {
  TOKEN_INVALID
  RECOVERY_CODE_INVALID
}

"""Payload for granting access to an account using the authentication token and Recovery Code"""
type GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodePayload {
  """Validation options"""
  validation: GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeValidation

  """The account that granted access to"""
  account: Account

  """A token is revoked once the account access is granted, this represents it"""
  revokedAuthenticationTokenId: ID!
}

enum GrantAccountAccessWithAuthenticationTokenValidation {
  TOKEN_INVALID
}

type GrantAccountAccessWithAuthenticationTokenPayload {
  """Validation options"""
  validation: GrantAccountAccessWithAuthenticationTokenValidation

  """The account that granted access to"""
  account: Account

  """A token is revoked once the account access is granted, this represents it"""
  revokedAuthenticationTokenId: ID!
}

"""Validation for granting account access"""
enum VerifyAuthenticationTokenValidation {
  TOKEN_INVALID
}

"""Payload for verifying the authentication token"""
type VerifyAuthenticationTokenPayload {
  """Validation options"""
  validation: VerifyAuthenticationTokenValidation

  """The authentication token"""
  authenticationToken: AuthenticationToken
}

"""Input for revoking an authentication token"""
input RevokeAuthenticationTokenInput {
  """The token to revoke"""
  token: String!

  """The secret associated with this token. Required if revoking the token not on the same device that created it."""
  secret: String
}

type Mutation {
  """
  Grant authentication token

  Authentication token can be used to login into a specific account, provided the token's value is first redeemed
  with the query
  """
  grantAuthenticationToken(input: GrantAuthenticationTokenInput!): GrantAuthenticationTokenPayload

  """
  Revoke authentication token

  Creating accounts and completing authentication flows will not be possible once it's revoked
  """
  revokeAuthenticationToken(input: RevokeAuthenticationTokenInput!): RevokeAuthenticationTokenPayload

  """
  Create an account using the current authentication token
  """
  createAccountWithAuthenticationToken(input: CreateAccountWithAuthenticationTokenInput!): CreateAccountWithAuthenticationTokenPayload

  """
  Grant account access with authentication token

  Should be used if the token does not require a multi-factor authentication step, and the token has to be
  verified first
  """
  grantAccountAccessWithAuthenticationToken(input: GrantAccountAccessWithAuthenticationTokenInput!): GrantAccountAccessWithAuthenticationTokenPayload

  """
  Grant account access using an authentication token and a multi factor option

  Set "code" when authenticating with a TOTP code
  """
  grantAccountAccessWithAuthenticationTokenAndMultiFactorTotp(input: GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpInput!): GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpPayload

  """
  Grant account access using an authentication token and a multi factor option

  Set "recoveryCode" when authenticating with a recovery code
  """
  grantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCode(input: GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeInput!): GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodePayload

  """
  Will verify the authentication token. Requires the secret (sent in an email)
  """
  verifyAuthenticationToken(input: VerifyAuthenticationTokenInput!): VerifyAuthenticationTokenPayload

  """
  Logout the current account
  """
  revokeAccountAccess: RevokeAccountAccessPayload
}

type Query {
  """
  Get the status of the authentication token - whether or not it is redeemed, account status, etc..

  Note: you can only view the authentication token if you're the originating device or you have entered a valid secret (not from same device)
  """
  viewAuthenticationToken(token: String!, secret: String): AuthenticationToken
}
