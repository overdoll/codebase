// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"overdoll/applications/hades/internal/ports/graphql/types"
	graphql1 "overdoll/libraries/graphql"
	"overdoll/libraries/graphql/relay"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Account() AccountResolver
	AccountActiveClubSupporterSubscription() AccountActiveClubSupporterSubscriptionResolver
	AccountCancelledClubSupporterSubscription() AccountCancelledClubSupporterSubscriptionResolver
	AccountExpiredClubSupporterSubscription() AccountExpiredClubSupporterSubscriptionResolver
	AccountTransaction() AccountTransactionResolver
	CCBillTransactionDetails() CCBillTransactionDetailsResolver
	CancellationReason() CancellationReasonResolver
	Club() ClubResolver
	ClubMember() ClubMemberResolver
	Entity() EntityResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	EntityResolver func(ctx context.Context, obj interface{}, next graphql.Resolver, multi *bool) (res interface{}, err error)
}

type ComplexityRoot struct {
	Account struct {
		ClubSupporterSubscriptions                            func(childComplexity int, after *string, before *string, first *int, last *int, status []types.AccountClubSupporterSubscriptionStatus) int
		ExpiredClubSupporterSubscriptions                     func(childComplexity int, after *string, before *string, first *int, last *int) int
		HasActiveOrCancelledAccountClubSupporterSubscriptions func(childComplexity int) int
		ID                                                    func(childComplexity int) int
		SavedPaymentMethods                                   func(childComplexity int, after *string, before *string, first *int, last *int) int
		Transactions                                          func(childComplexity int, after *string, before *string, first *int, last *int, typeArg *types.AccountTransactionType, from *time.Time, to *time.Time) int
		TransactionsChargebackCount                           func(childComplexity int) int
		TransactionsPaymentCount                              func(childComplexity int) int
		TransactionsRefundCount                               func(childComplexity int) int
		TransactionsTotalCount                                func(childComplexity int) int
	}

	AccountActiveClubSupporterSubscription struct {
		Account            func(childComplexity int) int
		BillingAmount      func(childComplexity int) int
		BillingCurrency    func(childComplexity int) int
		BillingError       func(childComplexity int) int
		CcbillSubscription func(childComplexity int) int
		Club               func(childComplexity int) int
		ID                 func(childComplexity int) int
		LastBillingDate    func(childComplexity int) int
		NextBillingDate    func(childComplexity int) int
		PaymentMethod      func(childComplexity int) int
		Reference          func(childComplexity int) int
		SupporterSince     func(childComplexity int) int
		Transactions       func(childComplexity int, after *string, before *string, first *int, last *int, typeArg *types.AccountTransactionType, from *time.Time, to *time.Time) int
		UpdatedAt          func(childComplexity int) int
	}

	AccountCancelledClubSupporterSubscription struct {
		Account            func(childComplexity int) int
		BillingAmount      func(childComplexity int) int
		BillingCurrency    func(childComplexity int) int
		BillingError       func(childComplexity int) int
		CancellationReason func(childComplexity int) int
		CancelledAt        func(childComplexity int) int
		CcbillSubscription func(childComplexity int) int
		Club               func(childComplexity int) int
		EndDate            func(childComplexity int) int
		ID                 func(childComplexity int) int
		PaymentMethod      func(childComplexity int) int
		Reference          func(childComplexity int) int
		SupporterSince     func(childComplexity int) int
		Transactions       func(childComplexity int, after *string, before *string, first *int, last *int, typeArg *types.AccountTransactionType, from *time.Time, to *time.Time) int
		UpdatedAt          func(childComplexity int) int
	}

	AccountClubSupporterSubscriptionBillingError struct {
		CcbillDeclineError func(childComplexity int) int
		CcbillErrorCode    func(childComplexity int) int
		CcbillErrorText    func(childComplexity int) int
		FailedAt           func(childComplexity int) int
		NextRetryDate      func(childComplexity int) int
	}

	AccountClubSupporterSubscriptionConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AccountClubSupporterSubscriptionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AccountExpiredClubSupporterSubscription struct {
		Account            func(childComplexity int) int
		BillingAmount      func(childComplexity int) int
		BillingCurrency    func(childComplexity int) int
		BillingError       func(childComplexity int) int
		CancellationReason func(childComplexity int) int
		CcbillSubscription func(childComplexity int) int
		Club               func(childComplexity int) int
		ExpiredAt          func(childComplexity int) int
		ID                 func(childComplexity int) int
		Reference          func(childComplexity int) int
		SupporterSince     func(childComplexity int) int
		Transactions       func(childComplexity int, after *string, before *string, first *int, last *int, typeArg *types.AccountTransactionType, from *time.Time, to *time.Time) int
		UpdatedAt          func(childComplexity int) int
	}

	AccountSavedPaymentMethod struct {
		Account            func(childComplexity int) int
		CcbillSubscription func(childComplexity int) int
		ID                 func(childComplexity int) int
		PaymentMethod      func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	AccountSavedPaymentMethodConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AccountSavedPaymentMethodEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AccountTransaction struct {
		Amount                    func(childComplexity int) int
		BilledAtDate              func(childComplexity int) int
		CcbillTransaction         func(childComplexity int) int
		ClubSupporterSubscription func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		Currency                  func(childComplexity int) int
		Events                    func(childComplexity int) int
		ID                        func(childComplexity int) int
		NextBillingDate           func(childComplexity int) int
		PaymentMethod             func(childComplexity int) int
		Reference                 func(childComplexity int) int
		TotalRefunded             func(childComplexity int) int
		Type                      func(childComplexity int) int
	}

	AccountTransactionConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AccountTransactionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AccountTransactionEvent struct {
		Amount    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Currency  func(childComplexity int) int
		ID        func(childComplexity int) int
		Reason    func(childComplexity int) int
	}

	AspectRatio struct {
		Height func(childComplexity int) int
		Width  func(childComplexity int) int
	}

	BecomeClubSupporterWithAccountSavedPaymentMethodPayload struct {
		CcbillTransactionToken func(childComplexity int) int
	}

	BillingAddress struct {
		AddressLine1 func(childComplexity int) int
		City         func(childComplexity int) int
		Country      func(childComplexity int) int
		PostalCode   func(childComplexity int) int
		State        func(childComplexity int) int
	}

	BillingContact struct {
		Email       func(childComplexity int) int
		FirstName   func(childComplexity int) int
		LastName    func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
	}

	CCBillSubscription struct {
		CcbillSubscriptionID func(childComplexity int) int
		Email                func(childComplexity int) int
		Link                 func(childComplexity int) int
		PaymentMethod        func(childComplexity int) int
	}

	CCBillSubscriptionDetails struct {
		Account                    func(childComplexity int) int
		AccountingCurrency         func(childComplexity int) int
		AccountingInitialPrice     func(childComplexity int) int
		AccountingRecurringPrice   func(childComplexity int) int
		BilledCurrency             func(childComplexity int) int
		BilledInitialPrice         func(childComplexity int) int
		BilledRecurringPrice       func(childComplexity int) int
		CancelDate                 func(childComplexity int) int
		ChargebacksIssued          func(childComplexity int) int
		Club                       func(childComplexity int) int
		ExpirationDate             func(childComplexity int) int
		ID                         func(childComplexity int) int
		IsDuplicate                func(childComplexity int) int
		IsRecurring                func(childComplexity int) int
		PaymentMethod              func(childComplexity int) int
		RefundsIssued              func(childComplexity int) int
		SignupDate                 func(childComplexity int) int
		Status                     func(childComplexity int) int
		SubscriptionCurrency       func(childComplexity int) int
		SubscriptionInitialPrice   func(childComplexity int) int
		SubscriptionRecurringPrice func(childComplexity int) int
		TimesRebilled              func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		VoidsIssued                func(childComplexity int) int
	}

	CCBillTransaction struct {
		CcbillSubscriptionID func(childComplexity int) int
		CcbillTransactionID  func(childComplexity int) int
	}

	CCBillTransactionDetails struct {
		Approved                               func(childComplexity int) int
		DeclineCode                            func(childComplexity int) int
		DeclineError                           func(childComplexity int) int
		DeclineText                            func(childComplexity int) int
		ID                                     func(childComplexity int) int
		LinkedAccountClubSupporterSubscription func(childComplexity int) int
	}

	CancelAccountClubSupporterSubscriptionPayload struct {
		ClubSupporterSubscription func(childComplexity int) int
	}

	CancelActiveSupporterSubscriptionsForClubPayload struct {
		Club func(childComplexity int) int
	}

	CancellationReason struct {
		Deprecated        func(childComplexity int) int
		ID                func(childComplexity int) int
		Reference         func(childComplexity int) int
		Title             func(childComplexity int, locale *string) int
		TitleTranslations func(childComplexity int) int
	}

	CancellationReasonConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CancellationReasonEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Card struct {
		Expiration func(childComplexity int) int
		Last4      func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	Club struct {
		ID                         func(childComplexity int) int
		SupporterSubscriptionPrice func(childComplexity int) int
		SupporterSubscriptions     func(childComplexity int, after *string, before *string, first *int, last *int, status []types.AccountClubSupporterSubscriptionStatus) int
		TransactionMetrics         func(childComplexity int, after *string, before *string, first *int, last *int) int
	}

	ClubMember struct {
		ClubSupporterSubscription func(childComplexity int) int
		ID                        func(childComplexity int) int
	}

	ClubTransactionMetric struct {
		ChargebacksAmount       func(childComplexity int) int
		ChargebacksAmountRatio  func(childComplexity int) int
		ChargebacksCount        func(childComplexity int) int
		ChargebacksCountRatio   func(childComplexity int) int
		Currency                func(childComplexity int) int
		Month                   func(childComplexity int) int
		RefundsAmount           func(childComplexity int) int
		RefundsAmountRatio      func(childComplexity int) int
		RefundsCount            func(childComplexity int) int
		RefundsCountRatio       func(childComplexity int) int
		TotalTransactionsAmount func(childComplexity int) int
		TotalTransactionsCount  func(childComplexity int) int
		Year                    func(childComplexity int) int
	}

	ClubTransactionMetricConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ClubTransactionMetricEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ColorPalette struct {
		Blue    func(childComplexity int) int
		Green   func(childComplexity int) int
		Percent func(childComplexity int) int
		Red     func(childComplexity int) int
	}

	CreateCancellationReasonPayload struct {
		CancellationReason func(childComplexity int) int
	}

	DeleteAccountSavedPaymentMethodPayload struct {
		DeletedAccountSavedPaymentMethodID func(childComplexity int) int
	}

	Entity struct {
		FindAccountActiveClubSupporterSubscriptionByID    func(childComplexity int, id relay.ID) int
		FindAccountByID                                   func(childComplexity int, id relay.ID) int
		FindAccountCancelledClubSupporterSubscriptionByID func(childComplexity int, id relay.ID) int
		FindAccountExpiredClubSupporterSubscriptionByID   func(childComplexity int, id relay.ID) int
		FindAccountTransactionByID                        func(childComplexity int, id relay.ID) int
		FindCancellationReasonByID                        func(childComplexity int, id relay.ID) int
		FindClubByID                                      func(childComplexity int, id relay.ID) int
		FindClubMemberByID                                func(childComplexity int, id relay.ID) int
	}

	ExpiredAccountClubSupporterSubscription struct {
		Account        func(childComplexity int) int
		CancelledAt    func(childComplexity int) int
		Club           func(childComplexity int) int
		ExpiredAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		SupporterSince func(childComplexity int) int
	}

	ExpiredAccountClubSupporterSubscriptionConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ExpiredAccountClubSupporterSubscriptionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ExtendAccountClubSupporterSubscriptionPayload struct {
		ClubSupporterSubscription func(childComplexity int) int
	}

	GenerateCCBillClubSupporterPaymentLinkPayload struct {
		PaymentLink func(childComplexity int) int
	}

	GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload struct {
		Link func(childComplexity int) int
	}

	GenerateClubSupporterRefundReceiptFromAccountTransactionPayload struct {
		Link func(childComplexity int) int
	}

	GenerateRefundAmountForAccountTransactionPayload struct {
		RefundAmount func(childComplexity int) int
	}

	HLSVideoContainer struct {
		URL func(childComplexity int) int
	}

	ImageMedia struct {
		ColorPalettes func(childComplexity int) int
		ID            func(childComplexity int) int
		Original      func(childComplexity int) int
		Variants      func(childComplexity int) int
	}

	ImageMediaAccess struct {
		Height func(childComplexity int) int
		URL    func(childComplexity int) int
		Width  func(childComplexity int) int
	}

	ImageMediaVariants struct {
		Banner      func(childComplexity int) int
		Hd          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Large       func(childComplexity int) int
		Medium      func(childComplexity int) int
		Mini        func(childComplexity int) int
		Small       func(childComplexity int) int
		Thumbnail   func(childComplexity int) int
		ThumbnailHd func(childComplexity int) int
	}

	Language struct {
		Locale func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	LocalizedPricingPoint struct {
		LocalizedPrice func(childComplexity int) int
		Prices         func(childComplexity int) int
	}

	MP4VideoContainer struct {
		Bitrate func(childComplexity int) int
		Height  func(childComplexity int) int
		URL     func(childComplexity int) int
		Width   func(childComplexity int) int
	}

	MediaProgress struct {
		ID func(childComplexity int) int
	}

	Mutation struct {
		BecomeClubSupporterWithAccountSavedPaymentMethod          func(childComplexity int, input types.BecomeClubSupporterWithAccountSavedPaymentMethodInput) int
		CancelAccountClubSupporterSubscription                    func(childComplexity int, input types.CancelAccountClubSupporterSubscriptionInput) int
		CancelActiveSupporterSubscriptionsForClub                 func(childComplexity int, input types.CancelActiveSupporterSubscriptionsForClubInput) int
		CreateCancellationReason                                  func(childComplexity int, input types.CreateCancellationReasonInput) int
		DeleteAccountSavedPaymentMethod                           func(childComplexity int, input types.DeleteAccountSavedPaymentMethodInput) int
		ExtendAccountClubSupporterSubscription                    func(childComplexity int, input types.ExtendAccountClubSupporterSubscriptionInput) int
		GenerateCCBillClubSupporterPaymentLink                    func(childComplexity int, input types.GenerateCCBillClubSupporterPaymentLinkInput) int
		GenerateClubSupporterPaymentReceiptFromAccountTransaction func(childComplexity int, input types.GenerateClubSupporterPaymentReceiptFromAccountTransactionInput) int
		GenerateClubSupporterRefundReceiptFromAccountTransaction  func(childComplexity int, input types.GenerateClubSupporterRefundReceiptFromAccountTransactionInput) int
		GenerateRefundAmountForAccountTransaction                 func(childComplexity int, input types.GenerateRefundAmountForAccountTransactionInput) int
		RefundAccountTransaction                                  func(childComplexity int, input types.RefundAccountTransactionInput) int
		UpdateCancellationReasonDeprecated                        func(childComplexity int, input types.UpdateCancellationReasonDeprecatedInput) int
		UpdateCancellationReasonTitle                             func(childComplexity int, input types.UpdateCancellationReasonTitleInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	PaymentMethod struct {
		BillingAddress func(childComplexity int) int
		BillingContact func(childComplexity int) int
		Card           func(childComplexity int) int
	}

	Price struct {
		Amount   func(childComplexity int) int
		Currency func(childComplexity int) int
	}

	Query struct {
		AccountClubSupporterSubscription func(childComplexity int, reference string) int
		AccountTransaction               func(childComplexity int, reference string) int
		CancellationReason               func(childComplexity int, reference string) int
		CancellationReasons              func(childComplexity int, after *string, before *string, first *int, last *int, deprecated bool) int
		CcbillSubscriptionDetails        func(childComplexity int, ccbillSubscriptionID string) int
		CcbillTransactionDetails         func(childComplexity int, token string) int
		__resolve__service               func(childComplexity int) int
		__resolve_entities               func(childComplexity int, representations []map[string]interface{}) int
	}

	RawMedia struct {
		Failed           func(childComplexity int) int
		ID               func(childComplexity int) int
		OriginalFileName func(childComplexity int) int
		Progress         func(childComplexity int) int
	}

	RefundAccountTransactionPayload struct {
		AccountTransaction func(childComplexity int) int
	}

	RefundAmount struct {
		Currency       func(childComplexity int) int
		MaximumAmount  func(childComplexity int) int
		ProratedAmount func(childComplexity int) int
	}

	Resource struct {
		Failed         func(childComplexity int) int
		Height         func(childComplexity int) int
		ID             func(childComplexity int) int
		Preview        func(childComplexity int) int
		Processed      func(childComplexity int) int
		Progress       func(childComplexity int) int
		Type           func(childComplexity int) int
		Urls           func(childComplexity int) int
		VideoDuration  func(childComplexity int) int
		VideoNoAudio   func(childComplexity int) int
		VideoThumbnail func(childComplexity int) int
		Width          func(childComplexity int) int
	}

	ResourceProgress struct {
		ID func(childComplexity int) int
	}

	ResourceUrl struct {
		MimeType func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	Translation struct {
		Language func(childComplexity int) int
		Text     func(childComplexity int) int
	}

	UpdateCancellationReasonDeprecatedPayload struct {
		CancellationReason func(childComplexity int) int
	}

	UpdateCancellationReasonTitlePayload struct {
		CancellationReason func(childComplexity int) int
	}

	VideoMedia struct {
		AspectRatio func(childComplexity int) int
		Containers  func(childComplexity int) int
		Cover       func(childComplexity int) int
		Duration    func(childComplexity int) int
		HasAudio    func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	_Service struct {
		SDL func(childComplexity int) int
	}
}

type AccountResolver interface {
	ClubSupporterSubscriptions(ctx context.Context, obj *types.Account, after *string, before *string, first *int, last *int, status []types.AccountClubSupporterSubscriptionStatus) (*types.AccountClubSupporterSubscriptionConnection, error)
	ExpiredClubSupporterSubscriptions(ctx context.Context, obj *types.Account, after *string, before *string, first *int, last *int) (*types.ExpiredAccountClubSupporterSubscriptionConnection, error)
	SavedPaymentMethods(ctx context.Context, obj *types.Account, after *string, before *string, first *int, last *int) (*types.AccountSavedPaymentMethodConnection, error)
	TransactionsTotalCount(ctx context.Context, obj *types.Account) (int, error)
	TransactionsPaymentCount(ctx context.Context, obj *types.Account) (int, error)
	TransactionsRefundCount(ctx context.Context, obj *types.Account) (int, error)
	TransactionsChargebackCount(ctx context.Context, obj *types.Account) (int, error)
	Transactions(ctx context.Context, obj *types.Account, after *string, before *string, first *int, last *int, typeArg *types.AccountTransactionType, from *time.Time, to *time.Time) (*types.AccountTransactionConnection, error)
	HasActiveOrCancelledAccountClubSupporterSubscriptions(ctx context.Context, obj *types.Account) (bool, error)
}
type AccountActiveClubSupporterSubscriptionResolver interface {
	Transactions(ctx context.Context, obj *types.AccountActiveClubSupporterSubscription, after *string, before *string, first *int, last *int, typeArg *types.AccountTransactionType, from *time.Time, to *time.Time) (*types.AccountTransactionConnection, error)
}
type AccountCancelledClubSupporterSubscriptionResolver interface {
	Transactions(ctx context.Context, obj *types.AccountCancelledClubSupporterSubscription, after *string, before *string, first *int, last *int, typeArg *types.AccountTransactionType, from *time.Time, to *time.Time) (*types.AccountTransactionConnection, error)

	CancellationReason(ctx context.Context, obj *types.AccountCancelledClubSupporterSubscription) (*types.CancellationReason, error)
}
type AccountExpiredClubSupporterSubscriptionResolver interface {
	Transactions(ctx context.Context, obj *types.AccountExpiredClubSupporterSubscription, after *string, before *string, first *int, last *int, typeArg *types.AccountTransactionType, from *time.Time, to *time.Time) (*types.AccountTransactionConnection, error)

	CancellationReason(ctx context.Context, obj *types.AccountExpiredClubSupporterSubscription) (*types.CancellationReason, error)
}
type AccountTransactionResolver interface {
	ClubSupporterSubscription(ctx context.Context, obj *types.AccountTransaction) (types.AccountClubSupporterSubscription, error)
}
type CCBillTransactionDetailsResolver interface {
	LinkedAccountClubSupporterSubscription(ctx context.Context, obj *types.CCBillTransactionDetails) (types.AccountClubSupporterSubscription, error)
}
type CancellationReasonResolver interface {
	Title(ctx context.Context, obj *types.CancellationReason, locale *string) (string, error)
}
type ClubResolver interface {
	SupporterSubscriptionPrice(ctx context.Context, obj *types.Club) (*types.LocalizedPricingPoint, error)
	SupporterSubscriptions(ctx context.Context, obj *types.Club, after *string, before *string, first *int, last *int, status []types.AccountClubSupporterSubscriptionStatus) (*types.AccountClubSupporterSubscriptionConnection, error)
	TransactionMetrics(ctx context.Context, obj *types.Club, after *string, before *string, first *int, last *int) (*types.ClubTransactionMetricConnection, error)
}
type ClubMemberResolver interface {
	ClubSupporterSubscription(ctx context.Context, obj *types.ClubMember) (types.AccountClubSupporterSubscription, error)
}
type EntityResolver interface {
	FindAccountByID(ctx context.Context, id relay.ID) (*types.Account, error)
	FindAccountActiveClubSupporterSubscriptionByID(ctx context.Context, id relay.ID) (*types.AccountActiveClubSupporterSubscription, error)
	FindAccountCancelledClubSupporterSubscriptionByID(ctx context.Context, id relay.ID) (*types.AccountCancelledClubSupporterSubscription, error)
	FindAccountExpiredClubSupporterSubscriptionByID(ctx context.Context, id relay.ID) (*types.AccountExpiredClubSupporterSubscription, error)
	FindAccountTransactionByID(ctx context.Context, id relay.ID) (*types.AccountTransaction, error)
	FindCancellationReasonByID(ctx context.Context, id relay.ID) (*types.CancellationReason, error)
	FindClubByID(ctx context.Context, id relay.ID) (*types.Club, error)
	FindClubMemberByID(ctx context.Context, id relay.ID) (*types.ClubMember, error)
}
type MutationResolver interface {
	GenerateCCBillClubSupporterPaymentLink(ctx context.Context, input types.GenerateCCBillClubSupporterPaymentLinkInput) (*types.GenerateCCBillClubSupporterPaymentLinkPayload, error)
	BecomeClubSupporterWithAccountSavedPaymentMethod(ctx context.Context, input types.BecomeClubSupporterWithAccountSavedPaymentMethodInput) (*types.BecomeClubSupporterWithAccountSavedPaymentMethodPayload, error)
	CancelAccountClubSupporterSubscription(ctx context.Context, input types.CancelAccountClubSupporterSubscriptionInput) (*types.CancelAccountClubSupporterSubscriptionPayload, error)
	RefundAccountTransaction(ctx context.Context, input types.RefundAccountTransactionInput) (*types.RefundAccountTransactionPayload, error)
	ExtendAccountClubSupporterSubscription(ctx context.Context, input types.ExtendAccountClubSupporterSubscriptionInput) (*types.ExtendAccountClubSupporterSubscriptionPayload, error)
	GenerateRefundAmountForAccountTransaction(ctx context.Context, input types.GenerateRefundAmountForAccountTransactionInput) (*types.GenerateRefundAmountForAccountTransactionPayload, error)
	DeleteAccountSavedPaymentMethod(ctx context.Context, input types.DeleteAccountSavedPaymentMethodInput) (*types.DeleteAccountSavedPaymentMethodPayload, error)
	GenerateClubSupporterPaymentReceiptFromAccountTransaction(ctx context.Context, input types.GenerateClubSupporterPaymentReceiptFromAccountTransactionInput) (*types.GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload, error)
	GenerateClubSupporterRefundReceiptFromAccountTransaction(ctx context.Context, input types.GenerateClubSupporterRefundReceiptFromAccountTransactionInput) (*types.GenerateClubSupporterRefundReceiptFromAccountTransactionPayload, error)
	CancelActiveSupporterSubscriptionsForClub(ctx context.Context, input types.CancelActiveSupporterSubscriptionsForClubInput) (*types.CancelActiveSupporterSubscriptionsForClubPayload, error)
	CreateCancellationReason(ctx context.Context, input types.CreateCancellationReasonInput) (*types.CreateCancellationReasonPayload, error)
	UpdateCancellationReasonTitle(ctx context.Context, input types.UpdateCancellationReasonTitleInput) (*types.UpdateCancellationReasonTitlePayload, error)
	UpdateCancellationReasonDeprecated(ctx context.Context, input types.UpdateCancellationReasonDeprecatedInput) (*types.UpdateCancellationReasonDeprecatedPayload, error)
}
type QueryResolver interface {
	CancellationReason(ctx context.Context, reference string) (*types.CancellationReason, error)
	CancellationReasons(ctx context.Context, after *string, before *string, first *int, last *int, deprecated bool) (*types.CancellationReasonConnection, error)
	CcbillSubscriptionDetails(ctx context.Context, ccbillSubscriptionID string) (*types.CCBillSubscriptionDetails, error)
	AccountClubSupporterSubscription(ctx context.Context, reference string) (types.AccountClubSupporterSubscription, error)
	AccountTransaction(ctx context.Context, reference string) (*types.AccountTransaction, error)
	CcbillTransactionDetails(ctx context.Context, token string) (*types.CCBillTransactionDetails, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Account.clubSupporterSubscriptions":
		if e.complexity.Account.ClubSupporterSubscriptions == nil {
			break
		}

		args, err := ec.field_Account_clubSupporterSubscriptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.ClubSupporterSubscriptions(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["status"].([]types.AccountClubSupporterSubscriptionStatus)), true

	case "Account.expiredClubSupporterSubscriptions":
		if e.complexity.Account.ExpiredClubSupporterSubscriptions == nil {
			break
		}

		args, err := ec.field_Account_expiredClubSupporterSubscriptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.ExpiredClubSupporterSubscriptions(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Account.hasActiveOrCancelledAccountClubSupporterSubscriptions":
		if e.complexity.Account.HasActiveOrCancelledAccountClubSupporterSubscriptions == nil {
			break
		}

		return e.complexity.Account.HasActiveOrCancelledAccountClubSupporterSubscriptions(childComplexity), true

	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.savedPaymentMethods":
		if e.complexity.Account.SavedPaymentMethods == nil {
			break
		}

		args, err := ec.field_Account_savedPaymentMethods_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.SavedPaymentMethods(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Account.transactions":
		if e.complexity.Account.Transactions == nil {
			break
		}

		args, err := ec.field_Account_transactions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.Transactions(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["type"].(*types.AccountTransactionType), args["from"].(*time.Time), args["to"].(*time.Time)), true

	case "Account.transactionsChargebackCount":
		if e.complexity.Account.TransactionsChargebackCount == nil {
			break
		}

		return e.complexity.Account.TransactionsChargebackCount(childComplexity), true

	case "Account.transactionsPaymentCount":
		if e.complexity.Account.TransactionsPaymentCount == nil {
			break
		}

		return e.complexity.Account.TransactionsPaymentCount(childComplexity), true

	case "Account.transactionsRefundCount":
		if e.complexity.Account.TransactionsRefundCount == nil {
			break
		}

		return e.complexity.Account.TransactionsRefundCount(childComplexity), true

	case "Account.transactionsTotalCount":
		if e.complexity.Account.TransactionsTotalCount == nil {
			break
		}

		return e.complexity.Account.TransactionsTotalCount(childComplexity), true

	case "AccountActiveClubSupporterSubscription.account":
		if e.complexity.AccountActiveClubSupporterSubscription.Account == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.Account(childComplexity), true

	case "AccountActiveClubSupporterSubscription.billingAmount":
		if e.complexity.AccountActiveClubSupporterSubscription.BillingAmount == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.BillingAmount(childComplexity), true

	case "AccountActiveClubSupporterSubscription.billingCurrency":
		if e.complexity.AccountActiveClubSupporterSubscription.BillingCurrency == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.BillingCurrency(childComplexity), true

	case "AccountActiveClubSupporterSubscription.billingError":
		if e.complexity.AccountActiveClubSupporterSubscription.BillingError == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.BillingError(childComplexity), true

	case "AccountActiveClubSupporterSubscription.ccbillSubscription":
		if e.complexity.AccountActiveClubSupporterSubscription.CcbillSubscription == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.CcbillSubscription(childComplexity), true

	case "AccountActiveClubSupporterSubscription.club":
		if e.complexity.AccountActiveClubSupporterSubscription.Club == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.Club(childComplexity), true

	case "AccountActiveClubSupporterSubscription.id":
		if e.complexity.AccountActiveClubSupporterSubscription.ID == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.ID(childComplexity), true

	case "AccountActiveClubSupporterSubscription.lastBillingDate":
		if e.complexity.AccountActiveClubSupporterSubscription.LastBillingDate == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.LastBillingDate(childComplexity), true

	case "AccountActiveClubSupporterSubscription.nextBillingDate":
		if e.complexity.AccountActiveClubSupporterSubscription.NextBillingDate == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.NextBillingDate(childComplexity), true

	case "AccountActiveClubSupporterSubscription.paymentMethod":
		if e.complexity.AccountActiveClubSupporterSubscription.PaymentMethod == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.PaymentMethod(childComplexity), true

	case "AccountActiveClubSupporterSubscription.reference":
		if e.complexity.AccountActiveClubSupporterSubscription.Reference == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.Reference(childComplexity), true

	case "AccountActiveClubSupporterSubscription.supporterSince":
		if e.complexity.AccountActiveClubSupporterSubscription.SupporterSince == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.SupporterSince(childComplexity), true

	case "AccountActiveClubSupporterSubscription.transactions":
		if e.complexity.AccountActiveClubSupporterSubscription.Transactions == nil {
			break
		}

		args, err := ec.field_AccountActiveClubSupporterSubscription_transactions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AccountActiveClubSupporterSubscription.Transactions(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["type"].(*types.AccountTransactionType), args["from"].(*time.Time), args["to"].(*time.Time)), true

	case "AccountActiveClubSupporterSubscription.updatedAt":
		if e.complexity.AccountActiveClubSupporterSubscription.UpdatedAt == nil {
			break
		}

		return e.complexity.AccountActiveClubSupporterSubscription.UpdatedAt(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.account":
		if e.complexity.AccountCancelledClubSupporterSubscription.Account == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.Account(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.billingAmount":
		if e.complexity.AccountCancelledClubSupporterSubscription.BillingAmount == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.BillingAmount(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.billingCurrency":
		if e.complexity.AccountCancelledClubSupporterSubscription.BillingCurrency == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.BillingCurrency(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.billingError":
		if e.complexity.AccountCancelledClubSupporterSubscription.BillingError == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.BillingError(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.cancellationReason":
		if e.complexity.AccountCancelledClubSupporterSubscription.CancellationReason == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.CancellationReason(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.cancelledAt":
		if e.complexity.AccountCancelledClubSupporterSubscription.CancelledAt == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.CancelledAt(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.ccbillSubscription":
		if e.complexity.AccountCancelledClubSupporterSubscription.CcbillSubscription == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.CcbillSubscription(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.club":
		if e.complexity.AccountCancelledClubSupporterSubscription.Club == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.Club(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.endDate":
		if e.complexity.AccountCancelledClubSupporterSubscription.EndDate == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.EndDate(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.id":
		if e.complexity.AccountCancelledClubSupporterSubscription.ID == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.ID(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.paymentMethod":
		if e.complexity.AccountCancelledClubSupporterSubscription.PaymentMethod == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.PaymentMethod(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.reference":
		if e.complexity.AccountCancelledClubSupporterSubscription.Reference == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.Reference(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.supporterSince":
		if e.complexity.AccountCancelledClubSupporterSubscription.SupporterSince == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.SupporterSince(childComplexity), true

	case "AccountCancelledClubSupporterSubscription.transactions":
		if e.complexity.AccountCancelledClubSupporterSubscription.Transactions == nil {
			break
		}

		args, err := ec.field_AccountCancelledClubSupporterSubscription_transactions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.Transactions(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["type"].(*types.AccountTransactionType), args["from"].(*time.Time), args["to"].(*time.Time)), true

	case "AccountCancelledClubSupporterSubscription.updatedAt":
		if e.complexity.AccountCancelledClubSupporterSubscription.UpdatedAt == nil {
			break
		}

		return e.complexity.AccountCancelledClubSupporterSubscription.UpdatedAt(childComplexity), true

	case "AccountClubSupporterSubscriptionBillingError.ccbillDeclineError":
		if e.complexity.AccountClubSupporterSubscriptionBillingError.CcbillDeclineError == nil {
			break
		}

		return e.complexity.AccountClubSupporterSubscriptionBillingError.CcbillDeclineError(childComplexity), true

	case "AccountClubSupporterSubscriptionBillingError.ccbillErrorCode":
		if e.complexity.AccountClubSupporterSubscriptionBillingError.CcbillErrorCode == nil {
			break
		}

		return e.complexity.AccountClubSupporterSubscriptionBillingError.CcbillErrorCode(childComplexity), true

	case "AccountClubSupporterSubscriptionBillingError.ccbillErrorText":
		if e.complexity.AccountClubSupporterSubscriptionBillingError.CcbillErrorText == nil {
			break
		}

		return e.complexity.AccountClubSupporterSubscriptionBillingError.CcbillErrorText(childComplexity), true

	case "AccountClubSupporterSubscriptionBillingError.failedAt":
		if e.complexity.AccountClubSupporterSubscriptionBillingError.FailedAt == nil {
			break
		}

		return e.complexity.AccountClubSupporterSubscriptionBillingError.FailedAt(childComplexity), true

	case "AccountClubSupporterSubscriptionBillingError.nextRetryDate":
		if e.complexity.AccountClubSupporterSubscriptionBillingError.NextRetryDate == nil {
			break
		}

		return e.complexity.AccountClubSupporterSubscriptionBillingError.NextRetryDate(childComplexity), true

	case "AccountClubSupporterSubscriptionConnection.edges":
		if e.complexity.AccountClubSupporterSubscriptionConnection.Edges == nil {
			break
		}

		return e.complexity.AccountClubSupporterSubscriptionConnection.Edges(childComplexity), true

	case "AccountClubSupporterSubscriptionConnection.pageInfo":
		if e.complexity.AccountClubSupporterSubscriptionConnection.PageInfo == nil {
			break
		}

		return e.complexity.AccountClubSupporterSubscriptionConnection.PageInfo(childComplexity), true

	case "AccountClubSupporterSubscriptionEdge.cursor":
		if e.complexity.AccountClubSupporterSubscriptionEdge.Cursor == nil {
			break
		}

		return e.complexity.AccountClubSupporterSubscriptionEdge.Cursor(childComplexity), true

	case "AccountClubSupporterSubscriptionEdge.node":
		if e.complexity.AccountClubSupporterSubscriptionEdge.Node == nil {
			break
		}

		return e.complexity.AccountClubSupporterSubscriptionEdge.Node(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.account":
		if e.complexity.AccountExpiredClubSupporterSubscription.Account == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.Account(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.billingAmount":
		if e.complexity.AccountExpiredClubSupporterSubscription.BillingAmount == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.BillingAmount(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.billingCurrency":
		if e.complexity.AccountExpiredClubSupporterSubscription.BillingCurrency == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.BillingCurrency(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.billingError":
		if e.complexity.AccountExpiredClubSupporterSubscription.BillingError == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.BillingError(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.cancellationReason":
		if e.complexity.AccountExpiredClubSupporterSubscription.CancellationReason == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.CancellationReason(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.ccbillSubscription":
		if e.complexity.AccountExpiredClubSupporterSubscription.CcbillSubscription == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.CcbillSubscription(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.club":
		if e.complexity.AccountExpiredClubSupporterSubscription.Club == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.Club(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.expiredAt":
		if e.complexity.AccountExpiredClubSupporterSubscription.ExpiredAt == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.ExpiredAt(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.id":
		if e.complexity.AccountExpiredClubSupporterSubscription.ID == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.ID(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.reference":
		if e.complexity.AccountExpiredClubSupporterSubscription.Reference == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.Reference(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.supporterSince":
		if e.complexity.AccountExpiredClubSupporterSubscription.SupporterSince == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.SupporterSince(childComplexity), true

	case "AccountExpiredClubSupporterSubscription.transactions":
		if e.complexity.AccountExpiredClubSupporterSubscription.Transactions == nil {
			break
		}

		args, err := ec.field_AccountExpiredClubSupporterSubscription_transactions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.Transactions(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["type"].(*types.AccountTransactionType), args["from"].(*time.Time), args["to"].(*time.Time)), true

	case "AccountExpiredClubSupporterSubscription.updatedAt":
		if e.complexity.AccountExpiredClubSupporterSubscription.UpdatedAt == nil {
			break
		}

		return e.complexity.AccountExpiredClubSupporterSubscription.UpdatedAt(childComplexity), true

	case "AccountSavedPaymentMethod.account":
		if e.complexity.AccountSavedPaymentMethod.Account == nil {
			break
		}

		return e.complexity.AccountSavedPaymentMethod.Account(childComplexity), true

	case "AccountSavedPaymentMethod.ccbillSubscription":
		if e.complexity.AccountSavedPaymentMethod.CcbillSubscription == nil {
			break
		}

		return e.complexity.AccountSavedPaymentMethod.CcbillSubscription(childComplexity), true

	case "AccountSavedPaymentMethod.id":
		if e.complexity.AccountSavedPaymentMethod.ID == nil {
			break
		}

		return e.complexity.AccountSavedPaymentMethod.ID(childComplexity), true

	case "AccountSavedPaymentMethod.paymentMethod":
		if e.complexity.AccountSavedPaymentMethod.PaymentMethod == nil {
			break
		}

		return e.complexity.AccountSavedPaymentMethod.PaymentMethod(childComplexity), true

	case "AccountSavedPaymentMethod.updatedAt":
		if e.complexity.AccountSavedPaymentMethod.UpdatedAt == nil {
			break
		}

		return e.complexity.AccountSavedPaymentMethod.UpdatedAt(childComplexity), true

	case "AccountSavedPaymentMethodConnection.edges":
		if e.complexity.AccountSavedPaymentMethodConnection.Edges == nil {
			break
		}

		return e.complexity.AccountSavedPaymentMethodConnection.Edges(childComplexity), true

	case "AccountSavedPaymentMethodConnection.pageInfo":
		if e.complexity.AccountSavedPaymentMethodConnection.PageInfo == nil {
			break
		}

		return e.complexity.AccountSavedPaymentMethodConnection.PageInfo(childComplexity), true

	case "AccountSavedPaymentMethodEdge.cursor":
		if e.complexity.AccountSavedPaymentMethodEdge.Cursor == nil {
			break
		}

		return e.complexity.AccountSavedPaymentMethodEdge.Cursor(childComplexity), true

	case "AccountSavedPaymentMethodEdge.node":
		if e.complexity.AccountSavedPaymentMethodEdge.Node == nil {
			break
		}

		return e.complexity.AccountSavedPaymentMethodEdge.Node(childComplexity), true

	case "AccountTransaction.amount":
		if e.complexity.AccountTransaction.Amount == nil {
			break
		}

		return e.complexity.AccountTransaction.Amount(childComplexity), true

	case "AccountTransaction.billedAtDate":
		if e.complexity.AccountTransaction.BilledAtDate == nil {
			break
		}

		return e.complexity.AccountTransaction.BilledAtDate(childComplexity), true

	case "AccountTransaction.ccbillTransaction":
		if e.complexity.AccountTransaction.CcbillTransaction == nil {
			break
		}

		return e.complexity.AccountTransaction.CcbillTransaction(childComplexity), true

	case "AccountTransaction.clubSupporterSubscription":
		if e.complexity.AccountTransaction.ClubSupporterSubscription == nil {
			break
		}

		return e.complexity.AccountTransaction.ClubSupporterSubscription(childComplexity), true

	case "AccountTransaction.createdAt":
		if e.complexity.AccountTransaction.CreatedAt == nil {
			break
		}

		return e.complexity.AccountTransaction.CreatedAt(childComplexity), true

	case "AccountTransaction.currency":
		if e.complexity.AccountTransaction.Currency == nil {
			break
		}

		return e.complexity.AccountTransaction.Currency(childComplexity), true

	case "AccountTransaction.events":
		if e.complexity.AccountTransaction.Events == nil {
			break
		}

		return e.complexity.AccountTransaction.Events(childComplexity), true

	case "AccountTransaction.id":
		if e.complexity.AccountTransaction.ID == nil {
			break
		}

		return e.complexity.AccountTransaction.ID(childComplexity), true

	case "AccountTransaction.nextBillingDate":
		if e.complexity.AccountTransaction.NextBillingDate == nil {
			break
		}

		return e.complexity.AccountTransaction.NextBillingDate(childComplexity), true

	case "AccountTransaction.paymentMethod":
		if e.complexity.AccountTransaction.PaymentMethod == nil {
			break
		}

		return e.complexity.AccountTransaction.PaymentMethod(childComplexity), true

	case "AccountTransaction.reference":
		if e.complexity.AccountTransaction.Reference == nil {
			break
		}

		return e.complexity.AccountTransaction.Reference(childComplexity), true

	case "AccountTransaction.totalRefunded":
		if e.complexity.AccountTransaction.TotalRefunded == nil {
			break
		}

		return e.complexity.AccountTransaction.TotalRefunded(childComplexity), true

	case "AccountTransaction.type":
		if e.complexity.AccountTransaction.Type == nil {
			break
		}

		return e.complexity.AccountTransaction.Type(childComplexity), true

	case "AccountTransactionConnection.edges":
		if e.complexity.AccountTransactionConnection.Edges == nil {
			break
		}

		return e.complexity.AccountTransactionConnection.Edges(childComplexity), true

	case "AccountTransactionConnection.pageInfo":
		if e.complexity.AccountTransactionConnection.PageInfo == nil {
			break
		}

		return e.complexity.AccountTransactionConnection.PageInfo(childComplexity), true

	case "AccountTransactionEdge.cursor":
		if e.complexity.AccountTransactionEdge.Cursor == nil {
			break
		}

		return e.complexity.AccountTransactionEdge.Cursor(childComplexity), true

	case "AccountTransactionEdge.node":
		if e.complexity.AccountTransactionEdge.Node == nil {
			break
		}

		return e.complexity.AccountTransactionEdge.Node(childComplexity), true

	case "AccountTransactionEvent.amount":
		if e.complexity.AccountTransactionEvent.Amount == nil {
			break
		}

		return e.complexity.AccountTransactionEvent.Amount(childComplexity), true

	case "AccountTransactionEvent.createdAt":
		if e.complexity.AccountTransactionEvent.CreatedAt == nil {
			break
		}

		return e.complexity.AccountTransactionEvent.CreatedAt(childComplexity), true

	case "AccountTransactionEvent.currency":
		if e.complexity.AccountTransactionEvent.Currency == nil {
			break
		}

		return e.complexity.AccountTransactionEvent.Currency(childComplexity), true

	case "AccountTransactionEvent.id":
		if e.complexity.AccountTransactionEvent.ID == nil {
			break
		}

		return e.complexity.AccountTransactionEvent.ID(childComplexity), true

	case "AccountTransactionEvent.reason":
		if e.complexity.AccountTransactionEvent.Reason == nil {
			break
		}

		return e.complexity.AccountTransactionEvent.Reason(childComplexity), true

	case "AspectRatio.height":
		if e.complexity.AspectRatio.Height == nil {
			break
		}

		return e.complexity.AspectRatio.Height(childComplexity), true

	case "AspectRatio.width":
		if e.complexity.AspectRatio.Width == nil {
			break
		}

		return e.complexity.AspectRatio.Width(childComplexity), true

	case "BecomeClubSupporterWithAccountSavedPaymentMethodPayload.ccbillTransactionToken":
		if e.complexity.BecomeClubSupporterWithAccountSavedPaymentMethodPayload.CcbillTransactionToken == nil {
			break
		}

		return e.complexity.BecomeClubSupporterWithAccountSavedPaymentMethodPayload.CcbillTransactionToken(childComplexity), true

	case "BillingAddress.addressLine1":
		if e.complexity.BillingAddress.AddressLine1 == nil {
			break
		}

		return e.complexity.BillingAddress.AddressLine1(childComplexity), true

	case "BillingAddress.city":
		if e.complexity.BillingAddress.City == nil {
			break
		}

		return e.complexity.BillingAddress.City(childComplexity), true

	case "BillingAddress.country":
		if e.complexity.BillingAddress.Country == nil {
			break
		}

		return e.complexity.BillingAddress.Country(childComplexity), true

	case "BillingAddress.postalCode":
		if e.complexity.BillingAddress.PostalCode == nil {
			break
		}

		return e.complexity.BillingAddress.PostalCode(childComplexity), true

	case "BillingAddress.state":
		if e.complexity.BillingAddress.State == nil {
			break
		}

		return e.complexity.BillingAddress.State(childComplexity), true

	case "BillingContact.email":
		if e.complexity.BillingContact.Email == nil {
			break
		}

		return e.complexity.BillingContact.Email(childComplexity), true

	case "BillingContact.firstName":
		if e.complexity.BillingContact.FirstName == nil {
			break
		}

		return e.complexity.BillingContact.FirstName(childComplexity), true

	case "BillingContact.lastName":
		if e.complexity.BillingContact.LastName == nil {
			break
		}

		return e.complexity.BillingContact.LastName(childComplexity), true

	case "BillingContact.phoneNumber":
		if e.complexity.BillingContact.PhoneNumber == nil {
			break
		}

		return e.complexity.BillingContact.PhoneNumber(childComplexity), true

	case "CCBillSubscription.ccbillSubscriptionId":
		if e.complexity.CCBillSubscription.CcbillSubscriptionID == nil {
			break
		}

		return e.complexity.CCBillSubscription.CcbillSubscriptionID(childComplexity), true

	case "CCBillSubscription.email":
		if e.complexity.CCBillSubscription.Email == nil {
			break
		}

		return e.complexity.CCBillSubscription.Email(childComplexity), true

	case "CCBillSubscription.link":
		if e.complexity.CCBillSubscription.Link == nil {
			break
		}

		return e.complexity.CCBillSubscription.Link(childComplexity), true

	case "CCBillSubscription.paymentMethod":
		if e.complexity.CCBillSubscription.PaymentMethod == nil {
			break
		}

		return e.complexity.CCBillSubscription.PaymentMethod(childComplexity), true

	case "CCBillSubscriptionDetails.account":
		if e.complexity.CCBillSubscriptionDetails.Account == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.Account(childComplexity), true

	case "CCBillSubscriptionDetails.accountingCurrency":
		if e.complexity.CCBillSubscriptionDetails.AccountingCurrency == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.AccountingCurrency(childComplexity), true

	case "CCBillSubscriptionDetails.accountingInitialPrice":
		if e.complexity.CCBillSubscriptionDetails.AccountingInitialPrice == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.AccountingInitialPrice(childComplexity), true

	case "CCBillSubscriptionDetails.accountingRecurringPrice":
		if e.complexity.CCBillSubscriptionDetails.AccountingRecurringPrice == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.AccountingRecurringPrice(childComplexity), true

	case "CCBillSubscriptionDetails.billedCurrency":
		if e.complexity.CCBillSubscriptionDetails.BilledCurrency == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.BilledCurrency(childComplexity), true

	case "CCBillSubscriptionDetails.billedInitialPrice":
		if e.complexity.CCBillSubscriptionDetails.BilledInitialPrice == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.BilledInitialPrice(childComplexity), true

	case "CCBillSubscriptionDetails.billedRecurringPrice":
		if e.complexity.CCBillSubscriptionDetails.BilledRecurringPrice == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.BilledRecurringPrice(childComplexity), true

	case "CCBillSubscriptionDetails.cancelDate":
		if e.complexity.CCBillSubscriptionDetails.CancelDate == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.CancelDate(childComplexity), true

	case "CCBillSubscriptionDetails.chargebacksIssued":
		if e.complexity.CCBillSubscriptionDetails.ChargebacksIssued == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.ChargebacksIssued(childComplexity), true

	case "CCBillSubscriptionDetails.club":
		if e.complexity.CCBillSubscriptionDetails.Club == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.Club(childComplexity), true

	case "CCBillSubscriptionDetails.expirationDate":
		if e.complexity.CCBillSubscriptionDetails.ExpirationDate == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.ExpirationDate(childComplexity), true

	case "CCBillSubscriptionDetails.id":
		if e.complexity.CCBillSubscriptionDetails.ID == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.ID(childComplexity), true

	case "CCBillSubscriptionDetails.isDuplicate":
		if e.complexity.CCBillSubscriptionDetails.IsDuplicate == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.IsDuplicate(childComplexity), true

	case "CCBillSubscriptionDetails.isRecurring":
		if e.complexity.CCBillSubscriptionDetails.IsRecurring == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.IsRecurring(childComplexity), true

	case "CCBillSubscriptionDetails.paymentMethod":
		if e.complexity.CCBillSubscriptionDetails.PaymentMethod == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.PaymentMethod(childComplexity), true

	case "CCBillSubscriptionDetails.refundsIssued":
		if e.complexity.CCBillSubscriptionDetails.RefundsIssued == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.RefundsIssued(childComplexity), true

	case "CCBillSubscriptionDetails.signupDate":
		if e.complexity.CCBillSubscriptionDetails.SignupDate == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.SignupDate(childComplexity), true

	case "CCBillSubscriptionDetails.status":
		if e.complexity.CCBillSubscriptionDetails.Status == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.Status(childComplexity), true

	case "CCBillSubscriptionDetails.subscriptionCurrency":
		if e.complexity.CCBillSubscriptionDetails.SubscriptionCurrency == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.SubscriptionCurrency(childComplexity), true

	case "CCBillSubscriptionDetails.subscriptionInitialPrice":
		if e.complexity.CCBillSubscriptionDetails.SubscriptionInitialPrice == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.SubscriptionInitialPrice(childComplexity), true

	case "CCBillSubscriptionDetails.subscriptionRecurringPrice":
		if e.complexity.CCBillSubscriptionDetails.SubscriptionRecurringPrice == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.SubscriptionRecurringPrice(childComplexity), true

	case "CCBillSubscriptionDetails.timesRebilled":
		if e.complexity.CCBillSubscriptionDetails.TimesRebilled == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.TimesRebilled(childComplexity), true

	case "CCBillSubscriptionDetails.updatedAt":
		if e.complexity.CCBillSubscriptionDetails.UpdatedAt == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.UpdatedAt(childComplexity), true

	case "CCBillSubscriptionDetails.voidsIssued":
		if e.complexity.CCBillSubscriptionDetails.VoidsIssued == nil {
			break
		}

		return e.complexity.CCBillSubscriptionDetails.VoidsIssued(childComplexity), true

	case "CCBillTransaction.ccbillSubscriptionId":
		if e.complexity.CCBillTransaction.CcbillSubscriptionID == nil {
			break
		}

		return e.complexity.CCBillTransaction.CcbillSubscriptionID(childComplexity), true

	case "CCBillTransaction.ccbillTransactionId":
		if e.complexity.CCBillTransaction.CcbillTransactionID == nil {
			break
		}

		return e.complexity.CCBillTransaction.CcbillTransactionID(childComplexity), true

	case "CCBillTransactionDetails.approved":
		if e.complexity.CCBillTransactionDetails.Approved == nil {
			break
		}

		return e.complexity.CCBillTransactionDetails.Approved(childComplexity), true

	case "CCBillTransactionDetails.declineCode":
		if e.complexity.CCBillTransactionDetails.DeclineCode == nil {
			break
		}

		return e.complexity.CCBillTransactionDetails.DeclineCode(childComplexity), true

	case "CCBillTransactionDetails.declineError":
		if e.complexity.CCBillTransactionDetails.DeclineError == nil {
			break
		}

		return e.complexity.CCBillTransactionDetails.DeclineError(childComplexity), true

	case "CCBillTransactionDetails.declineText":
		if e.complexity.CCBillTransactionDetails.DeclineText == nil {
			break
		}

		return e.complexity.CCBillTransactionDetails.DeclineText(childComplexity), true

	case "CCBillTransactionDetails.id":
		if e.complexity.CCBillTransactionDetails.ID == nil {
			break
		}

		return e.complexity.CCBillTransactionDetails.ID(childComplexity), true

	case "CCBillTransactionDetails.linkedAccountClubSupporterSubscription":
		if e.complexity.CCBillTransactionDetails.LinkedAccountClubSupporterSubscription == nil {
			break
		}

		return e.complexity.CCBillTransactionDetails.LinkedAccountClubSupporterSubscription(childComplexity), true

	case "CancelAccountClubSupporterSubscriptionPayload.clubSupporterSubscription":
		if e.complexity.CancelAccountClubSupporterSubscriptionPayload.ClubSupporterSubscription == nil {
			break
		}

		return e.complexity.CancelAccountClubSupporterSubscriptionPayload.ClubSupporterSubscription(childComplexity), true

	case "CancelActiveSupporterSubscriptionsForClubPayload.club":
		if e.complexity.CancelActiveSupporterSubscriptionsForClubPayload.Club == nil {
			break
		}

		return e.complexity.CancelActiveSupporterSubscriptionsForClubPayload.Club(childComplexity), true

	case "CancellationReason.deprecated":
		if e.complexity.CancellationReason.Deprecated == nil {
			break
		}

		return e.complexity.CancellationReason.Deprecated(childComplexity), true

	case "CancellationReason.id":
		if e.complexity.CancellationReason.ID == nil {
			break
		}

		return e.complexity.CancellationReason.ID(childComplexity), true

	case "CancellationReason.reference":
		if e.complexity.CancellationReason.Reference == nil {
			break
		}

		return e.complexity.CancellationReason.Reference(childComplexity), true

	case "CancellationReason.title":
		if e.complexity.CancellationReason.Title == nil {
			break
		}

		args, err := ec.field_CancellationReason_title_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CancellationReason.Title(childComplexity, args["locale"].(*string)), true

	case "CancellationReason.titleTranslations":
		if e.complexity.CancellationReason.TitleTranslations == nil {
			break
		}

		return e.complexity.CancellationReason.TitleTranslations(childComplexity), true

	case "CancellationReasonConnection.edges":
		if e.complexity.CancellationReasonConnection.Edges == nil {
			break
		}

		return e.complexity.CancellationReasonConnection.Edges(childComplexity), true

	case "CancellationReasonConnection.pageInfo":
		if e.complexity.CancellationReasonConnection.PageInfo == nil {
			break
		}

		return e.complexity.CancellationReasonConnection.PageInfo(childComplexity), true

	case "CancellationReasonEdge.cursor":
		if e.complexity.CancellationReasonEdge.Cursor == nil {
			break
		}

		return e.complexity.CancellationReasonEdge.Cursor(childComplexity), true

	case "CancellationReasonEdge.node":
		if e.complexity.CancellationReasonEdge.Node == nil {
			break
		}

		return e.complexity.CancellationReasonEdge.Node(childComplexity), true

	case "Card.expiration":
		if e.complexity.Card.Expiration == nil {
			break
		}

		return e.complexity.Card.Expiration(childComplexity), true

	case "Card.last4":
		if e.complexity.Card.Last4 == nil {
			break
		}

		return e.complexity.Card.Last4(childComplexity), true

	case "Card.type":
		if e.complexity.Card.Type == nil {
			break
		}

		return e.complexity.Card.Type(childComplexity), true

	case "Club.id":
		if e.complexity.Club.ID == nil {
			break
		}

		return e.complexity.Club.ID(childComplexity), true

	case "Club.supporterSubscriptionPrice":
		if e.complexity.Club.SupporterSubscriptionPrice == nil {
			break
		}

		return e.complexity.Club.SupporterSubscriptionPrice(childComplexity), true

	case "Club.supporterSubscriptions":
		if e.complexity.Club.SupporterSubscriptions == nil {
			break
		}

		args, err := ec.field_Club_supporterSubscriptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Club.SupporterSubscriptions(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["status"].([]types.AccountClubSupporterSubscriptionStatus)), true

	case "Club.transactionMetrics":
		if e.complexity.Club.TransactionMetrics == nil {
			break
		}

		args, err := ec.field_Club_transactionMetrics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Club.TransactionMetrics(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "ClubMember.clubSupporterSubscription":
		if e.complexity.ClubMember.ClubSupporterSubscription == nil {
			break
		}

		return e.complexity.ClubMember.ClubSupporterSubscription(childComplexity), true

	case "ClubMember.id":
		if e.complexity.ClubMember.ID == nil {
			break
		}

		return e.complexity.ClubMember.ID(childComplexity), true

	case "ClubTransactionMetric.chargebacksAmount":
		if e.complexity.ClubTransactionMetric.ChargebacksAmount == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.ChargebacksAmount(childComplexity), true

	case "ClubTransactionMetric.chargebacksAmountRatio":
		if e.complexity.ClubTransactionMetric.ChargebacksAmountRatio == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.ChargebacksAmountRatio(childComplexity), true

	case "ClubTransactionMetric.chargebacksCount":
		if e.complexity.ClubTransactionMetric.ChargebacksCount == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.ChargebacksCount(childComplexity), true

	case "ClubTransactionMetric.chargebacksCountRatio":
		if e.complexity.ClubTransactionMetric.ChargebacksCountRatio == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.ChargebacksCountRatio(childComplexity), true

	case "ClubTransactionMetric.currency":
		if e.complexity.ClubTransactionMetric.Currency == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.Currency(childComplexity), true

	case "ClubTransactionMetric.month":
		if e.complexity.ClubTransactionMetric.Month == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.Month(childComplexity), true

	case "ClubTransactionMetric.refundsAmount":
		if e.complexity.ClubTransactionMetric.RefundsAmount == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.RefundsAmount(childComplexity), true

	case "ClubTransactionMetric.refundsAmountRatio":
		if e.complexity.ClubTransactionMetric.RefundsAmountRatio == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.RefundsAmountRatio(childComplexity), true

	case "ClubTransactionMetric.refundsCount":
		if e.complexity.ClubTransactionMetric.RefundsCount == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.RefundsCount(childComplexity), true

	case "ClubTransactionMetric.refundsCountRatio":
		if e.complexity.ClubTransactionMetric.RefundsCountRatio == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.RefundsCountRatio(childComplexity), true

	case "ClubTransactionMetric.totalTransactionsAmount":
		if e.complexity.ClubTransactionMetric.TotalTransactionsAmount == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.TotalTransactionsAmount(childComplexity), true

	case "ClubTransactionMetric.totalTransactionsCount":
		if e.complexity.ClubTransactionMetric.TotalTransactionsCount == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.TotalTransactionsCount(childComplexity), true

	case "ClubTransactionMetric.year":
		if e.complexity.ClubTransactionMetric.Year == nil {
			break
		}

		return e.complexity.ClubTransactionMetric.Year(childComplexity), true

	case "ClubTransactionMetricConnection.edges":
		if e.complexity.ClubTransactionMetricConnection.Edges == nil {
			break
		}

		return e.complexity.ClubTransactionMetricConnection.Edges(childComplexity), true

	case "ClubTransactionMetricConnection.pageInfo":
		if e.complexity.ClubTransactionMetricConnection.PageInfo == nil {
			break
		}

		return e.complexity.ClubTransactionMetricConnection.PageInfo(childComplexity), true

	case "ClubTransactionMetricEdge.cursor":
		if e.complexity.ClubTransactionMetricEdge.Cursor == nil {
			break
		}

		return e.complexity.ClubTransactionMetricEdge.Cursor(childComplexity), true

	case "ClubTransactionMetricEdge.node":
		if e.complexity.ClubTransactionMetricEdge.Node == nil {
			break
		}

		return e.complexity.ClubTransactionMetricEdge.Node(childComplexity), true

	case "ColorPalette.blue":
		if e.complexity.ColorPalette.Blue == nil {
			break
		}

		return e.complexity.ColorPalette.Blue(childComplexity), true

	case "ColorPalette.green":
		if e.complexity.ColorPalette.Green == nil {
			break
		}

		return e.complexity.ColorPalette.Green(childComplexity), true

	case "ColorPalette.percent":
		if e.complexity.ColorPalette.Percent == nil {
			break
		}

		return e.complexity.ColorPalette.Percent(childComplexity), true

	case "ColorPalette.red":
		if e.complexity.ColorPalette.Red == nil {
			break
		}

		return e.complexity.ColorPalette.Red(childComplexity), true

	case "CreateCancellationReasonPayload.cancellationReason":
		if e.complexity.CreateCancellationReasonPayload.CancellationReason == nil {
			break
		}

		return e.complexity.CreateCancellationReasonPayload.CancellationReason(childComplexity), true

	case "DeleteAccountSavedPaymentMethodPayload.deletedAccountSavedPaymentMethodId":
		if e.complexity.DeleteAccountSavedPaymentMethodPayload.DeletedAccountSavedPaymentMethodID == nil {
			break
		}

		return e.complexity.DeleteAccountSavedPaymentMethodPayload.DeletedAccountSavedPaymentMethodID(childComplexity), true

	case "Entity.findAccountActiveClubSupporterSubscriptionByID":
		if e.complexity.Entity.FindAccountActiveClubSupporterSubscriptionByID == nil {
			break
		}

		args, err := ec.field_Entity_findAccountActiveClubSupporterSubscriptionByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindAccountActiveClubSupporterSubscriptionByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findAccountByID":
		if e.complexity.Entity.FindAccountByID == nil {
			break
		}

		args, err := ec.field_Entity_findAccountByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindAccountByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findAccountCancelledClubSupporterSubscriptionByID":
		if e.complexity.Entity.FindAccountCancelledClubSupporterSubscriptionByID == nil {
			break
		}

		args, err := ec.field_Entity_findAccountCancelledClubSupporterSubscriptionByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindAccountCancelledClubSupporterSubscriptionByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findAccountExpiredClubSupporterSubscriptionByID":
		if e.complexity.Entity.FindAccountExpiredClubSupporterSubscriptionByID == nil {
			break
		}

		args, err := ec.field_Entity_findAccountExpiredClubSupporterSubscriptionByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindAccountExpiredClubSupporterSubscriptionByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findAccountTransactionByID":
		if e.complexity.Entity.FindAccountTransactionByID == nil {
			break
		}

		args, err := ec.field_Entity_findAccountTransactionByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindAccountTransactionByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findCancellationReasonByID":
		if e.complexity.Entity.FindCancellationReasonByID == nil {
			break
		}

		args, err := ec.field_Entity_findCancellationReasonByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindCancellationReasonByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findClubByID":
		if e.complexity.Entity.FindClubByID == nil {
			break
		}

		args, err := ec.field_Entity_findClubByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindClubByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findClubMemberByID":
		if e.complexity.Entity.FindClubMemberByID == nil {
			break
		}

		args, err := ec.field_Entity_findClubMemberByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindClubMemberByID(childComplexity, args["id"].(relay.ID)), true

	case "ExpiredAccountClubSupporterSubscription.account":
		if e.complexity.ExpiredAccountClubSupporterSubscription.Account == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscription.Account(childComplexity), true

	case "ExpiredAccountClubSupporterSubscription.cancelledAt":
		if e.complexity.ExpiredAccountClubSupporterSubscription.CancelledAt == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscription.CancelledAt(childComplexity), true

	case "ExpiredAccountClubSupporterSubscription.club":
		if e.complexity.ExpiredAccountClubSupporterSubscription.Club == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscription.Club(childComplexity), true

	case "ExpiredAccountClubSupporterSubscription.expiredAt":
		if e.complexity.ExpiredAccountClubSupporterSubscription.ExpiredAt == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscription.ExpiredAt(childComplexity), true

	case "ExpiredAccountClubSupporterSubscription.id":
		if e.complexity.ExpiredAccountClubSupporterSubscription.ID == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscription.ID(childComplexity), true

	case "ExpiredAccountClubSupporterSubscription.supporterSince":
		if e.complexity.ExpiredAccountClubSupporterSubscription.SupporterSince == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscription.SupporterSince(childComplexity), true

	case "ExpiredAccountClubSupporterSubscriptionConnection.edges":
		if e.complexity.ExpiredAccountClubSupporterSubscriptionConnection.Edges == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscriptionConnection.Edges(childComplexity), true

	case "ExpiredAccountClubSupporterSubscriptionConnection.pageInfo":
		if e.complexity.ExpiredAccountClubSupporterSubscriptionConnection.PageInfo == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscriptionConnection.PageInfo(childComplexity), true

	case "ExpiredAccountClubSupporterSubscriptionEdge.cursor":
		if e.complexity.ExpiredAccountClubSupporterSubscriptionEdge.Cursor == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscriptionEdge.Cursor(childComplexity), true

	case "ExpiredAccountClubSupporterSubscriptionEdge.node":
		if e.complexity.ExpiredAccountClubSupporterSubscriptionEdge.Node == nil {
			break
		}

		return e.complexity.ExpiredAccountClubSupporterSubscriptionEdge.Node(childComplexity), true

	case "ExtendAccountClubSupporterSubscriptionPayload.clubSupporterSubscription":
		if e.complexity.ExtendAccountClubSupporterSubscriptionPayload.ClubSupporterSubscription == nil {
			break
		}

		return e.complexity.ExtendAccountClubSupporterSubscriptionPayload.ClubSupporterSubscription(childComplexity), true

	case "GenerateCCBillClubSupporterPaymentLinkPayload.paymentLink":
		if e.complexity.GenerateCCBillClubSupporterPaymentLinkPayload.PaymentLink == nil {
			break
		}

		return e.complexity.GenerateCCBillClubSupporterPaymentLinkPayload.PaymentLink(childComplexity), true

	case "GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload.link":
		if e.complexity.GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload.Link == nil {
			break
		}

		return e.complexity.GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload.Link(childComplexity), true

	case "GenerateClubSupporterRefundReceiptFromAccountTransactionPayload.link":
		if e.complexity.GenerateClubSupporterRefundReceiptFromAccountTransactionPayload.Link == nil {
			break
		}

		return e.complexity.GenerateClubSupporterRefundReceiptFromAccountTransactionPayload.Link(childComplexity), true

	case "GenerateRefundAmountForAccountTransactionPayload.refundAmount":
		if e.complexity.GenerateRefundAmountForAccountTransactionPayload.RefundAmount == nil {
			break
		}

		return e.complexity.GenerateRefundAmountForAccountTransactionPayload.RefundAmount(childComplexity), true

	case "HLSVideoContainer.url":
		if e.complexity.HLSVideoContainer.URL == nil {
			break
		}

		return e.complexity.HLSVideoContainer.URL(childComplexity), true

	case "ImageMedia.colorPalettes":
		if e.complexity.ImageMedia.ColorPalettes == nil {
			break
		}

		return e.complexity.ImageMedia.ColorPalettes(childComplexity), true

	case "ImageMedia.id":
		if e.complexity.ImageMedia.ID == nil {
			break
		}

		return e.complexity.ImageMedia.ID(childComplexity), true

	case "ImageMedia.original":
		if e.complexity.ImageMedia.Original == nil {
			break
		}

		return e.complexity.ImageMedia.Original(childComplexity), true

	case "ImageMedia.variants":
		if e.complexity.ImageMedia.Variants == nil {
			break
		}

		return e.complexity.ImageMedia.Variants(childComplexity), true

	case "ImageMediaAccess.height":
		if e.complexity.ImageMediaAccess.Height == nil {
			break
		}

		return e.complexity.ImageMediaAccess.Height(childComplexity), true

	case "ImageMediaAccess.url":
		if e.complexity.ImageMediaAccess.URL == nil {
			break
		}

		return e.complexity.ImageMediaAccess.URL(childComplexity), true

	case "ImageMediaAccess.width":
		if e.complexity.ImageMediaAccess.Width == nil {
			break
		}

		return e.complexity.ImageMediaAccess.Width(childComplexity), true

	case "ImageMediaVariants.banner":
		if e.complexity.ImageMediaVariants.Banner == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Banner(childComplexity), true

	case "ImageMediaVariants.hd":
		if e.complexity.ImageMediaVariants.Hd == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Hd(childComplexity), true

	case "ImageMediaVariants.icon":
		if e.complexity.ImageMediaVariants.Icon == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Icon(childComplexity), true

	case "ImageMediaVariants.large":
		if e.complexity.ImageMediaVariants.Large == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Large(childComplexity), true

	case "ImageMediaVariants.medium":
		if e.complexity.ImageMediaVariants.Medium == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Medium(childComplexity), true

	case "ImageMediaVariants.mini":
		if e.complexity.ImageMediaVariants.Mini == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Mini(childComplexity), true

	case "ImageMediaVariants.small":
		if e.complexity.ImageMediaVariants.Small == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Small(childComplexity), true

	case "ImageMediaVariants.thumbnail":
		if e.complexity.ImageMediaVariants.Thumbnail == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Thumbnail(childComplexity), true

	case "ImageMediaVariants.thumbnailHd":
		if e.complexity.ImageMediaVariants.ThumbnailHd == nil {
			break
		}

		return e.complexity.ImageMediaVariants.ThumbnailHd(childComplexity), true

	case "Language.locale":
		if e.complexity.Language.Locale == nil {
			break
		}

		return e.complexity.Language.Locale(childComplexity), true

	case "Language.name":
		if e.complexity.Language.Name == nil {
			break
		}

		return e.complexity.Language.Name(childComplexity), true

	case "LocalizedPricingPoint.localizedPrice":
		if e.complexity.LocalizedPricingPoint.LocalizedPrice == nil {
			break
		}

		return e.complexity.LocalizedPricingPoint.LocalizedPrice(childComplexity), true

	case "LocalizedPricingPoint.prices":
		if e.complexity.LocalizedPricingPoint.Prices == nil {
			break
		}

		return e.complexity.LocalizedPricingPoint.Prices(childComplexity), true

	case "MP4VideoContainer.bitrate":
		if e.complexity.MP4VideoContainer.Bitrate == nil {
			break
		}

		return e.complexity.MP4VideoContainer.Bitrate(childComplexity), true

	case "MP4VideoContainer.height":
		if e.complexity.MP4VideoContainer.Height == nil {
			break
		}

		return e.complexity.MP4VideoContainer.Height(childComplexity), true

	case "MP4VideoContainer.url":
		if e.complexity.MP4VideoContainer.URL == nil {
			break
		}

		return e.complexity.MP4VideoContainer.URL(childComplexity), true

	case "MP4VideoContainer.width":
		if e.complexity.MP4VideoContainer.Width == nil {
			break
		}

		return e.complexity.MP4VideoContainer.Width(childComplexity), true

	case "MediaProgress.id":
		if e.complexity.MediaProgress.ID == nil {
			break
		}

		return e.complexity.MediaProgress.ID(childComplexity), true

	case "Mutation.becomeClubSupporterWithAccountSavedPaymentMethod":
		if e.complexity.Mutation.BecomeClubSupporterWithAccountSavedPaymentMethod == nil {
			break
		}

		args, err := ec.field_Mutation_becomeClubSupporterWithAccountSavedPaymentMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BecomeClubSupporterWithAccountSavedPaymentMethod(childComplexity, args["input"].(types.BecomeClubSupporterWithAccountSavedPaymentMethodInput)), true

	case "Mutation.cancelAccountClubSupporterSubscription":
		if e.complexity.Mutation.CancelAccountClubSupporterSubscription == nil {
			break
		}

		args, err := ec.field_Mutation_cancelAccountClubSupporterSubscription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelAccountClubSupporterSubscription(childComplexity, args["input"].(types.CancelAccountClubSupporterSubscriptionInput)), true

	case "Mutation.cancelActiveSupporterSubscriptionsForClub":
		if e.complexity.Mutation.CancelActiveSupporterSubscriptionsForClub == nil {
			break
		}

		args, err := ec.field_Mutation_cancelActiveSupporterSubscriptionsForClub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelActiveSupporterSubscriptionsForClub(childComplexity, args["input"].(types.CancelActiveSupporterSubscriptionsForClubInput)), true

	case "Mutation.createCancellationReason":
		if e.complexity.Mutation.CreateCancellationReason == nil {
			break
		}

		args, err := ec.field_Mutation_createCancellationReason_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCancellationReason(childComplexity, args["input"].(types.CreateCancellationReasonInput)), true

	case "Mutation.deleteAccountSavedPaymentMethod":
		if e.complexity.Mutation.DeleteAccountSavedPaymentMethod == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAccountSavedPaymentMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAccountSavedPaymentMethod(childComplexity, args["input"].(types.DeleteAccountSavedPaymentMethodInput)), true

	case "Mutation.extendAccountClubSupporterSubscription":
		if e.complexity.Mutation.ExtendAccountClubSupporterSubscription == nil {
			break
		}

		args, err := ec.field_Mutation_extendAccountClubSupporterSubscription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ExtendAccountClubSupporterSubscription(childComplexity, args["input"].(types.ExtendAccountClubSupporterSubscriptionInput)), true

	case "Mutation.generateCCBillClubSupporterPaymentLink":
		if e.complexity.Mutation.GenerateCCBillClubSupporterPaymentLink == nil {
			break
		}

		args, err := ec.field_Mutation_generateCCBillClubSupporterPaymentLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateCCBillClubSupporterPaymentLink(childComplexity, args["input"].(types.GenerateCCBillClubSupporterPaymentLinkInput)), true

	case "Mutation.generateClubSupporterPaymentReceiptFromAccountTransaction":
		if e.complexity.Mutation.GenerateClubSupporterPaymentReceiptFromAccountTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_generateClubSupporterPaymentReceiptFromAccountTransaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateClubSupporterPaymentReceiptFromAccountTransaction(childComplexity, args["input"].(types.GenerateClubSupporterPaymentReceiptFromAccountTransactionInput)), true

	case "Mutation.generateClubSupporterRefundReceiptFromAccountTransaction":
		if e.complexity.Mutation.GenerateClubSupporterRefundReceiptFromAccountTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_generateClubSupporterRefundReceiptFromAccountTransaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateClubSupporterRefundReceiptFromAccountTransaction(childComplexity, args["input"].(types.GenerateClubSupporterRefundReceiptFromAccountTransactionInput)), true

	case "Mutation.generateRefundAmountForAccountTransaction":
		if e.complexity.Mutation.GenerateRefundAmountForAccountTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_generateRefundAmountForAccountTransaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateRefundAmountForAccountTransaction(childComplexity, args["input"].(types.GenerateRefundAmountForAccountTransactionInput)), true

	case "Mutation.refundAccountTransaction":
		if e.complexity.Mutation.RefundAccountTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_refundAccountTransaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefundAccountTransaction(childComplexity, args["input"].(types.RefundAccountTransactionInput)), true

	case "Mutation.updateCancellationReasonDeprecated":
		if e.complexity.Mutation.UpdateCancellationReasonDeprecated == nil {
			break
		}

		args, err := ec.field_Mutation_updateCancellationReasonDeprecated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCancellationReasonDeprecated(childComplexity, args["input"].(types.UpdateCancellationReasonDeprecatedInput)), true

	case "Mutation.updateCancellationReasonTitle":
		if e.complexity.Mutation.UpdateCancellationReasonTitle == nil {
			break
		}

		args, err := ec.field_Mutation_updateCancellationReasonTitle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCancellationReasonTitle(childComplexity, args["input"].(types.UpdateCancellationReasonTitleInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PaymentMethod.billingAddress":
		if e.complexity.PaymentMethod.BillingAddress == nil {
			break
		}

		return e.complexity.PaymentMethod.BillingAddress(childComplexity), true

	case "PaymentMethod.billingContact":
		if e.complexity.PaymentMethod.BillingContact == nil {
			break
		}

		return e.complexity.PaymentMethod.BillingContact(childComplexity), true

	case "PaymentMethod.card":
		if e.complexity.PaymentMethod.Card == nil {
			break
		}

		return e.complexity.PaymentMethod.Card(childComplexity), true

	case "Price.amount":
		if e.complexity.Price.Amount == nil {
			break
		}

		return e.complexity.Price.Amount(childComplexity), true

	case "Price.currency":
		if e.complexity.Price.Currency == nil {
			break
		}

		return e.complexity.Price.Currency(childComplexity), true

	case "Query.accountClubSupporterSubscription":
		if e.complexity.Query.AccountClubSupporterSubscription == nil {
			break
		}

		args, err := ec.field_Query_accountClubSupporterSubscription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountClubSupporterSubscription(childComplexity, args["reference"].(string)), true

	case "Query.accountTransaction":
		if e.complexity.Query.AccountTransaction == nil {
			break
		}

		args, err := ec.field_Query_accountTransaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountTransaction(childComplexity, args["reference"].(string)), true

	case "Query.cancellationReason":
		if e.complexity.Query.CancellationReason == nil {
			break
		}

		args, err := ec.field_Query_cancellationReason_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CancellationReason(childComplexity, args["reference"].(string)), true

	case "Query.cancellationReasons":
		if e.complexity.Query.CancellationReasons == nil {
			break
		}

		args, err := ec.field_Query_cancellationReasons_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CancellationReasons(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["deprecated"].(bool)), true

	case "Query.ccbillSubscriptionDetails":
		if e.complexity.Query.CcbillSubscriptionDetails == nil {
			break
		}

		args, err := ec.field_Query_ccbillSubscriptionDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CcbillSubscriptionDetails(childComplexity, args["ccbillSubscriptionId"].(string)), true

	case "Query.ccbillTransactionDetails":
		if e.complexity.Query.CcbillTransactionDetails == nil {
			break
		}

		args, err := ec.field_Query_ccbillTransactionDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CcbillTransactionDetails(childComplexity, args["token"].(string)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Query._entities":
		if e.complexity.Query.__resolve_entities == nil {
			break
		}

		args, err := ec.field_Query__entities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.__resolve_entities(childComplexity, args["representations"].([]map[string]interface{})), true

	case "RawMedia.failed":
		if e.complexity.RawMedia.Failed == nil {
			break
		}

		return e.complexity.RawMedia.Failed(childComplexity), true

	case "RawMedia.id":
		if e.complexity.RawMedia.ID == nil {
			break
		}

		return e.complexity.RawMedia.ID(childComplexity), true

	case "RawMedia.originalFileName":
		if e.complexity.RawMedia.OriginalFileName == nil {
			break
		}

		return e.complexity.RawMedia.OriginalFileName(childComplexity), true

	case "RawMedia.progress":
		if e.complexity.RawMedia.Progress == nil {
			break
		}

		return e.complexity.RawMedia.Progress(childComplexity), true

	case "RefundAccountTransactionPayload.accountTransaction":
		if e.complexity.RefundAccountTransactionPayload.AccountTransaction == nil {
			break
		}

		return e.complexity.RefundAccountTransactionPayload.AccountTransaction(childComplexity), true

	case "RefundAmount.currency":
		if e.complexity.RefundAmount.Currency == nil {
			break
		}

		return e.complexity.RefundAmount.Currency(childComplexity), true

	case "RefundAmount.maximumAmount":
		if e.complexity.RefundAmount.MaximumAmount == nil {
			break
		}

		return e.complexity.RefundAmount.MaximumAmount(childComplexity), true

	case "RefundAmount.proratedAmount":
		if e.complexity.RefundAmount.ProratedAmount == nil {
			break
		}

		return e.complexity.RefundAmount.ProratedAmount(childComplexity), true

	case "Resource.failed":
		if e.complexity.Resource.Failed == nil {
			break
		}

		return e.complexity.Resource.Failed(childComplexity), true

	case "Resource.height":
		if e.complexity.Resource.Height == nil {
			break
		}

		return e.complexity.Resource.Height(childComplexity), true

	case "Resource.id":
		if e.complexity.Resource.ID == nil {
			break
		}

		return e.complexity.Resource.ID(childComplexity), true

	case "Resource.preview":
		if e.complexity.Resource.Preview == nil {
			break
		}

		return e.complexity.Resource.Preview(childComplexity), true

	case "Resource.processed":
		if e.complexity.Resource.Processed == nil {
			break
		}

		return e.complexity.Resource.Processed(childComplexity), true

	case "Resource.progress":
		if e.complexity.Resource.Progress == nil {
			break
		}

		return e.complexity.Resource.Progress(childComplexity), true

	case "Resource.type":
		if e.complexity.Resource.Type == nil {
			break
		}

		return e.complexity.Resource.Type(childComplexity), true

	case "Resource.urls":
		if e.complexity.Resource.Urls == nil {
			break
		}

		return e.complexity.Resource.Urls(childComplexity), true

	case "Resource.videoDuration":
		if e.complexity.Resource.VideoDuration == nil {
			break
		}

		return e.complexity.Resource.VideoDuration(childComplexity), true

	case "Resource.videoNoAudio":
		if e.complexity.Resource.VideoNoAudio == nil {
			break
		}

		return e.complexity.Resource.VideoNoAudio(childComplexity), true

	case "Resource.videoThumbnail":
		if e.complexity.Resource.VideoThumbnail == nil {
			break
		}

		return e.complexity.Resource.VideoThumbnail(childComplexity), true

	case "Resource.width":
		if e.complexity.Resource.Width == nil {
			break
		}

		return e.complexity.Resource.Width(childComplexity), true

	case "ResourceProgress.id":
		if e.complexity.ResourceProgress.ID == nil {
			break
		}

		return e.complexity.ResourceProgress.ID(childComplexity), true

	case "ResourceUrl.mimeType":
		if e.complexity.ResourceUrl.MimeType == nil {
			break
		}

		return e.complexity.ResourceUrl.MimeType(childComplexity), true

	case "ResourceUrl.url":
		if e.complexity.ResourceUrl.URL == nil {
			break
		}

		return e.complexity.ResourceUrl.URL(childComplexity), true

	case "Translation.language":
		if e.complexity.Translation.Language == nil {
			break
		}

		return e.complexity.Translation.Language(childComplexity), true

	case "Translation.text":
		if e.complexity.Translation.Text == nil {
			break
		}

		return e.complexity.Translation.Text(childComplexity), true

	case "UpdateCancellationReasonDeprecatedPayload.cancellationReason":
		if e.complexity.UpdateCancellationReasonDeprecatedPayload.CancellationReason == nil {
			break
		}

		return e.complexity.UpdateCancellationReasonDeprecatedPayload.CancellationReason(childComplexity), true

	case "UpdateCancellationReasonTitlePayload.cancellationReason":
		if e.complexity.UpdateCancellationReasonTitlePayload.CancellationReason == nil {
			break
		}

		return e.complexity.UpdateCancellationReasonTitlePayload.CancellationReason(childComplexity), true

	case "VideoMedia.aspectRatio":
		if e.complexity.VideoMedia.AspectRatio == nil {
			break
		}

		return e.complexity.VideoMedia.AspectRatio(childComplexity), true

	case "VideoMedia.containers":
		if e.complexity.VideoMedia.Containers == nil {
			break
		}

		return e.complexity.VideoMedia.Containers(childComplexity), true

	case "VideoMedia.cover":
		if e.complexity.VideoMedia.Cover == nil {
			break
		}

		return e.complexity.VideoMedia.Cover(childComplexity), true

	case "VideoMedia.duration":
		if e.complexity.VideoMedia.Duration == nil {
			break
		}

		return e.complexity.VideoMedia.Duration(childComplexity), true

	case "VideoMedia.hasAudio":
		if e.complexity.VideoMedia.HasAudio == nil {
			break
		}

		return e.complexity.VideoMedia.HasAudio(childComplexity), true

	case "VideoMedia.id":
		if e.complexity.VideoMedia.ID == nil {
			break
		}

		return e.complexity.VideoMedia.ID(childComplexity), true

	case "_Service.sdl":
		if e.complexity._Service.SDL == nil {
			break
		}

		return e.complexity._Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputBecomeClubSupporterWithAccountSavedPaymentMethodInput,
		ec.unmarshalInputCancelAccountClubSupporterSubscriptionInput,
		ec.unmarshalInputCancelActiveSupporterSubscriptionsForClubInput,
		ec.unmarshalInputCreateCancellationReasonInput,
		ec.unmarshalInputDeleteAccountSavedPaymentMethodInput,
		ec.unmarshalInputExtendAccountClubSupporterSubscriptionInput,
		ec.unmarshalInputGenerateCCBillClubSupporterPaymentLinkInput,
		ec.unmarshalInputGenerateClubSupporterPaymentReceiptFromAccountTransactionInput,
		ec.unmarshalInputGenerateClubSupporterRefundReceiptFromAccountTransactionInput,
		ec.unmarshalInputGenerateRefundAmountForAccountTransactionInput,
		ec.unmarshalInputRefundAccountTransactionInput,
		ec.unmarshalInputUpdateCancellationReasonDeprecatedInput,
		ec.unmarshalInputUpdateCancellationReasonTitleInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../schema/billing/schema.graphql", Input: `"""Represents a CCBill transaction, which may or may not contain these fields."""
type CCBillTransaction {
  ccbillSubscriptionId: String!
  ccbillTransactionId: String
}

enum AccountTransactionType {
  PAYMENT
  VOID
  REFUND
  CHARGEBACK
}

type AccountTransactionEvent {
  """An ID to uniquely identify account transaction."""
  id: ID!

  """The amount."""
  amount: Int!

  """The currency."""
  currency: Currency!

  """The reason for this event."""
  reason: String!

  """When this event occurred."""
  createdAt: Time!
}

"""
A transaction item.

All transactions start off in the "PAYMENT" type.

Once a transaction is refunded once, it turns into a REFUND transaction + an event is added.

If a transaction is charged back, it turns into a CHARGEBACK transaction + an event is added.

If a transaction is voided, it turns into a VOID transaction.
"""
type AccountTransaction implements Node @key(fields: "id") {
  """An ID to uniquely identify this transaction history."""
  id: ID!

  """A reference, used to look up this transaction."""
  reference: String!

  """The type of account transaction history, or what it belongs to."""
  type: AccountTransactionType!

  """
  The events for this transaction.

  If the transaction was refunded, an event will show up with the refund amount.

  If the transaction was charged back, an event will show up with the chargeback amount.
  """
  events: [AccountTransactionEvent!]!

  """
  The amount voided.

  A positive integer representing the currency in the smallest currency unit.
  """
  amount: Int!

  """
  The total amount refunded, if any.
  """
  totalRefunded: Int!

  """The currency voided in."""
  currency: Currency!

  """When the billing occurred."""
  billedAtDate: Date!

  """The next billing date for this transaction, if its a subscription."""
  nextBillingDate: Date

  """The payment method linked to this transaction."""
  paymentMethod: PaymentMethod!

  """When this transaction occurred."""
  createdAt: Time!

  """A ccbill transaction, if this transaction originated from ccbill."""
  ccbillTransaction: CCBillTransaction

  """The subscription linked to this transaction, if it's a club supporter subscription."""
  clubSupporterSubscription: AccountClubSupporterSubscription @goField(forceResolver: true)
}

"""
A generated refund amount.
"""
type RefundAmount {
  """
  A prorated refund amount, based on the first date and last date of billing / billing duration.

  A positive integer representing the currency in the smallest currency unit.
  """
  proratedAmount: Int!

  """
  The maximum amount you can issue a refund for.

  A positive integer representing the currency in the smallest currency unit.
  """
  maximumAmount: Int!

  """The currency."""
  currency: Currency!
}

enum CCBillSubscriptionStatus {
  """An inactive subscription, i.e. expired."""
  INACTIVE
  """An active subscription that was cancelled, or a one-time charge."""
  ACTIVE_AND_CANCELLED
  """An active subscription that is not cancelled."""
  ACTIVE_AND_NOT_CANCELLED
}

type CCBillSubscriptionDetails {
  """The ID of the subscription."""
  id: ID!

  """The status of the CCBill subscription."""
  status: CCBillSubscriptionStatus!

  """Payment method linked to this CCBill subscription."""
  paymentMethod: PaymentMethod!

  """The club linked to this ccbill subscription, if there is one."""
  club: Club

  """The account linked to this ccbill subscription."""
  account: Account!

  """Subscription details."""
  subscriptionInitialPrice: Int!
  subscriptionRecurringPrice: Int!
  subscriptionCurrency: Currency!

  """Billed details."""
  billedInitialPrice: Int!
  billedRecurringPrice: Int!
  billedCurrency: Currency!

  """Accounting details."""
  accountingInitialPrice: Int!
  accountingRecurringPrice: Int!
  accountingCurrency: Currency!

  """Whether or not this is recurring, or a one-time charge."""
  isRecurring: Boolean!

  """Whether or not this subscription was a duplicate."""
  isDuplicate: Boolean!

  """The amount of rebills that occurred."""
  timesRebilled: Int!

  """The amount of chargebacks issued."""
  chargebacksIssued: Int!

  """The amount of refunds issued."""
  refundsIssued: Int!

  """The amount of voids issued."""
  voidsIssued: Int!

  """The signup date."""
  signupDate: Time!

  """If this subscription was cancelled, the expiration date."""
  expirationDate: Time

  """If this subscription was cancelled, the date it occurred."""
  cancelDate: Time

  """When this subscription was updated last."""
  updatedAt: Time!
}

"""
The ccbill subscription details.

When this object is present, this means that it can only be updated through CCBill support. https://support.ccbill.com/

For example: active subscriptions' payment methods can only be updated through support, or any saved payment methods.
"""
type CCBillSubscription {
  """The payment method belonging to this subscription."""
  paymentMethod: String!

  """The identifier for this subscription."""
  ccbillSubscriptionId: String!

  """The email belonging to this subscription."""
  email: String!

  """A link to modify the subscription."""
  link: URI!
}

type AccountSavedPaymentMethod {
  """An ID to uniquely identify this payment method."""
  id: ID!

  """The account linked to this saved payment method."""
  account: Account!

  """The payment method."""
  paymentMethod: PaymentMethod!

  """The ccbill subscription."""
  ccbillSubscription: CCBillSubscription

  """When this payment method was last updated."""
  updatedAt: Time!
}

union AccountClubSupporterSubscription = AccountActiveClubSupporterSubscription | AccountCancelledClubSupporterSubscription | AccountExpiredClubSupporterSubscription

interface IAccountClubSupporterSubscription {
  """An ID to uniquely identify this subscription."""
  id: ID!

  """A reference, used to look up this subscription."""
  reference: String!

  """The account linked to this subscription."""
  account: Account!

  """The club linked to this subscription."""
  club: Club!

  """Transactions for this account."""
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the type."""
    type: AccountTransactionType

    """The start date for the transaction history."""
    from: Time

    """The end date, optional (will search until end of time)."""
    to: Time
  ): AccountTransactionConnection! @goField(forceResolver: true)

  """The billing amount."""
  billingAmount: Int!

  """The currency."""
  billingCurrency: Currency!

  """When the account first became a supporter."""
  supporterSince: Time!

  """The ccbill subscription."""
  ccbillSubscription: CCBillSubscription

  """When this subscription was last updated."""
  updatedAt: Time!

  """If a subscription is failed to be billed, it will be updated with this error object."""
  billingError: AccountClubSupporterSubscriptionBillingError
}

type AccountClubSupporterSubscriptionBillingError {
  """When this subscription failed to bill."""
  failedAt: Time!

  """The error text from CCBill."""
  ccbillErrorText: String

  """The error code from CCBill."""
  ccbillErrorCode: String

  """The decline error, parsed in a friendlier way."""
  ccbillDeclineError: CCBillDeclineError

  """The next date the billing will be retried."""
  nextRetryDate: Date!
}

type AccountActiveClubSupporterSubscription implements IAccountClubSupporterSubscription & Node @key(fields: "id") {
  """An ID to uniquely identify this subscription."""
  id: ID!

  """A reference, used to look up this subscription."""
  reference: String!

  """The account linked to this subscription."""
  account: Account!

  """The club linked to this subscription."""
  club: Club!

  """Transactions for this account."""
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the type."""
    type: AccountTransactionType

    """The start date for the transaction history."""
    from: Time

    """The end date, optional (will search until end of time)."""
    to: Time
  ): AccountTransactionConnection! @goField(forceResolver: true)

  """The billing amount."""
  billingAmount: Int!

  """The currency."""
  billingCurrency: Currency!

  """When the account first became a supporter."""
  supporterSince: Time!

  """The last billing date for this subscription."""
  lastBillingDate: Date!

  """The next billing date for this subscription."""
  nextBillingDate: Date!

  """The payment method linked to this subscription."""
  paymentMethod: PaymentMethod!

  """The ccbill subscription."""
  ccbillSubscription: CCBillSubscription

  """When this subscription was last updated."""
  updatedAt: Time!

  """If a subscription is failed to be billed, it will be updated with this error object."""
  billingError: AccountClubSupporterSubscriptionBillingError
}

type AccountCancelledClubSupporterSubscription implements IAccountClubSupporterSubscription & Node @key(fields: "id") {
  """An ID to uniquely identify this subscription."""
  id: ID!

  """A reference, used to look up this subscription."""
  reference: String!

  """The account linked to this subscription."""
  account: Account!

  """The club linked to this subscription."""
  club: Club!

  """Transactions for this account."""
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the type."""
    type: AccountTransactionType

    """The start date for the transaction history."""
    from: Time

    """The end date, optional (will search until end of time)."""
    to: Time
  ): AccountTransactionConnection! @goField(forceResolver: true)

  """The billing amount."""
  billingAmount: Int!

  """The currency."""
  billingCurrency: Currency!

  """When the account first became a supporter."""
  supporterSince: Time!

  """When this subscription was cancelled."""
  cancelledAt: Time!

  """When this subscription will end."""
  endDate: Date!

  """The payment method linked to this subscription."""
  paymentMethod: PaymentMethod!

  """The ccbill subscription."""
  ccbillSubscription: CCBillSubscription

  """When this subscription was last updated."""
  updatedAt: Time!

  """If a subscription is failed to be billed, it will be updated with this error object."""
  billingError: AccountClubSupporterSubscriptionBillingError

  """The reason this subscription was cancelled, if there is one."""
  cancellationReason: CancellationReason @goField(forceResolver: true)
}

type AccountExpiredClubSupporterSubscription implements IAccountClubSupporterSubscription & Node @key(fields: "id") {
  """An ID to uniquely identify this subscription."""
  id: ID!

  """A reference, used to look up this subscription."""
  reference: String!

  """The account linked to this subscription."""
  account: Account!

  """The club linked to this subscription."""
  club: Club!

  """Transactions for this account."""
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the type."""
    type: AccountTransactionType

    """The start date for the transaction history."""
    from: Time

    """The end date, optional (will search until end of time)."""
    to: Time
  ): AccountTransactionConnection! @goField(forceResolver: true)

  """The billing amount."""
  billingAmount: Int!

  """The currency."""
  billingCurrency: Currency!

  """When the account first became a supporter."""
  supporterSince: Time!

  """The ccbill subscription."""
  ccbillSubscription: CCBillSubscription

  """When this subscription was last updated."""
  updatedAt: Time!

  """When this subscription expired."""
  expiredAt: Time!

  """If a subscription is failed to be billed, it will be updated with this error object."""
  billingError: AccountClubSupporterSubscriptionBillingError

  """The reason this subscription was cancelled, if there is one."""
  cancellationReason: CancellationReason @goField(forceResolver: true)
}

"""An expired account club supporter subscription."""
type ExpiredAccountClubSupporterSubscription {
  """An ID to uniquely identify this expired subscription."""
  id: ID!

  """The account linked to this subscription."""
  account: Account!

  """The club linked to this subscription."""
  club: Club!

  """When the account first became a supporter. Note that when subscribing next time, this date will be kept, but subtracted by the amount of days they were not a supporter, and normalized to the current date."""
  supporterSince: Time!

  """Wen this subscription expired."""
  expiredAt: Time!

  """When this subscription was originally cancelled."""
  cancelledAt: Time!
}

enum AccountClubSupporterSubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum CardType {
  VISA
  MASTERCARD
  DISCOVER
  JCB
  AMEX
  OTHER
}

"""Represents a billing address."""
type BillingAddress {
  addressLine1: String!
  city: String!
  state: String!
  country: String!
  postalCode: String!
}

"""Represents a billing contact."""
type BillingContact {
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
}

"""Represents a card."""
type Card {
  """Last 4 digits of the card."""
  last4: String!

  """The expiration date."""
  expiration: String!

  """The type of card."""
  type: CardType!
}

"""A payment method."""
type PaymentMethod {
  """Card linked to this payment method."""
  card: Card!

  """Billing address of this card."""
  billingAddress: BillingAddress

  """Billing contact of this card."""
  billingContact: BillingContact
}

enum CCBillDeclineError {
  GENERAL_SYSTEM_ERROR
  TRANSACTION_DECLINED
  TRANSACTION_DENIED_OR_REFUSED_BY_BANK
  CARD_EXPIRED
  INSUFFICIENT_FUNDS
  RATE_LIMIT_ERROR
  TRANSACTION_APPROVAL_REQUIRED
}

"""Type describing a price."""
type Price {
  """
  The amount.

  A positive integer representing the currency in the smallest currency unit.
  """
  amount: Int!

  """
  The currency the amount is represented in.
  """
  currency: Currency!
}

"""Type describing a localized pricing point."""
type LocalizedPricingPoint {
  """Price for your current location + currency."""
  localizedPrice: Price!

  """All other prices in different currencies."""
  prices: [Price!]!
}

"""Edge of the account club supporter subscriptions"""
type AccountClubSupporterSubscriptionEdge {
  node: AccountClubSupporterSubscription!
  cursor: String!
}

"""Connection of the account club supporter subscription"""
type AccountClubSupporterSubscriptionConnection {
  edges: [AccountClubSupporterSubscriptionEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the expired account club supporter subscriptions"""
type ExpiredAccountClubSupporterSubscriptionEdge {
  node: ExpiredAccountClubSupporterSubscription!
  cursor: String!
}

"""Connection of the expired account club supporter subscription"""
type ExpiredAccountClubSupporterSubscriptionConnection {
  edges: [ExpiredAccountClubSupporterSubscriptionEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the account saved payment method"""
type AccountSavedPaymentMethodEdge {
  node: AccountSavedPaymentMethod!
  cursor: String!
}

"""Connection of the account saved payment method"""
type AccountSavedPaymentMethodConnection {
  edges: [AccountSavedPaymentMethodEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the the account transaction."""
type AccountTransactionEdge {
  node: AccountTransaction!
  cursor: String!
}

"""Connection of the account transaction."""
type AccountTransactionConnection {
  edges: [AccountTransactionEdge!]!
  pageInfo: PageInfo!
}

"""Payload for a new club supporter"""
type BecomeClubSupporterWithAccountSavedPaymentMethodPayload {
  """CCBill Transaction Token, if this was a ccbill transaction. Used to query more details about this transaction."""
  ccbillTransactionToken: String
}

"""Generate ccbill club supporter payment link."""
input GenerateCCBillClubSupporterPaymentLinkInput {
  """The chosen club ID."""
  clubId: ID!

  """The chosen currency."""
  currency: Currency!

  """Whether or not we want to save the payment details for later."""
  savePaymentDetailsForLater: Boolean!
}

"""Become club supporter with saved payment method."""
input BecomeClubSupporterWithAccountSavedPaymentMethodInput {
  """The chosen club ID."""
  clubId: ID!

  """The chosen currency."""
  currency: Currency!

  """The chosen saved payment method."""
  savedPaymentMethodId: ID!
}

type CCBillTransactionDetails {
  """An ID uniquely identifying this transaction."""
  id: ID!

  """Whether or not the transaction was approved."""
  approved: Boolean!

  """The error from CCBill, if the transaction was not approved."""
  declineError: CCBillDeclineError

  """The decline code from CCBill."""
  declineCode: String

  """The decline text from CCBill."""
  declineText: String

  """
  If this transaction was approved, poll this field to until this is not null anymore.

  This signifies that the transaction has processed successfully (on our end),

  and the supporter benefits are now available.
  """
  linkedAccountClubSupporterSubscription: AccountClubSupporterSubscription @goField(forceResolver: true)
}

"""Delete an account saved payment method input."""
input DeleteAccountSavedPaymentMethodInput {
  """The chosen saved payment method id."""
  savedPaymentMethodId: ID!
}

"""Payload for deleting an account saved payment method."""
type DeleteAccountSavedPaymentMethodPayload {
  """The deleted saved payment method."""
  deletedAccountSavedPaymentMethodId: ID!
}

"""Cancel account club supporter subscription input."""
input CancelAccountClubSupporterSubscriptionInput {
  """The chosen club supporter subscription id."""
  clubSupporterSubscriptionId: ID!

  """The cancellation reason for this subscription."""
  cancellationReasonId: ID!
}

"""Extend account club supporter subscription input."""
input ExtendAccountClubSupporterSubscriptionInput {
  """The chosen club supporter subscription id."""
  clubSupporterSubscriptionId: ID!

  """The amount of days to extend it for."""
  days: Int!
}

"""Generate a refund amount."""
input GenerateRefundAmountForAccountTransactionInput {
  """The id of the transaction."""
  accountTransactionId: ID!
}

"""Refund an account transaction."""
input RefundAccountTransactionInput {
  """The id of the subscription."""
  accountTransactionId: ID!

  """
  The amount to refund.

  A positive integer representing the currency in the smallest currency unit.
  """
  amount: Int!
}

"""Generate club supporter receipt input."""
input GenerateClubSupporterPaymentReceiptFromAccountTransactionInput {
  """The id of the transaction."""
  transactionId: ID!
}

"""Generate club supporter receipt input."""
input GenerateClubSupporterRefundReceiptFromAccountTransactionInput {
  """The id of the transaction."""
  transactionId: ID!

  """The id of the transaction event, since we can have multiple refunds."""
  transactionEventId: ID!
}

"""Cancel all active subscriptions for a club."""
input CancelActiveSupporterSubscriptionsForClubInput {
  """The id of the club."""
  clubId: ID!
}

"""Payload for cancelling all active subscriptions."""
type CancelActiveSupporterSubscriptionsForClubPayload {
  """The club."""
  club: Club
}

"""Payload for generating the receipt."""
type GenerateRefundAmountForAccountTransactionPayload {
  """The refund amount."""
  refundAmount: RefundAmount
}

"""Payload for generating the receipt."""
type GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload {
  """The link to the receipt."""
  link: URI
}

"""Payload for generating the receipt."""
type GenerateClubSupporterRefundReceiptFromAccountTransactionPayload {
  """The link to the receipt."""
  link: URI
}

"""Payload for refunding an account transaction."""
type RefundAccountTransactionPayload {
  """The updated account transaction."""
  accountTransaction: AccountTransaction
}

"""Payload for cancelling the account club supporter."""
type CancelAccountClubSupporterSubscriptionPayload {
  """The new subscription."""
  clubSupporterSubscription: AccountClubSupporterSubscription
}

"""Payload for extending the account club supporter."""
type ExtendAccountClubSupporterSubscriptionPayload {
  """The new subscription."""
  clubSupporterSubscription: AccountClubSupporterSubscription
}

"""Payload for a new ccbill payment link"""
type GenerateCCBillClubSupporterPaymentLinkPayload {
  """The payment link to use."""
  paymentLink: URI
}

extend type ClubMember {
  """
  The subscription linked to this club member.

  Note that an account can have multiple subscriptions for the same club, due to the fact that we keep expired subscriptions.

  So this will just grab the most recent active subscription for this club.
  """
  clubSupporterSubscription: AccountClubSupporterSubscription @goField(forceResolver: true)
}

extend type Account {
  """Club supporter subscriptions linked to this account."""
  clubSupporterSubscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the status of account club supporter subscription status."""
    status: [AccountClubSupporterSubscriptionStatus!]
  ): AccountClubSupporterSubscriptionConnection! @goField(forceResolver: true)

  """Expired club supporter subscriptions linked to this account."""
  expiredClubSupporterSubscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ExpiredAccountClubSupporterSubscriptionConnection! @goField(forceResolver: true)

  """Saved payment methods linked to this account."""
  savedPaymentMethods(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountSavedPaymentMethodConnection! @goField(forceResolver: true)

  """Total amount of transactions, excluding voids."""
  transactionsTotalCount: Int! @goField(forceResolver: true)

  """Total amount of payment transactions."""
  transactionsPaymentCount: Int! @goField(forceResolver: true)

  """Total amount of refund transactions."""
  transactionsRefundCount: Int! @goField(forceResolver: true)

  """Total amount of chargeback transactions."""
  transactionsChargebackCount: Int! @goField(forceResolver: true)

  """Transactions for this account."""
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the type."""
    type: AccountTransactionType

    """The start date for the transaction history."""
    from: Time

    """The end date, optional (will search until end of time)."""
    to: Time
  ): AccountTransactionConnection! @goField(forceResolver: true)

  """
  Whether or not this account has at least 1 active or cancelled club supporter subscription.

  This should be false in order to delete the account.
  """
  hasActiveOrCancelledAccountClubSupporterSubscriptions: Boolean! @goField(forceResolver: true)
}

extend type Club {
  """A supporter subscription price for this club."""
  supporterSubscriptionPrice: LocalizedPricingPoint! @goField(forceResolver: true)

  """Club supporter subscriptions linked to this club."""
  supporterSubscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the status of account club supporter subscription status."""
    status: [AccountClubSupporterSubscriptionStatus!]
  ): AccountClubSupporterSubscriptionConnection! @goField(forceResolver: true)
}

extend type Mutation {
  """
  Generate a CCBill payment link to become a club supporter
  """
  generateCCBillClubSupporterPaymentLink(input: GenerateCCBillClubSupporterPaymentLinkInput!): GenerateCCBillClubSupporterPaymentLinkPayload

  """
  Become a club supporter using a saved payment method
  """
  becomeClubSupporterWithAccountSavedPaymentMethod(input: BecomeClubSupporterWithAccountSavedPaymentMethodInput!): BecomeClubSupporterWithAccountSavedPaymentMethodPayload

  """
  Cancel a club supporter subscription
  """
  cancelAccountClubSupporterSubscription(input: CancelAccountClubSupporterSubscriptionInput!): CancelAccountClubSupporterSubscriptionPayload

  """
  Issue a refund on a transaction.

  Staff+ only.
  """
  refundAccountTransaction(input: RefundAccountTransactionInput!): RefundAccountTransactionPayload

  """
  Extend an account club supporter subscription for an X amount of days, so basically delay their billing date for x days.

  Staff+ only.
  """
  extendAccountClubSupporterSubscription(input: ExtendAccountClubSupporterSubscriptionInput!): ExtendAccountClubSupporterSubscriptionPayload

  """
  Generate a refund amount for a transaction.

  Staff+ only.
  """
  generateRefundAmountForAccountTransaction(input: GenerateRefundAmountForAccountTransactionInput!): GenerateRefundAmountForAccountTransactionPayload

  """
  Delete an account saved payment method
  """
  deleteAccountSavedPaymentMethod(input: DeleteAccountSavedPaymentMethodInput!): DeleteAccountSavedPaymentMethodPayload

  """
  Generate a payment receipt from the account transaction.
  """
  generateClubSupporterPaymentReceiptFromAccountTransaction(input: GenerateClubSupporterPaymentReceiptFromAccountTransactionInput!): GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload

  """
  Generate a refund receipt from the account transaction.
  """
  generateClubSupporterRefundReceiptFromAccountTransaction(input: GenerateClubSupporterRefundReceiptFromAccountTransactionInput!): GenerateClubSupporterRefundReceiptFromAccountTransactionPayload

  """
  Cancel all active subscriptions for a club.

  Staff+ only.
  """
  cancelActiveSupporterSubscriptionsForClub(input: CancelActiveSupporterSubscriptionsForClubInput!): CancelActiveSupporterSubscriptionsForClubPayload
}

extend type Query {
  """
  Grab more details about a ccbill subscription, passing in the ID.

  Staff+ only.
  """
  ccbillSubscriptionDetails(ccbillSubscriptionId: String!): CCBillSubscriptionDetails

  """
  Grab a single account subscription by the reference.
  """
  accountClubSupporterSubscription(reference: String!): AccountClubSupporterSubscription

  """
  Grab a single account transaction by the reference.
  """
  accountTransaction(reference: String!): AccountTransaction

  """
  After a successful transaction (through CCBill FlexForms or becomeClubSupporterWithAccountSavedPaymentMethod),
  use the returned token in this query to grab the current state of the transaction.

  It will tell you if the transaction was approved or denied, as well as having the ability to poll until a subscription is finalized.
  """
  ccbillTransactionDetails(token: String!): CCBillTransactionDetails
}
`, BuiltIn: false},
	{Name: "../../../schema/cancellation/schema.graphql", Input: `"""Cancellation reason."""
type CancellationReason implements Node @key(fields: "id") {
  """ID of the reason."""
  id: ID!

  """Reference of the reason. Should be used for single lookups."""
  reference: String!

  """The title for this reason."""
  title(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """If this reason is deprecated."""
  deprecated: Boolean!
}

"""Edge of the reason"""
type CancellationReasonEdge {
  node: CancellationReason!
  cursor: String!
}

"""Connection of the reason"""
type CancellationReasonConnection {
  edges: [CancellationReasonEdge!]!
  pageInfo: PageInfo!
}

type Query {
  """
  Get a cancellation reason by reference.
  """
  cancellationReason(reference: String!): CancellationReason

  """
  Get all reasons for the site.
  """
  cancellationReasons(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Whether or not to show deprecated reasons."""
    deprecated: Boolean! = false
  ): CancellationReasonConnection!
}

"""Create a new cancellation reason input."""
input CreateCancellationReasonInput {
  """The title."""
  title: String!
}

"""Updated cancellation reason."""
type CreateCancellationReasonPayload {
  """The updated cancellation reason."""
  cancellationReason: CancellationReason
}

"""Update cancellation reason."""
input UpdateCancellationReasonTitleInput {
  """The reason to update."""
  cancellationReasonId: ID!

  """The title to update"""
  title: String!

  """The localization for this title."""
  locale: BCP47!
}

"""Updated reason."""
type UpdateCancellationReasonTitlePayload {
  """The updated reason."""
  cancellationReason: CancellationReason
}

"""Update reason."""
input UpdateCancellationReasonDeprecatedInput {
  """The cancellation reason to update."""
  cancellationReasonId: ID!

  """The deprecated status."""
  deprecated: Boolean!
}

"""Updated reason."""
type UpdateCancellationReasonDeprecatedPayload {
  """The updated reason."""
  cancellationReason: CancellationReason
}

extend type Mutation {
  """
  Create a new reason.
  """
  createCancellationReason(input: CreateCancellationReasonInput!): CreateCancellationReasonPayload

  """
  Update a reason title.
  """
  updateCancellationReasonTitle(input: UpdateCancellationReasonTitleInput!): UpdateCancellationReasonTitlePayload

  """
  Update a reason deprecation.
  """
  updateCancellationReasonDeprecated(input: UpdateCancellationReasonDeprecatedInput!): UpdateCancellationReasonDeprecatedPayload
}
`, BuiltIn: false},
	{Name: "../../../schema/metrics/schema.graphql", Input: `type ClubTransactionMetric {
  """The month that this metric represents for this club."""
  month: Int!

  """The year that this metric represents for this club."""
  year: Int!

  """The currency that this metric is in."""
  currency: Currency!

  """How many transactions were created for this month."""
  totalTransactionsCount: Int!

  """Total transaction in money amount."""
  totalTransactionsAmount: Int!

  """How many chargebacks were issued for this month."""
  chargebacksCount: Int!

  """All of the chargebacks in money amount."""
  chargebacksAmount: Int!

  """The chargeback ratio for this month - for the count."""
  chargebacksCountRatio: Float!

  """The chargeback ratio for this month - for the amount."""
  chargebacksAmountRatio: Float!

  """How many refunds were issued for this month."""
  refundsCount: Int!

  """All of the refunds in money amount."""
  refundsAmount: Int!

  """The refund ratio for this month - for the count."""
  refundsCountRatio: Float!

  """The refund ratio for this month - for the amount."""
  refundsAmountRatio: Float!
}

"""Edge of the club metric"""
type ClubTransactionMetricEdge {
  node: ClubTransactionMetric!
  cursor: String!
}

"""Connection of the club metric"""
type ClubTransactionMetricConnection {
  edges: [ClubTransactionMetricEdge!]!
  pageInfo: PageInfo!
}

extend type Club {
  """Month-by-month transaction metrics of this club."""
  transactionMetrics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ClubTransactionMetricConnection! @goField(forceResolver: true)
}
`, BuiltIn: false},
	{Name: "../../../schema/schema.graphql", Input: `extend type Club @key(fields: "id")  {
  id: ID! @external
}

extend type Account @key(fields: "id")  {
  id: ID! @external
}

extend type ClubMember @key(fields: "id")  {
  id: ID! @external
}
`, BuiltIn: false},
	{Name: "../../../../../libraries/graphql/schema.graphql", Input: `scalar Time

scalar Date

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

directive @goField(forceResolver: Boolean) on INPUT_FIELD_DEFINITION
  | FIELD_DEFINITION

directive @entityResolver(multi: Boolean) on OBJECT

"""Localization formatted in BCP47."""
scalar BCP47

type Language {
  """
  BCP47 locale
  """
  locale: BCP47!

  """
  Fully qualified name
  """
  name: String!
}

type Translation {
  """The language linked to this translation."""
  language: Language!

  """The translation text."""
  text: String!
}

enum Currency {
  USD
  CAD
  AUD
  JPY
  GBP
  EUR
}

"""Identifies the type of resource"""
enum ResourceType {
  IMAGE
  VIDEO
}

"""A type representing a url to the resource and the mimetype"""
type ResourceUrl {
  url: URI!
  mimeType: String!
}

extend type ResourceProgress @key(fields: "id") {
  """An ID identifying this progress."""
  id: ID! @external
}

"""
A resource represents an image or a video format that contains an ID to uniquely identify it,
and urls to access the resources. We have many urls in order to provide a fallback for older browsers

We also identify the type of resource (image or video) to make it easy to distinguish them
"""
type Resource {
  """An ID uniquely identifying this resource."""
  id: ID!

  """The type of resource - either an image or a video."""
  type: ResourceType!

  """Whether or not the resource is processed. Can be used for additional permission checks."""
  processed: Boolean!

  """URLs to access the resource."""
  urls: [ResourceUrl!]!

  """The width."""
  width: Int!

  """The height."""
  height: Int!

  """Duration, if video."""
  videoDuration: Int!

  """Video thumbnail, if video."""
  videoThumbnail: ResourceUrl

  """Whether or not the video has audio."""
  videoNoAudio: Boolean!

  """A hex-code color of the resource that can be used in-place while the resource is loading."""
  preview: String!

  """
  This field identifies the progress for the resource.

  If the resource is not yet processed, this will not be nil.

  If we have some sort of state information available about the progress, this will not be nil.
  """
  progress: ResourceProgress

  """
  Whether or not this resource failed to process.

  A failure can happen if:
  - The supplied image is an unsupported format. This can happen if for example, someone submits a JPEG (unsupported) that was renamed to a PNG (supported)
  - The supplied image is corrupted.
  - The supplied video is invalid or corrupted.

  """
  failed: Boolean!
}

"""Type used to access a specific image."""
type ImageMediaAccess {
  """The width of the image."""
  width: Int!

  """The height of the image."""
  height: Int!

  """The URL used to access the image."""
  url: URI!
}

"""
All variants available for an image.
"""
type ImageMediaVariants {
  """50x50 crop of an image. Suitable for mini icons."""
  mini: ImageMediaAccess!
  """100x100 crop of an image. Suitable for icons."""
  icon: ImageMediaAccess!
  """150x150 crop of an image. Suitable for small previews."""
  thumbnail: ImageMediaAccess!
  """200x200 crop of an image. Suitable for large thumbnails."""
  thumbnailHd: ImageMediaAccess!
  """768px width or height resize."""
  small: ImageMediaAccess!
  """1366px width or height resize."""
  medium: ImageMediaAccess!
  """1920px width or height resize."""
  large: ImageMediaAccess!
  """4096px width or height resize."""
  hd: ImageMediaAccess!
  """640px width or height resize."""
  banner: ImageMediaAccess!
}

type ColorPalette {
  percent: Float!
  red: Int!
  green: Int!
  blue: Int!
}

extend type MediaProgress @key(fields: "id") {
  """An ID identifying this progress."""
  id: ID! @external
}

"""
RawMedia represents an unprocessed media object.

While a media object is RawMedia, it is still in the process of processing.
"""
type RawMedia {
  """An ID uniquely identifying this media."""
  id: ID!

  """The name of the original file, when it was uploaded."""
  originalFileName: String!

  """Whether or not the media failed processing."""
  failed: Boolean!

  """The current progress of the media processing."""
  progress: MediaProgress
}

type ImageMedia {
  """An ID uniquely identifying this media."""
  id: ID!

  """All available variants for this media."""
  variants: ImageMediaVariants!

  """The original image media. Note that originals are resized if they are larger than 4096px."""
  original: ImageMediaAccess!

  """Color palettes for this image."""
  colorPalettes: [ColorPalette!]!
}

"""Data about the aspect ratio."""
type AspectRatio {
  """The width."""
  width: Int!
  """The height."""
  height: Int!
}

"""A video/mp4 video container."""
type MP4VideoContainer {
  """The URL used to access the container."""
  url: URI!

  """The bitrate of the video."""
  bitrate: Int!

  """The width of the video."""
  width: Int!

  """The height of the video."""
  height: Int!
}

"""An application/x-mpegURL video container."""
type HLSVideoContainer {
  """The URL used to access the container."""
  url: URI!
}

"""A container used to access the video."""
union VideoContainer = HLSVideoContainer | MP4VideoContainer

type VideoMedia {
  """An ID uniquely identifying this media."""
  id: ID!

  """The cover for this image media."""
  cover: ImageMedia!

  """The aspect ratio of the media."""
  aspectRatio: AspectRatio!

  """
  The container for videos.

  A video can have multiple containers, for example, an HLS video for general playback, and an .mp4 video as fallback.
  """
  containers: [VideoContainer!]!

  """The video duration, in milliseconds."""
  duration: Int!

  """Whether or not the video has audio."""
  hasAudio: Boolean!
}

union Media = VideoMedia | ImageMedia | RawMedia
`, BuiltIn: false},
	{Name: "../../../../../libraries/graphql/relay/schema.graphql", Input: `type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface Node {
  id: ID!
}`, BuiltIn: false},
	{Name: "../../../federation/directives.graphql", Input: `
	scalar _Any
	scalar _FieldSet
	
	directive @external on FIELD_DEFINITION
	directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
	directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
	directive @extends on OBJECT | INTERFACE

	directive @key(fields: _FieldSet!, resolvable: Boolean) repeatable on OBJECT | INTERFACE
	directive @link(import: [String!], url: String!) repeatable on SCHEMA
	directive @shareable on OBJECT | FIELD_DEFINITION
	directive @tag repeatable on OBJECT | FIELD_DEFINITION | INTERFACE | UNION
	directive @override(from: String!) on FIELD_DEFINITION
	directive @inaccessible on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
`, BuiltIn: true},
	{Name: "../../../federation/entity.graphql", Input: `
# a union of all types that use the @key directive
union _Entity = Account | AccountActiveClubSupporterSubscription | AccountCancelledClubSupporterSubscription | AccountExpiredClubSupporterSubscription | AccountTransaction | CancellationReason | Club | ClubMember | MediaProgress | ResourceProgress

# fake type to build resolver interfaces for users to implement
type Entity {
		findAccountByID(id: ID!,): Account!
	findAccountActiveClubSupporterSubscriptionByID(id: ID!,): AccountActiveClubSupporterSubscription!
	findAccountCancelledClubSupporterSubscriptionByID(id: ID!,): AccountCancelledClubSupporterSubscription!
	findAccountExpiredClubSupporterSubscriptionByID(id: ID!,): AccountExpiredClubSupporterSubscription!
	findAccountTransactionByID(id: ID!,): AccountTransaction!
	findCancellationReasonByID(id: ID!,): CancellationReason!
	findClubByID(id: ID!,): Club!
	findClubMemberByID(id: ID!,): ClubMember!

}

type _Service {
  sdl: String
}

extend type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_entityResolver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["multi"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("multi"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["multi"] = arg0
	return args, nil
}

func (ec *executionContext) field_AccountActiveClubSupporterSubscription_transactions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *types.AccountTransactionType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg4, err = ec.unmarshalOAccountTransactionType2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg4
	var arg5 *time.Time
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg5, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg5
	var arg6 *time.Time
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg6, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg6
	return args, nil
}

func (ec *executionContext) field_AccountCancelledClubSupporterSubscription_transactions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *types.AccountTransactionType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg4, err = ec.unmarshalOAccountTransactionType2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg4
	var arg5 *time.Time
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg5, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg5
	var arg6 *time.Time
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg6, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg6
	return args, nil
}

func (ec *executionContext) field_AccountExpiredClubSupporterSubscription_transactions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *types.AccountTransactionType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg4, err = ec.unmarshalOAccountTransactionType2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg4
	var arg5 *time.Time
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg5, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg5
	var arg6 *time.Time
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg6, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg6
	return args, nil
}

func (ec *executionContext) field_Account_clubSupporterSubscriptions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []types.AccountClubSupporterSubscriptionStatus
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg4, err = ec.unmarshalOAccountClubSupporterSubscriptionStatus2ᚕoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionStatusᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg4
	return args, nil
}

func (ec *executionContext) field_Account_expiredClubSupporterSubscriptions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Account_savedPaymentMethods_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Account_transactions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *types.AccountTransactionType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg4, err = ec.unmarshalOAccountTransactionType2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg4
	var arg5 *time.Time
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg5, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg5
	var arg6 *time.Time
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg6, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg6
	return args, nil
}

func (ec *executionContext) field_CancellationReason_title_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg0, err = ec.unmarshalOBCP472ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg0
	return args, nil
}

func (ec *executionContext) field_Club_supporterSubscriptions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []types.AccountClubSupporterSubscriptionStatus
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg4, err = ec.unmarshalOAccountClubSupporterSubscriptionStatus2ᚕoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionStatusᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg4
	return args, nil
}

func (ec *executionContext) field_Club_transactionMetrics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Entity_findAccountActiveClubSupporterSubscriptionByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findAccountByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findAccountCancelledClubSupporterSubscriptionByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findAccountExpiredClubSupporterSubscriptionByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findAccountTransactionByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findCancellationReasonByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findClubByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findClubMemberByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_becomeClubSupporterWithAccountSavedPaymentMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.BecomeClubSupporterWithAccountSavedPaymentMethodInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBecomeClubSupporterWithAccountSavedPaymentMethodInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐBecomeClubSupporterWithAccountSavedPaymentMethodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelAccountClubSupporterSubscription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CancelAccountClubSupporterSubscriptionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCancelAccountClubSupporterSubscriptionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancelAccountClubSupporterSubscriptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelActiveSupporterSubscriptionsForClub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CancelActiveSupporterSubscriptionsForClubInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCancelActiveSupporterSubscriptionsForClubInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancelActiveSupporterSubscriptionsForClubInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCancellationReason_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CreateCancellationReasonInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateCancellationReasonInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCancellationReasonInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAccountSavedPaymentMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.DeleteAccountSavedPaymentMethodInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteAccountSavedPaymentMethodInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐDeleteAccountSavedPaymentMethodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_extendAccountClubSupporterSubscription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.ExtendAccountClubSupporterSubscriptionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNExtendAccountClubSupporterSubscriptionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExtendAccountClubSupporterSubscriptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_generateCCBillClubSupporterPaymentLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.GenerateCCBillClubSupporterPaymentLinkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGenerateCCBillClubSupporterPaymentLinkInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateCCBillClubSupporterPaymentLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_generateClubSupporterPaymentReceiptFromAccountTransaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.GenerateClubSupporterPaymentReceiptFromAccountTransactionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGenerateClubSupporterPaymentReceiptFromAccountTransactionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateClubSupporterPaymentReceiptFromAccountTransactionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_generateClubSupporterRefundReceiptFromAccountTransaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.GenerateClubSupporterRefundReceiptFromAccountTransactionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGenerateClubSupporterRefundReceiptFromAccountTransactionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateClubSupporterRefundReceiptFromAccountTransactionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_generateRefundAmountForAccountTransaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.GenerateRefundAmountForAccountTransactionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGenerateRefundAmountForAccountTransactionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateRefundAmountForAccountTransactionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refundAccountTransaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.RefundAccountTransactionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRefundAccountTransactionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐRefundAccountTransactionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCancellationReasonDeprecated_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateCancellationReasonDeprecatedInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateCancellationReasonDeprecatedInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCancellationReasonDeprecatedInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCancellationReasonTitle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateCancellationReasonTitleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateCancellationReasonTitleInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCancellationReasonTitleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query__entities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []map[string]interface{}
	if tmp, ok := rawArgs["representations"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("representations"))
		arg0, err = ec.unmarshalN_Any2ᚕmapᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["representations"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_accountClubSupporterSubscription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["reference"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reference"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_accountTransaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["reference"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reference"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_cancellationReason_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["reference"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reference"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_cancellationReasons_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 bool
	if tmp, ok := rawArgs["deprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deprecated"))
		arg4, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deprecated"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ccbillSubscriptionDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ccbillSubscriptionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ccbillSubscriptionId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ccbillSubscriptionId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ccbillTransactionDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Account_clubSupporterSubscriptions(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_clubSupporterSubscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().ClubSupporterSubscriptions(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["status"].([]types.AccountClubSupporterSubscriptionStatus))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountClubSupporterSubscriptionConnection)
	fc.Result = res
	return ec.marshalNAccountClubSupporterSubscriptionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_clubSupporterSubscriptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AccountClubSupporterSubscriptionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountClubSupporterSubscriptionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountClubSupporterSubscriptionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Account_clubSupporterSubscriptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Account_expiredClubSupporterSubscriptions(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_expiredClubSupporterSubscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().ExpiredClubSupporterSubscriptions(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ExpiredAccountClubSupporterSubscriptionConnection)
	fc.Result = res
	return ec.marshalNExpiredAccountClubSupporterSubscriptionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExpiredAccountClubSupporterSubscriptionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_expiredClubSupporterSubscriptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscriptionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscriptionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExpiredAccountClubSupporterSubscriptionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Account_expiredClubSupporterSubscriptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Account_savedPaymentMethods(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_savedPaymentMethods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().SavedPaymentMethods(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountSavedPaymentMethodConnection)
	fc.Result = res
	return ec.marshalNAccountSavedPaymentMethodConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountSavedPaymentMethodConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_savedPaymentMethods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AccountSavedPaymentMethodConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountSavedPaymentMethodConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountSavedPaymentMethodConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Account_savedPaymentMethods_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Account_transactionsTotalCount(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_transactionsTotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().TransactionsTotalCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_transactionsTotalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_transactionsPaymentCount(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_transactionsPaymentCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().TransactionsPaymentCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_transactionsPaymentCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_transactionsRefundCount(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_transactionsRefundCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().TransactionsRefundCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_transactionsRefundCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_transactionsChargebackCount(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_transactionsChargebackCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().TransactionsChargebackCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_transactionsChargebackCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_transactions(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_transactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().Transactions(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["type"].(*types.AccountTransactionType), fc.Args["from"].(*time.Time), fc.Args["to"].(*time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountTransactionConnection)
	fc.Result = res
	return ec.marshalNAccountTransactionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_transactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AccountTransactionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountTransactionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransactionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Account_transactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().HasActiveOrCancelledAccountClubSupporterSubscriptions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_id(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_id(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_reference(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_account(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscriptions":
				return ec.fieldContext_Account_clubSupporterSubscriptions(ctx, field)
			case "expiredClubSupporterSubscriptions":
				return ec.fieldContext_Account_expiredClubSupporterSubscriptions(ctx, field)
			case "savedPaymentMethods":
				return ec.fieldContext_Account_savedPaymentMethods(ctx, field)
			case "transactionsTotalCount":
				return ec.fieldContext_Account_transactionsTotalCount(ctx, field)
			case "transactionsPaymentCount":
				return ec.fieldContext_Account_transactionsPaymentCount(ctx, field)
			case "transactionsRefundCount":
				return ec.fieldContext_Account_transactionsRefundCount(ctx, field)
			case "transactionsChargebackCount":
				return ec.fieldContext_Account_transactionsChargebackCount(ctx, field)
			case "transactions":
				return ec.fieldContext_Account_transactions(ctx, field)
			case "hasActiveOrCancelledAccountClubSupporterSubscriptions":
				return ec.fieldContext_Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_club(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalNClub2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "supporterSubscriptionPrice":
				return ec.fieldContext_Club_supporterSubscriptionPrice(ctx, field)
			case "supporterSubscriptions":
				return ec.fieldContext_Club_supporterSubscriptions(ctx, field)
			case "transactionMetrics":
				return ec.fieldContext_Club_transactionMetrics(ctx, field)
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_transactions(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_transactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountActiveClubSupporterSubscription().Transactions(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["type"].(*types.AccountTransactionType), fc.Args["from"].(*time.Time), fc.Args["to"].(*time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountTransactionConnection)
	fc.Result = res
	return ec.marshalNAccountTransactionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_transactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AccountTransactionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountTransactionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransactionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AccountActiveClubSupporterSubscription_transactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_billingAmount(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_billingAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_billingAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_billingCurrency(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_billingCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_billingCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_supporterSince(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_supporterSince(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupporterSince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_supporterSince(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_lastBillingDate(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_lastBillingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastBillingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDate2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_lastBillingDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_nextBillingDate(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_nextBillingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextBillingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDate2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_nextBillingDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_paymentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PaymentMethod)
	fc.Result = res
	return ec.marshalNPaymentMethod2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPaymentMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_paymentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "card":
				return ec.fieldContext_PaymentMethod_card(ctx, field)
			case "billingAddress":
				return ec.fieldContext_PaymentMethod_billingAddress(ctx, field)
			case "billingContact":
				return ec.fieldContext_PaymentMethod_billingContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymentMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_ccbillSubscription(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_ccbillSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillSubscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CCBillSubscription)
	fc.Result = res
	return ec.marshalOCCBillSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_ccbillSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymentMethod":
				return ec.fieldContext_CCBillSubscription_paymentMethod(ctx, field)
			case "ccbillSubscriptionId":
				return ec.fieldContext_CCBillSubscription_ccbillSubscriptionId(ctx, field)
			case "email":
				return ec.fieldContext_CCBillSubscription_email(ctx, field)
			case "link":
				return ec.fieldContext_CCBillSubscription_link(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CCBillSubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_updatedAt(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountActiveClubSupporterSubscription_billingError(ctx context.Context, field graphql.CollectedField, obj *types.AccountActiveClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountActiveClubSupporterSubscription_billingError(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingError, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccountClubSupporterSubscriptionBillingError)
	fc.Result = res
	return ec.marshalOAccountClubSupporterSubscriptionBillingError2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionBillingError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountActiveClubSupporterSubscription_billingError(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountActiveClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "failedAt":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_failedAt(ctx, field)
			case "ccbillErrorText":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorText(ctx, field)
			case "ccbillErrorCode":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorCode(ctx, field)
			case "ccbillDeclineError":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillDeclineError(ctx, field)
			case "nextRetryDate":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_nextRetryDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountClubSupporterSubscriptionBillingError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_id(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_reference(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_account(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscriptions":
				return ec.fieldContext_Account_clubSupporterSubscriptions(ctx, field)
			case "expiredClubSupporterSubscriptions":
				return ec.fieldContext_Account_expiredClubSupporterSubscriptions(ctx, field)
			case "savedPaymentMethods":
				return ec.fieldContext_Account_savedPaymentMethods(ctx, field)
			case "transactionsTotalCount":
				return ec.fieldContext_Account_transactionsTotalCount(ctx, field)
			case "transactionsPaymentCount":
				return ec.fieldContext_Account_transactionsPaymentCount(ctx, field)
			case "transactionsRefundCount":
				return ec.fieldContext_Account_transactionsRefundCount(ctx, field)
			case "transactionsChargebackCount":
				return ec.fieldContext_Account_transactionsChargebackCount(ctx, field)
			case "transactions":
				return ec.fieldContext_Account_transactions(ctx, field)
			case "hasActiveOrCancelledAccountClubSupporterSubscriptions":
				return ec.fieldContext_Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_club(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalNClub2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "supporterSubscriptionPrice":
				return ec.fieldContext_Club_supporterSubscriptionPrice(ctx, field)
			case "supporterSubscriptions":
				return ec.fieldContext_Club_supporterSubscriptions(ctx, field)
			case "transactionMetrics":
				return ec.fieldContext_Club_transactionMetrics(ctx, field)
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_transactions(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_transactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountCancelledClubSupporterSubscription().Transactions(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["type"].(*types.AccountTransactionType), fc.Args["from"].(*time.Time), fc.Args["to"].(*time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountTransactionConnection)
	fc.Result = res
	return ec.marshalNAccountTransactionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_transactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AccountTransactionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountTransactionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransactionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AccountCancelledClubSupporterSubscription_transactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_billingAmount(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_billingAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_billingAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_billingCurrency(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_billingCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_billingCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_supporterSince(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_supporterSince(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupporterSince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_supporterSince(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_cancelledAt(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_cancelledAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancelledAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_cancelledAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_endDate(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDate2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_endDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_paymentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PaymentMethod)
	fc.Result = res
	return ec.marshalNPaymentMethod2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPaymentMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_paymentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "card":
				return ec.fieldContext_PaymentMethod_card(ctx, field)
			case "billingAddress":
				return ec.fieldContext_PaymentMethod_billingAddress(ctx, field)
			case "billingContact":
				return ec.fieldContext_PaymentMethod_billingContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymentMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_ccbillSubscription(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_ccbillSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillSubscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CCBillSubscription)
	fc.Result = res
	return ec.marshalOCCBillSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_ccbillSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymentMethod":
				return ec.fieldContext_CCBillSubscription_paymentMethod(ctx, field)
			case "ccbillSubscriptionId":
				return ec.fieldContext_CCBillSubscription_ccbillSubscriptionId(ctx, field)
			case "email":
				return ec.fieldContext_CCBillSubscription_email(ctx, field)
			case "link":
				return ec.fieldContext_CCBillSubscription_link(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CCBillSubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_updatedAt(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_billingError(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_billingError(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingError, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccountClubSupporterSubscriptionBillingError)
	fc.Result = res
	return ec.marshalOAccountClubSupporterSubscriptionBillingError2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionBillingError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_billingError(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "failedAt":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_failedAt(ctx, field)
			case "ccbillErrorText":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorText(ctx, field)
			case "ccbillErrorCode":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorCode(ctx, field)
			case "ccbillDeclineError":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillDeclineError(ctx, field)
			case "nextRetryDate":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_nextRetryDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountClubSupporterSubscriptionBillingError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription_cancellationReason(ctx context.Context, field graphql.CollectedField, obj *types.AccountCancelledClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountCancelledClubSupporterSubscription_cancellationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountCancelledClubSupporterSubscription().CancellationReason(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CancellationReason)
	fc.Result = res
	return ec.marshalOCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountCancelledClubSupporterSubscription_cancellationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountCancelledClubSupporterSubscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CancellationReason_id(ctx, field)
			case "reference":
				return ec.fieldContext_CancellationReason_reference(ctx, field)
			case "title":
				return ec.fieldContext_CancellationReason_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_CancellationReason_titleTranslations(ctx, field)
			case "deprecated":
				return ec.fieldContext_CancellationReason_deprecated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReason", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountClubSupporterSubscriptionBillingError_failedAt(ctx context.Context, field graphql.CollectedField, obj *types.AccountClubSupporterSubscriptionBillingError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountClubSupporterSubscriptionBillingError_failedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FailedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountClubSupporterSubscriptionBillingError_failedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountClubSupporterSubscriptionBillingError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountClubSupporterSubscriptionBillingError_ccbillErrorText(ctx context.Context, field graphql.CollectedField, obj *types.AccountClubSupporterSubscriptionBillingError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillErrorText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorText(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountClubSupporterSubscriptionBillingError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountClubSupporterSubscriptionBillingError_ccbillErrorCode(ctx context.Context, field graphql.CollectedField, obj *types.AccountClubSupporterSubscriptionBillingError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountClubSupporterSubscriptionBillingError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountClubSupporterSubscriptionBillingError_ccbillDeclineError(ctx context.Context, field graphql.CollectedField, obj *types.AccountClubSupporterSubscriptionBillingError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillDeclineError(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillDeclineError, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CCBillDeclineError)
	fc.Result = res
	return ec.marshalOCCBillDeclineError2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillDeclineError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillDeclineError(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountClubSupporterSubscriptionBillingError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CCBillDeclineError does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountClubSupporterSubscriptionBillingError_nextRetryDate(ctx context.Context, field graphql.CollectedField, obj *types.AccountClubSupporterSubscriptionBillingError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountClubSupporterSubscriptionBillingError_nextRetryDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextRetryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDate2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountClubSupporterSubscriptionBillingError_nextRetryDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountClubSupporterSubscriptionBillingError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountClubSupporterSubscriptionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.AccountClubSupporterSubscriptionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountClubSupporterSubscriptionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AccountClubSupporterSubscriptionEdge)
	fc.Result = res
	return ec.marshalNAccountClubSupporterSubscriptionEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountClubSupporterSubscriptionConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountClubSupporterSubscriptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_AccountClubSupporterSubscriptionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_AccountClubSupporterSubscriptionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountClubSupporterSubscriptionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountClubSupporterSubscriptionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.AccountClubSupporterSubscriptionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountClubSupporterSubscriptionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountClubSupporterSubscriptionConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountClubSupporterSubscriptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountClubSupporterSubscriptionEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.AccountClubSupporterSubscriptionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountClubSupporterSubscriptionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.AccountClubSupporterSubscription)
	fc.Result = res
	return ec.marshalNAccountClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountClubSupporterSubscriptionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountClubSupporterSubscriptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountClubSupporterSubscription does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountClubSupporterSubscriptionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.AccountClubSupporterSubscriptionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountClubSupporterSubscriptionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountClubSupporterSubscriptionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountClubSupporterSubscriptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_id(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_reference(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_account(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscriptions":
				return ec.fieldContext_Account_clubSupporterSubscriptions(ctx, field)
			case "expiredClubSupporterSubscriptions":
				return ec.fieldContext_Account_expiredClubSupporterSubscriptions(ctx, field)
			case "savedPaymentMethods":
				return ec.fieldContext_Account_savedPaymentMethods(ctx, field)
			case "transactionsTotalCount":
				return ec.fieldContext_Account_transactionsTotalCount(ctx, field)
			case "transactionsPaymentCount":
				return ec.fieldContext_Account_transactionsPaymentCount(ctx, field)
			case "transactionsRefundCount":
				return ec.fieldContext_Account_transactionsRefundCount(ctx, field)
			case "transactionsChargebackCount":
				return ec.fieldContext_Account_transactionsChargebackCount(ctx, field)
			case "transactions":
				return ec.fieldContext_Account_transactions(ctx, field)
			case "hasActiveOrCancelledAccountClubSupporterSubscriptions":
				return ec.fieldContext_Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_club(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalNClub2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "supporterSubscriptionPrice":
				return ec.fieldContext_Club_supporterSubscriptionPrice(ctx, field)
			case "supporterSubscriptions":
				return ec.fieldContext_Club_supporterSubscriptions(ctx, field)
			case "transactionMetrics":
				return ec.fieldContext_Club_transactionMetrics(ctx, field)
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_transactions(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_transactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountExpiredClubSupporterSubscription().Transactions(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["type"].(*types.AccountTransactionType), fc.Args["from"].(*time.Time), fc.Args["to"].(*time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountTransactionConnection)
	fc.Result = res
	return ec.marshalNAccountTransactionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_transactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AccountTransactionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountTransactionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransactionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AccountExpiredClubSupporterSubscription_transactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_billingAmount(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_billingAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_billingAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_billingCurrency(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_billingCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_billingCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_supporterSince(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_supporterSince(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupporterSince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_supporterSince(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_ccbillSubscription(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_ccbillSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillSubscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CCBillSubscription)
	fc.Result = res
	return ec.marshalOCCBillSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_ccbillSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymentMethod":
				return ec.fieldContext_CCBillSubscription_paymentMethod(ctx, field)
			case "ccbillSubscriptionId":
				return ec.fieldContext_CCBillSubscription_ccbillSubscriptionId(ctx, field)
			case "email":
				return ec.fieldContext_CCBillSubscription_email(ctx, field)
			case "link":
				return ec.fieldContext_CCBillSubscription_link(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CCBillSubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_updatedAt(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_expiredAt(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_expiredAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_expiredAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_billingError(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_billingError(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingError, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccountClubSupporterSubscriptionBillingError)
	fc.Result = res
	return ec.marshalOAccountClubSupporterSubscriptionBillingError2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionBillingError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_billingError(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "failedAt":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_failedAt(ctx, field)
			case "ccbillErrorText":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorText(ctx, field)
			case "ccbillErrorCode":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillErrorCode(ctx, field)
			case "ccbillDeclineError":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_ccbillDeclineError(ctx, field)
			case "nextRetryDate":
				return ec.fieldContext_AccountClubSupporterSubscriptionBillingError_nextRetryDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountClubSupporterSubscriptionBillingError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription_cancellationReason(ctx context.Context, field graphql.CollectedField, obj *types.AccountExpiredClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountExpiredClubSupporterSubscription_cancellationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountExpiredClubSupporterSubscription().CancellationReason(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CancellationReason)
	fc.Result = res
	return ec.marshalOCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountExpiredClubSupporterSubscription_cancellationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountExpiredClubSupporterSubscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CancellationReason_id(ctx, field)
			case "reference":
				return ec.fieldContext_CancellationReason_reference(ctx, field)
			case "title":
				return ec.fieldContext_CancellationReason_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_CancellationReason_titleTranslations(ctx, field)
			case "deprecated":
				return ec.fieldContext_CancellationReason_deprecated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReason", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountSavedPaymentMethod_id(ctx context.Context, field graphql.CollectedField, obj *types.AccountSavedPaymentMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountSavedPaymentMethod_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountSavedPaymentMethod_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountSavedPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountSavedPaymentMethod_account(ctx context.Context, field graphql.CollectedField, obj *types.AccountSavedPaymentMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountSavedPaymentMethod_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountSavedPaymentMethod_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountSavedPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscriptions":
				return ec.fieldContext_Account_clubSupporterSubscriptions(ctx, field)
			case "expiredClubSupporterSubscriptions":
				return ec.fieldContext_Account_expiredClubSupporterSubscriptions(ctx, field)
			case "savedPaymentMethods":
				return ec.fieldContext_Account_savedPaymentMethods(ctx, field)
			case "transactionsTotalCount":
				return ec.fieldContext_Account_transactionsTotalCount(ctx, field)
			case "transactionsPaymentCount":
				return ec.fieldContext_Account_transactionsPaymentCount(ctx, field)
			case "transactionsRefundCount":
				return ec.fieldContext_Account_transactionsRefundCount(ctx, field)
			case "transactionsChargebackCount":
				return ec.fieldContext_Account_transactionsChargebackCount(ctx, field)
			case "transactions":
				return ec.fieldContext_Account_transactions(ctx, field)
			case "hasActiveOrCancelledAccountClubSupporterSubscriptions":
				return ec.fieldContext_Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountSavedPaymentMethod_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *types.AccountSavedPaymentMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountSavedPaymentMethod_paymentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PaymentMethod)
	fc.Result = res
	return ec.marshalNPaymentMethod2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPaymentMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountSavedPaymentMethod_paymentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountSavedPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "card":
				return ec.fieldContext_PaymentMethod_card(ctx, field)
			case "billingAddress":
				return ec.fieldContext_PaymentMethod_billingAddress(ctx, field)
			case "billingContact":
				return ec.fieldContext_PaymentMethod_billingContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymentMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountSavedPaymentMethod_ccbillSubscription(ctx context.Context, field graphql.CollectedField, obj *types.AccountSavedPaymentMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountSavedPaymentMethod_ccbillSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillSubscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CCBillSubscription)
	fc.Result = res
	return ec.marshalOCCBillSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountSavedPaymentMethod_ccbillSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountSavedPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymentMethod":
				return ec.fieldContext_CCBillSubscription_paymentMethod(ctx, field)
			case "ccbillSubscriptionId":
				return ec.fieldContext_CCBillSubscription_ccbillSubscriptionId(ctx, field)
			case "email":
				return ec.fieldContext_CCBillSubscription_email(ctx, field)
			case "link":
				return ec.fieldContext_CCBillSubscription_link(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CCBillSubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountSavedPaymentMethod_updatedAt(ctx context.Context, field graphql.CollectedField, obj *types.AccountSavedPaymentMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountSavedPaymentMethod_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountSavedPaymentMethod_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountSavedPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountSavedPaymentMethodConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.AccountSavedPaymentMethodConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountSavedPaymentMethodConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AccountSavedPaymentMethodEdge)
	fc.Result = res
	return ec.marshalNAccountSavedPaymentMethodEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountSavedPaymentMethodEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountSavedPaymentMethodConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountSavedPaymentMethodConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_AccountSavedPaymentMethodEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_AccountSavedPaymentMethodEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountSavedPaymentMethodEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountSavedPaymentMethodConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.AccountSavedPaymentMethodConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountSavedPaymentMethodConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountSavedPaymentMethodConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountSavedPaymentMethodConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountSavedPaymentMethodEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.AccountSavedPaymentMethodEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountSavedPaymentMethodEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountSavedPaymentMethod)
	fc.Result = res
	return ec.marshalNAccountSavedPaymentMethod2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountSavedPaymentMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountSavedPaymentMethodEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountSavedPaymentMethodEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountSavedPaymentMethod_id(ctx, field)
			case "account":
				return ec.fieldContext_AccountSavedPaymentMethod_account(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_AccountSavedPaymentMethod_paymentMethod(ctx, field)
			case "ccbillSubscription":
				return ec.fieldContext_AccountSavedPaymentMethod_ccbillSubscription(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AccountSavedPaymentMethod_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountSavedPaymentMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountSavedPaymentMethodEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.AccountSavedPaymentMethodEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountSavedPaymentMethodEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountSavedPaymentMethodEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountSavedPaymentMethodEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_id(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_reference(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_type(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.AccountTransactionType)
	fc.Result = res
	return ec.marshalNAccountTransactionType2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountTransactionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_events(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AccountTransactionEvent)
	fc.Result = res
	return ec.marshalNAccountTransactionEvent2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountTransactionEvent_id(ctx, field)
			case "amount":
				return ec.fieldContext_AccountTransactionEvent_amount(ctx, field)
			case "currency":
				return ec.fieldContext_AccountTransactionEvent_currency(ctx, field)
			case "reason":
				return ec.fieldContext_AccountTransactionEvent_reason(ctx, field)
			case "createdAt":
				return ec.fieldContext_AccountTransactionEvent_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransactionEvent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_amount(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_totalRefunded(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_totalRefunded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRefunded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_totalRefunded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_currency(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_billedAtDate(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_billedAtDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BilledAtDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDate2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_billedAtDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_nextBillingDate(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_nextBillingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextBillingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODate2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_nextBillingDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_paymentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PaymentMethod)
	fc.Result = res
	return ec.marshalNPaymentMethod2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPaymentMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_paymentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "card":
				return ec.fieldContext_PaymentMethod_card(ctx, field)
			case "billingAddress":
				return ec.fieldContext_PaymentMethod_billingAddress(ctx, field)
			case "billingContact":
				return ec.fieldContext_PaymentMethod_billingContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymentMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_createdAt(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_ccbillTransaction(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_ccbillTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillTransaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CCBillTransaction)
	fc.Result = res
	return ec.marshalOCCBillTransaction2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_ccbillTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ccbillSubscriptionId":
				return ec.fieldContext_CCBillTransaction_ccbillSubscriptionId(ctx, field)
			case "ccbillTransactionId":
				return ec.fieldContext_CCBillTransaction_ccbillTransactionId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CCBillTransaction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransaction_clubSupporterSubscription(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransaction_clubSupporterSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountTransaction().ClubSupporterSubscription(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.AccountClubSupporterSubscription)
	fc.Result = res
	return ec.marshalOAccountClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransaction_clubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransaction",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountClubSupporterSubscription does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransactionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransactionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransactionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AccountTransactionEdge)
	fc.Result = res
	return ec.marshalNAccountTransactionEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransactionConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransactionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_AccountTransactionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_AccountTransactionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransactionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransactionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransactionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransactionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransactionConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransactionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransactionEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransactionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransactionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountTransaction)
	fc.Result = res
	return ec.marshalNAccountTransaction2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransactionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransactionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountTransaction_id(ctx, field)
			case "reference":
				return ec.fieldContext_AccountTransaction_reference(ctx, field)
			case "type":
				return ec.fieldContext_AccountTransaction_type(ctx, field)
			case "events":
				return ec.fieldContext_AccountTransaction_events(ctx, field)
			case "amount":
				return ec.fieldContext_AccountTransaction_amount(ctx, field)
			case "totalRefunded":
				return ec.fieldContext_AccountTransaction_totalRefunded(ctx, field)
			case "currency":
				return ec.fieldContext_AccountTransaction_currency(ctx, field)
			case "billedAtDate":
				return ec.fieldContext_AccountTransaction_billedAtDate(ctx, field)
			case "nextBillingDate":
				return ec.fieldContext_AccountTransaction_nextBillingDate(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_AccountTransaction_paymentMethod(ctx, field)
			case "createdAt":
				return ec.fieldContext_AccountTransaction_createdAt(ctx, field)
			case "ccbillTransaction":
				return ec.fieldContext_AccountTransaction_ccbillTransaction(ctx, field)
			case "clubSupporterSubscription":
				return ec.fieldContext_AccountTransaction_clubSupporterSubscription(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransaction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransactionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransactionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransactionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransactionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransactionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransactionEvent_id(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransactionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransactionEvent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransactionEvent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransactionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransactionEvent_amount(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransactionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransactionEvent_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransactionEvent_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransactionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransactionEvent_currency(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransactionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransactionEvent_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransactionEvent_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransactionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransactionEvent_reason(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransactionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransactionEvent_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransactionEvent_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransactionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountTransactionEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *types.AccountTransactionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountTransactionEvent_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountTransactionEvent_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountTransactionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AspectRatio_width(ctx context.Context, field graphql.CollectedField, obj *graphql1.AspectRatio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AspectRatio_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AspectRatio_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AspectRatio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AspectRatio_height(ctx context.Context, field graphql.CollectedField, obj *graphql1.AspectRatio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AspectRatio_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AspectRatio_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AspectRatio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BecomeClubSupporterWithAccountSavedPaymentMethodPayload_ccbillTransactionToken(ctx context.Context, field graphql.CollectedField, obj *types.BecomeClubSupporterWithAccountSavedPaymentMethodPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BecomeClubSupporterWithAccountSavedPaymentMethodPayload_ccbillTransactionToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillTransactionToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BecomeClubSupporterWithAccountSavedPaymentMethodPayload_ccbillTransactionToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BecomeClubSupporterWithAccountSavedPaymentMethodPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingAddress_addressLine1(ctx context.Context, field graphql.CollectedField, obj *types.BillingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingAddress_addressLine1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingAddress_addressLine1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingAddress_city(ctx context.Context, field graphql.CollectedField, obj *types.BillingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingAddress_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingAddress_city(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingAddress_state(ctx context.Context, field graphql.CollectedField, obj *types.BillingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingAddress_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingAddress_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingAddress_country(ctx context.Context, field graphql.CollectedField, obj *types.BillingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingAddress_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingAddress_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingAddress_postalCode(ctx context.Context, field graphql.CollectedField, obj *types.BillingAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingAddress_postalCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingAddress_postalCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingContact_firstName(ctx context.Context, field graphql.CollectedField, obj *types.BillingContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingContact_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingContact_firstName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingContact_lastName(ctx context.Context, field graphql.CollectedField, obj *types.BillingContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingContact_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingContact_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingContact_email(ctx context.Context, field graphql.CollectedField, obj *types.BillingContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingContact_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingContact_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingContact_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *types.BillingContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingContact_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingContact_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscription_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscription_paymentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscription_paymentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscription_ccbillSubscriptionId(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscription_ccbillSubscriptionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillSubscriptionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscription_ccbillSubscriptionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscription_email(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscription_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscription_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscription_link(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscription_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscription_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_id(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_status(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.CCBillSubscriptionStatus)
	fc.Result = res
	return ec.marshalNCCBillSubscriptionStatus2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscriptionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CCBillSubscriptionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_paymentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PaymentMethod)
	fc.Result = res
	return ec.marshalNPaymentMethod2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPaymentMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_paymentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "card":
				return ec.fieldContext_PaymentMethod_card(ctx, field)
			case "billingAddress":
				return ec.fieldContext_PaymentMethod_billingAddress(ctx, field)
			case "billingContact":
				return ec.fieldContext_PaymentMethod_billingContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymentMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_club(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "supporterSubscriptionPrice":
				return ec.fieldContext_Club_supporterSubscriptionPrice(ctx, field)
			case "supporterSubscriptions":
				return ec.fieldContext_Club_supporterSubscriptions(ctx, field)
			case "transactionMetrics":
				return ec.fieldContext_Club_transactionMetrics(ctx, field)
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_account(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscriptions":
				return ec.fieldContext_Account_clubSupporterSubscriptions(ctx, field)
			case "expiredClubSupporterSubscriptions":
				return ec.fieldContext_Account_expiredClubSupporterSubscriptions(ctx, field)
			case "savedPaymentMethods":
				return ec.fieldContext_Account_savedPaymentMethods(ctx, field)
			case "transactionsTotalCount":
				return ec.fieldContext_Account_transactionsTotalCount(ctx, field)
			case "transactionsPaymentCount":
				return ec.fieldContext_Account_transactionsPaymentCount(ctx, field)
			case "transactionsRefundCount":
				return ec.fieldContext_Account_transactionsRefundCount(ctx, field)
			case "transactionsChargebackCount":
				return ec.fieldContext_Account_transactionsChargebackCount(ctx, field)
			case "transactions":
				return ec.fieldContext_Account_transactions(ctx, field)
			case "hasActiveOrCancelledAccountClubSupporterSubscriptions":
				return ec.fieldContext_Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_subscriptionInitialPrice(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_subscriptionInitialPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionInitialPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_subscriptionInitialPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_subscriptionRecurringPrice(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_subscriptionRecurringPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionRecurringPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_subscriptionRecurringPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_subscriptionCurrency(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_subscriptionCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_subscriptionCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_billedInitialPrice(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_billedInitialPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BilledInitialPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_billedInitialPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_billedRecurringPrice(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_billedRecurringPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BilledRecurringPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_billedRecurringPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_billedCurrency(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_billedCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BilledCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_billedCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_accountingInitialPrice(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_accountingInitialPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingInitialPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_accountingInitialPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_accountingRecurringPrice(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_accountingRecurringPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingRecurringPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_accountingRecurringPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_accountingCurrency(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_accountingCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountingCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_accountingCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_isRecurring(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_isRecurring(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRecurring, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_isRecurring(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_isDuplicate(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_isDuplicate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDuplicate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_isDuplicate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_timesRebilled(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_timesRebilled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimesRebilled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_timesRebilled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_chargebacksIssued(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_chargebacksIssued(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargebacksIssued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_chargebacksIssued(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_refundsIssued(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_refundsIssued(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefundsIssued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_refundsIssued(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_voidsIssued(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_voidsIssued(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoidsIssued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_voidsIssued(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_signupDate(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_signupDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignupDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_signupDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_expirationDate(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_expirationDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpirationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_expirationDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_cancelDate(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_cancelDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancelDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_cancelDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillSubscriptionDetails_updatedAt(ctx context.Context, field graphql.CollectedField, obj *types.CCBillSubscriptionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillSubscriptionDetails_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillSubscriptionDetails_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillSubscriptionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillTransaction_ccbillSubscriptionId(ctx context.Context, field graphql.CollectedField, obj *types.CCBillTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillTransaction_ccbillSubscriptionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillSubscriptionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillTransaction_ccbillSubscriptionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillTransaction_ccbillTransactionId(ctx context.Context, field graphql.CollectedField, obj *types.CCBillTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillTransaction_ccbillTransactionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcbillTransactionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillTransaction_ccbillTransactionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillTransactionDetails_id(ctx context.Context, field graphql.CollectedField, obj *types.CCBillTransactionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillTransactionDetails_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillTransactionDetails_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillTransactionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillTransactionDetails_approved(ctx context.Context, field graphql.CollectedField, obj *types.CCBillTransactionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillTransactionDetails_approved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillTransactionDetails_approved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillTransactionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillTransactionDetails_declineError(ctx context.Context, field graphql.CollectedField, obj *types.CCBillTransactionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillTransactionDetails_declineError(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeclineError, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CCBillDeclineError)
	fc.Result = res
	return ec.marshalOCCBillDeclineError2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillDeclineError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillTransactionDetails_declineError(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillTransactionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CCBillDeclineError does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillTransactionDetails_declineCode(ctx context.Context, field graphql.CollectedField, obj *types.CCBillTransactionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillTransactionDetails_declineCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeclineCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillTransactionDetails_declineCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillTransactionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillTransactionDetails_declineText(ctx context.Context, field graphql.CollectedField, obj *types.CCBillTransactionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillTransactionDetails_declineText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeclineText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillTransactionDetails_declineText(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillTransactionDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CCBillTransactionDetails_linkedAccountClubSupporterSubscription(ctx context.Context, field graphql.CollectedField, obj *types.CCBillTransactionDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CCBillTransactionDetails_linkedAccountClubSupporterSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CCBillTransactionDetails().LinkedAccountClubSupporterSubscription(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.AccountClubSupporterSubscription)
	fc.Result = res
	return ec.marshalOAccountClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CCBillTransactionDetails_linkedAccountClubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CCBillTransactionDetails",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountClubSupporterSubscription does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancelAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx context.Context, field graphql.CollectedField, obj *types.CancelAccountClubSupporterSubscriptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancelAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClubSupporterSubscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.AccountClubSupporterSubscription)
	fc.Result = res
	return ec.marshalOAccountClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancelAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancelAccountClubSupporterSubscriptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountClubSupporterSubscription does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancelActiveSupporterSubscriptionsForClubPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.CancelActiveSupporterSubscriptionsForClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancelActiveSupporterSubscriptionsForClubPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancelActiveSupporterSubscriptionsForClubPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancelActiveSupporterSubscriptionsForClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "supporterSubscriptionPrice":
				return ec.fieldContext_Club_supporterSubscriptionPrice(ctx, field)
			case "supporterSubscriptions":
				return ec.fieldContext_Club_supporterSubscriptions(ctx, field)
			case "transactionMetrics":
				return ec.fieldContext_Club_transactionMetrics(ctx, field)
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancellationReason_id(ctx context.Context, field graphql.CollectedField, obj *types.CancellationReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancellationReason_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancellationReason_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancellationReason",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancellationReason_reference(ctx context.Context, field graphql.CollectedField, obj *types.CancellationReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancellationReason_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancellationReason_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancellationReason",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancellationReason_title(ctx context.Context, field graphql.CollectedField, obj *types.CancellationReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancellationReason_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CancellationReason().Title(rctx, obj, fc.Args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancellationReason_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancellationReason",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_CancellationReason_title_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _CancellationReason_titleTranslations(ctx context.Context, field graphql.CollectedField, obj *types.CancellationReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancellationReason_titleTranslations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TitleTranslations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.Translation)
	fc.Result = res
	return ec.marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancellationReason_titleTranslations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancellationReason",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Translation_language(ctx, field)
			case "text":
				return ec.fieldContext_Translation_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Translation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancellationReason_deprecated(ctx context.Context, field graphql.CollectedField, obj *types.CancellationReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancellationReason_deprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancellationReason_deprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancellationReason",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancellationReasonConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.CancellationReasonConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancellationReasonConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.CancellationReasonEdge)
	fc.Result = res
	return ec.marshalNCancellationReasonEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReasonEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancellationReasonConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancellationReasonConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CancellationReasonEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CancellationReasonEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReasonEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancellationReasonConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.CancellationReasonConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancellationReasonConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancellationReasonConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancellationReasonConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancellationReasonEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.CancellationReasonEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancellationReasonEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CancellationReason)
	fc.Result = res
	return ec.marshalNCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancellationReasonEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancellationReasonEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CancellationReason_id(ctx, field)
			case "reference":
				return ec.fieldContext_CancellationReason_reference(ctx, field)
			case "title":
				return ec.fieldContext_CancellationReason_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_CancellationReason_titleTranslations(ctx, field)
			case "deprecated":
				return ec.fieldContext_CancellationReason_deprecated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReason", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancellationReasonEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.CancellationReasonEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancellationReasonEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancellationReasonEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancellationReasonEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Card_last4(ctx context.Context, field graphql.CollectedField, obj *types.Card) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Card_last4(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Last4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Card_last4(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Card",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Card_expiration(ctx context.Context, field graphql.CollectedField, obj *types.Card) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Card_expiration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expiration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Card_expiration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Card",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Card_type(ctx context.Context, field graphql.CollectedField, obj *types.Card) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Card_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.CardType)
	fc.Result = res
	return ec.marshalNCardType2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCardType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Card_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Card",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CardType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_supporterSubscriptionPrice(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_supporterSubscriptionPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().SupporterSubscriptionPrice(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.LocalizedPricingPoint)
	fc.Result = res
	return ec.marshalNLocalizedPricingPoint2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐLocalizedPricingPoint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_supporterSubscriptionPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "localizedPrice":
				return ec.fieldContext_LocalizedPricingPoint_localizedPrice(ctx, field)
			case "prices":
				return ec.fieldContext_LocalizedPricingPoint_prices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LocalizedPricingPoint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_supporterSubscriptions(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_supporterSubscriptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().SupporterSubscriptions(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["status"].([]types.AccountClubSupporterSubscriptionStatus))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountClubSupporterSubscriptionConnection)
	fc.Result = res
	return ec.marshalNAccountClubSupporterSubscriptionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_supporterSubscriptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AccountClubSupporterSubscriptionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AccountClubSupporterSubscriptionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountClubSupporterSubscriptionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Club_supporterSubscriptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Club_transactionMetrics(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_transactionMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().TransactionMetrics(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubTransactionMetricConnection)
	fc.Result = res
	return ec.marshalNClubTransactionMetricConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTransactionMetricConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_transactionMetrics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ClubTransactionMetricConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ClubTransactionMetricConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubTransactionMetricConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Club_transactionMetrics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Club_id(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMember_clubSupporterSubscription(ctx context.Context, field graphql.CollectedField, obj *types.ClubMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMember_clubSupporterSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ClubMember().ClubSupporterSubscription(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.AccountClubSupporterSubscription)
	fc.Result = res
	return ec.marshalOAccountClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMember_clubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMember",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountClubSupporterSubscription does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMember_id(ctx context.Context, field graphql.CollectedField, obj *types.ClubMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMember_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMember_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_month(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_year(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_currency(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_totalTransactionsCount(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_totalTransactionsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTransactionsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_totalTransactionsCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_totalTransactionsAmount(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_totalTransactionsAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTransactionsAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_totalTransactionsAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_chargebacksCount(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_chargebacksCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargebacksCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_chargebacksCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_chargebacksAmount(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_chargebacksAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargebacksAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_chargebacksAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_chargebacksCountRatio(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_chargebacksCountRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargebacksCountRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_chargebacksCountRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_chargebacksAmountRatio(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_chargebacksAmountRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargebacksAmountRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_chargebacksAmountRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_refundsCount(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_refundsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefundsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_refundsCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_refundsAmount(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_refundsAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefundsAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_refundsAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_refundsCountRatio(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_refundsCountRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefundsCountRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_refundsCountRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetric_refundsAmountRatio(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetric_refundsAmountRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefundsAmountRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetric_refundsAmountRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetricConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetricConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetricConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ClubTransactionMetricEdge)
	fc.Result = res
	return ec.marshalNClubTransactionMetricEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTransactionMetricEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetricConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetricConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ClubTransactionMetricEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ClubTransactionMetricEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubTransactionMetricEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetricConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetricConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetricConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetricConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetricConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetricEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetricEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetricEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubTransactionMetric)
	fc.Result = res
	return ec.marshalNClubTransactionMetric2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTransactionMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetricEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetricEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_ClubTransactionMetric_month(ctx, field)
			case "year":
				return ec.fieldContext_ClubTransactionMetric_year(ctx, field)
			case "currency":
				return ec.fieldContext_ClubTransactionMetric_currency(ctx, field)
			case "totalTransactionsCount":
				return ec.fieldContext_ClubTransactionMetric_totalTransactionsCount(ctx, field)
			case "totalTransactionsAmount":
				return ec.fieldContext_ClubTransactionMetric_totalTransactionsAmount(ctx, field)
			case "chargebacksCount":
				return ec.fieldContext_ClubTransactionMetric_chargebacksCount(ctx, field)
			case "chargebacksAmount":
				return ec.fieldContext_ClubTransactionMetric_chargebacksAmount(ctx, field)
			case "chargebacksCountRatio":
				return ec.fieldContext_ClubTransactionMetric_chargebacksCountRatio(ctx, field)
			case "chargebacksAmountRatio":
				return ec.fieldContext_ClubTransactionMetric_chargebacksAmountRatio(ctx, field)
			case "refundsCount":
				return ec.fieldContext_ClubTransactionMetric_refundsCount(ctx, field)
			case "refundsAmount":
				return ec.fieldContext_ClubTransactionMetric_refundsAmount(ctx, field)
			case "refundsCountRatio":
				return ec.fieldContext_ClubTransactionMetric_refundsCountRatio(ctx, field)
			case "refundsAmountRatio":
				return ec.fieldContext_ClubTransactionMetric_refundsAmountRatio(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubTransactionMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTransactionMetricEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ClubTransactionMetricEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTransactionMetricEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTransactionMetricEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTransactionMetricEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColorPalette_percent(ctx context.Context, field graphql.CollectedField, obj *graphql1.ColorPalette) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColorPalette_percent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColorPalette_percent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColorPalette",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColorPalette_red(ctx context.Context, field graphql.CollectedField, obj *graphql1.ColorPalette) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColorPalette_red(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Red, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColorPalette_red(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColorPalette",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColorPalette_green(ctx context.Context, field graphql.CollectedField, obj *graphql1.ColorPalette) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColorPalette_green(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Green, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColorPalette_green(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColorPalette",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColorPalette_blue(ctx context.Context, field graphql.CollectedField, obj *graphql1.ColorPalette) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColorPalette_blue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColorPalette_blue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColorPalette",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCancellationReasonPayload_cancellationReason(ctx context.Context, field graphql.CollectedField, obj *types.CreateCancellationReasonPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCancellationReasonPayload_cancellationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancellationReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CancellationReason)
	fc.Result = res
	return ec.marshalOCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCancellationReasonPayload_cancellationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCancellationReasonPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CancellationReason_id(ctx, field)
			case "reference":
				return ec.fieldContext_CancellationReason_reference(ctx, field)
			case "title":
				return ec.fieldContext_CancellationReason_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_CancellationReason_titleTranslations(ctx, field)
			case "deprecated":
				return ec.fieldContext_CancellationReason_deprecated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReason", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteAccountSavedPaymentMethodPayload_deletedAccountSavedPaymentMethodId(ctx context.Context, field graphql.CollectedField, obj *types.DeleteAccountSavedPaymentMethodPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteAccountSavedPaymentMethodPayload_deletedAccountSavedPaymentMethodId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAccountSavedPaymentMethodID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteAccountSavedPaymentMethodPayload_deletedAccountSavedPaymentMethodId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteAccountSavedPaymentMethodPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findAccountByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findAccountByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindAccountByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findAccountByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscriptions":
				return ec.fieldContext_Account_clubSupporterSubscriptions(ctx, field)
			case "expiredClubSupporterSubscriptions":
				return ec.fieldContext_Account_expiredClubSupporterSubscriptions(ctx, field)
			case "savedPaymentMethods":
				return ec.fieldContext_Account_savedPaymentMethods(ctx, field)
			case "transactionsTotalCount":
				return ec.fieldContext_Account_transactionsTotalCount(ctx, field)
			case "transactionsPaymentCount":
				return ec.fieldContext_Account_transactionsPaymentCount(ctx, field)
			case "transactionsRefundCount":
				return ec.fieldContext_Account_transactionsRefundCount(ctx, field)
			case "transactionsChargebackCount":
				return ec.fieldContext_Account_transactionsChargebackCount(ctx, field)
			case "transactions":
				return ec.fieldContext_Account_transactions(ctx, field)
			case "hasActiveOrCancelledAccountClubSupporterSubscriptions":
				return ec.fieldContext_Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findAccountByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findAccountActiveClubSupporterSubscriptionByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findAccountActiveClubSupporterSubscriptionByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindAccountActiveClubSupporterSubscriptionByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountActiveClubSupporterSubscription)
	fc.Result = res
	return ec.marshalNAccountActiveClubSupporterSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountActiveClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findAccountActiveClubSupporterSubscriptionByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_id(ctx, field)
			case "reference":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_reference(ctx, field)
			case "account":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_account(ctx, field)
			case "club":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_club(ctx, field)
			case "transactions":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_transactions(ctx, field)
			case "billingAmount":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_billingAmount(ctx, field)
			case "billingCurrency":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_billingCurrency(ctx, field)
			case "supporterSince":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_supporterSince(ctx, field)
			case "lastBillingDate":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_lastBillingDate(ctx, field)
			case "nextBillingDate":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_nextBillingDate(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_paymentMethod(ctx, field)
			case "ccbillSubscription":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_ccbillSubscription(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_updatedAt(ctx, field)
			case "billingError":
				return ec.fieldContext_AccountActiveClubSupporterSubscription_billingError(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountActiveClubSupporterSubscription", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findAccountActiveClubSupporterSubscriptionByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findAccountCancelledClubSupporterSubscriptionByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findAccountCancelledClubSupporterSubscriptionByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindAccountCancelledClubSupporterSubscriptionByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountCancelledClubSupporterSubscription)
	fc.Result = res
	return ec.marshalNAccountCancelledClubSupporterSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountCancelledClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findAccountCancelledClubSupporterSubscriptionByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_id(ctx, field)
			case "reference":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_reference(ctx, field)
			case "account":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_account(ctx, field)
			case "club":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_club(ctx, field)
			case "transactions":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_transactions(ctx, field)
			case "billingAmount":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_billingAmount(ctx, field)
			case "billingCurrency":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_billingCurrency(ctx, field)
			case "supporterSince":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_supporterSince(ctx, field)
			case "cancelledAt":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_cancelledAt(ctx, field)
			case "endDate":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_endDate(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_paymentMethod(ctx, field)
			case "ccbillSubscription":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_ccbillSubscription(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_updatedAt(ctx, field)
			case "billingError":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_billingError(ctx, field)
			case "cancellationReason":
				return ec.fieldContext_AccountCancelledClubSupporterSubscription_cancellationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountCancelledClubSupporterSubscription", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findAccountCancelledClubSupporterSubscriptionByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findAccountExpiredClubSupporterSubscriptionByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findAccountExpiredClubSupporterSubscriptionByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindAccountExpiredClubSupporterSubscriptionByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountExpiredClubSupporterSubscription)
	fc.Result = res
	return ec.marshalNAccountExpiredClubSupporterSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountExpiredClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findAccountExpiredClubSupporterSubscriptionByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_id(ctx, field)
			case "reference":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_reference(ctx, field)
			case "account":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_account(ctx, field)
			case "club":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_club(ctx, field)
			case "transactions":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_transactions(ctx, field)
			case "billingAmount":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_billingAmount(ctx, field)
			case "billingCurrency":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_billingCurrency(ctx, field)
			case "supporterSince":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_supporterSince(ctx, field)
			case "ccbillSubscription":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_ccbillSubscription(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_updatedAt(ctx, field)
			case "expiredAt":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_expiredAt(ctx, field)
			case "billingError":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_billingError(ctx, field)
			case "cancellationReason":
				return ec.fieldContext_AccountExpiredClubSupporterSubscription_cancellationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountExpiredClubSupporterSubscription", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findAccountExpiredClubSupporterSubscriptionByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findAccountTransactionByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findAccountTransactionByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindAccountTransactionByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AccountTransaction)
	fc.Result = res
	return ec.marshalNAccountTransaction2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findAccountTransactionByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountTransaction_id(ctx, field)
			case "reference":
				return ec.fieldContext_AccountTransaction_reference(ctx, field)
			case "type":
				return ec.fieldContext_AccountTransaction_type(ctx, field)
			case "events":
				return ec.fieldContext_AccountTransaction_events(ctx, field)
			case "amount":
				return ec.fieldContext_AccountTransaction_amount(ctx, field)
			case "totalRefunded":
				return ec.fieldContext_AccountTransaction_totalRefunded(ctx, field)
			case "currency":
				return ec.fieldContext_AccountTransaction_currency(ctx, field)
			case "billedAtDate":
				return ec.fieldContext_AccountTransaction_billedAtDate(ctx, field)
			case "nextBillingDate":
				return ec.fieldContext_AccountTransaction_nextBillingDate(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_AccountTransaction_paymentMethod(ctx, field)
			case "createdAt":
				return ec.fieldContext_AccountTransaction_createdAt(ctx, field)
			case "ccbillTransaction":
				return ec.fieldContext_AccountTransaction_ccbillTransaction(ctx, field)
			case "clubSupporterSubscription":
				return ec.fieldContext_AccountTransaction_clubSupporterSubscription(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findAccountTransactionByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findCancellationReasonByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findCancellationReasonByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindCancellationReasonByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CancellationReason)
	fc.Result = res
	return ec.marshalNCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findCancellationReasonByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CancellationReason_id(ctx, field)
			case "reference":
				return ec.fieldContext_CancellationReason_reference(ctx, field)
			case "title":
				return ec.fieldContext_CancellationReason_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_CancellationReason_titleTranslations(ctx, field)
			case "deprecated":
				return ec.fieldContext_CancellationReason_deprecated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReason", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findCancellationReasonByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findClubByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findClubByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindClubByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalNClub2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findClubByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "supporterSubscriptionPrice":
				return ec.fieldContext_Club_supporterSubscriptionPrice(ctx, field)
			case "supporterSubscriptions":
				return ec.fieldContext_Club_supporterSubscriptions(ctx, field)
			case "transactionMetrics":
				return ec.fieldContext_Club_transactionMetrics(ctx, field)
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findClubByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findClubMemberByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findClubMemberByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindClubMemberByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubMember)
	fc.Result = res
	return ec.marshalNClubMember2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findClubMemberByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscription":
				return ec.fieldContext_ClubMember_clubSupporterSubscription(ctx, field)
			case "id":
				return ec.fieldContext_ClubMember_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubMember", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findClubMemberByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscription_id(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscription_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscription_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscription_account(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscription_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscription_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscriptions":
				return ec.fieldContext_Account_clubSupporterSubscriptions(ctx, field)
			case "expiredClubSupporterSubscriptions":
				return ec.fieldContext_Account_expiredClubSupporterSubscriptions(ctx, field)
			case "savedPaymentMethods":
				return ec.fieldContext_Account_savedPaymentMethods(ctx, field)
			case "transactionsTotalCount":
				return ec.fieldContext_Account_transactionsTotalCount(ctx, field)
			case "transactionsPaymentCount":
				return ec.fieldContext_Account_transactionsPaymentCount(ctx, field)
			case "transactionsRefundCount":
				return ec.fieldContext_Account_transactionsRefundCount(ctx, field)
			case "transactionsChargebackCount":
				return ec.fieldContext_Account_transactionsChargebackCount(ctx, field)
			case "transactions":
				return ec.fieldContext_Account_transactions(ctx, field)
			case "hasActiveOrCancelledAccountClubSupporterSubscriptions":
				return ec.fieldContext_Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscription_club(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscription_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalNClub2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscription_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "supporterSubscriptionPrice":
				return ec.fieldContext_Club_supporterSubscriptionPrice(ctx, field)
			case "supporterSubscriptions":
				return ec.fieldContext_Club_supporterSubscriptions(ctx, field)
			case "transactionMetrics":
				return ec.fieldContext_Club_transactionMetrics(ctx, field)
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscription_supporterSince(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscription_supporterSince(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupporterSince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscription_supporterSince(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscription_expiredAt(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscription_expiredAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscription_expiredAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscription_cancelledAt(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscription_cancelledAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancelledAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscription_cancelledAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscriptionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscriptionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscriptionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ExpiredAccountClubSupporterSubscriptionEdge)
	fc.Result = res
	return ec.marshalNExpiredAccountClubSupporterSubscriptionEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExpiredAccountClubSupporterSubscriptionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscriptionConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscriptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscriptionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscriptionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExpiredAccountClubSupporterSubscriptionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscriptionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscriptionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscriptionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscriptionConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscriptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscriptionEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscriptionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscriptionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ExpiredAccountClubSupporterSubscription)
	fc.Result = res
	return ec.marshalNExpiredAccountClubSupporterSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExpiredAccountClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscriptionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscriptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscription_id(ctx, field)
			case "account":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscription_account(ctx, field)
			case "club":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscription_club(ctx, field)
			case "supporterSince":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscription_supporterSince(ctx, field)
			case "expiredAt":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscription_expiredAt(ctx, field)
			case "cancelledAt":
				return ec.fieldContext_ExpiredAccountClubSupporterSubscription_cancelledAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExpiredAccountClubSupporterSubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscriptionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ExpiredAccountClubSupporterSubscriptionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExpiredAccountClubSupporterSubscriptionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExpiredAccountClubSupporterSubscriptionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExpiredAccountClubSupporterSubscriptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExtendAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx context.Context, field graphql.CollectedField, obj *types.ExtendAccountClubSupporterSubscriptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExtendAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClubSupporterSubscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.AccountClubSupporterSubscription)
	fc.Result = res
	return ec.marshalOAccountClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExtendAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExtendAccountClubSupporterSubscriptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountClubSupporterSubscription does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenerateCCBillClubSupporterPaymentLinkPayload_paymentLink(ctx context.Context, field graphql.CollectedField, obj *types.GenerateCCBillClubSupporterPaymentLinkPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenerateCCBillClubSupporterPaymentLinkPayload_paymentLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖoverdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenerateCCBillClubSupporterPaymentLinkPayload_paymentLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenerateCCBillClubSupporterPaymentLinkPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload_link(ctx context.Context, field graphql.CollectedField, obj *types.GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖoverdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenerateClubSupporterRefundReceiptFromAccountTransactionPayload_link(ctx context.Context, field graphql.CollectedField, obj *types.GenerateClubSupporterRefundReceiptFromAccountTransactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenerateClubSupporterRefundReceiptFromAccountTransactionPayload_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖoverdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenerateClubSupporterRefundReceiptFromAccountTransactionPayload_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenerateClubSupporterRefundReceiptFromAccountTransactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GenerateRefundAmountForAccountTransactionPayload_refundAmount(ctx context.Context, field graphql.CollectedField, obj *types.GenerateRefundAmountForAccountTransactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GenerateRefundAmountForAccountTransactionPayload_refundAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefundAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.RefundAmount)
	fc.Result = res
	return ec.marshalORefundAmount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐRefundAmount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GenerateRefundAmountForAccountTransactionPayload_refundAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GenerateRefundAmountForAccountTransactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "proratedAmount":
				return ec.fieldContext_RefundAmount_proratedAmount(ctx, field)
			case "maximumAmount":
				return ec.fieldContext_RefundAmount_maximumAmount(ctx, field)
			case "currency":
				return ec.fieldContext_RefundAmount_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RefundAmount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HLSVideoContainer_url(ctx context.Context, field graphql.CollectedField, obj *graphql1.HLSVideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HLSVideoContainer_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HLSVideoContainer_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HLSVideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMedia_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMedia_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMedia_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMedia_variants(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMedia_variants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaVariants)
	fc.Result = res
	return ec.marshalNImageMediaVariants2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaVariants(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMedia_variants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mini":
				return ec.fieldContext_ImageMediaVariants_mini(ctx, field)
			case "icon":
				return ec.fieldContext_ImageMediaVariants_icon(ctx, field)
			case "thumbnail":
				return ec.fieldContext_ImageMediaVariants_thumbnail(ctx, field)
			case "thumbnailHd":
				return ec.fieldContext_ImageMediaVariants_thumbnailHd(ctx, field)
			case "small":
				return ec.fieldContext_ImageMediaVariants_small(ctx, field)
			case "medium":
				return ec.fieldContext_ImageMediaVariants_medium(ctx, field)
			case "large":
				return ec.fieldContext_ImageMediaVariants_large(ctx, field)
			case "hd":
				return ec.fieldContext_ImageMediaVariants_hd(ctx, field)
			case "banner":
				return ec.fieldContext_ImageMediaVariants_banner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaVariants", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMedia_original(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMedia_original(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Original, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMedia_original(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMedia_colorPalettes(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMedia_colorPalettes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorPalettes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.ColorPalette)
	fc.Result = res
	return ec.marshalNColorPalette2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐColorPaletteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMedia_colorPalettes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "percent":
				return ec.fieldContext_ColorPalette_percent(ctx, field)
			case "red":
				return ec.fieldContext_ColorPalette_red(ctx, field)
			case "green":
				return ec.fieldContext_ColorPalette_green(ctx, field)
			case "blue":
				return ec.fieldContext_ColorPalette_blue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ColorPalette", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaAccess_width(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaAccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaAccess_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaAccess_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaAccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaAccess_height(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaAccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaAccess_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaAccess_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaAccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaAccess_url(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaAccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaAccess_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaAccess_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaAccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_mini(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_mini(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mini, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_mini(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_icon(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_thumbnail(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_thumbnailHd(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_thumbnailHd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailHd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_thumbnailHd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_small(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_small(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Small, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_small(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_medium(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_medium(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Medium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_medium(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_large(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_large(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Large, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_large(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_hd(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_hd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_hd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_banner(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_banner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Banner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_banner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Language_locale(ctx context.Context, field graphql.CollectedField, obj *graphql1.Language) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Language_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNBCP472string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Language_locale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Language",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BCP47 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Language_name(ctx context.Context, field graphql.CollectedField, obj *graphql1.Language) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Language_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Language_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Language",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocalizedPricingPoint_localizedPrice(ctx context.Context, field graphql.CollectedField, obj *types.LocalizedPricingPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocalizedPricingPoint_localizedPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocalizedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Price)
	fc.Result = res
	return ec.marshalNPrice2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocalizedPricingPoint_localizedPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocalizedPricingPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LocalizedPricingPoint_prices(ctx context.Context, field graphql.CollectedField, obj *types.LocalizedPricingPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LocalizedPricingPoint_prices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Price)
	fc.Result = res
	return ec.marshalNPrice2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPriceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LocalizedPricingPoint_prices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LocalizedPricingPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MP4VideoContainer_url(ctx context.Context, field graphql.CollectedField, obj *graphql1.MP4VideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MP4VideoContainer_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MP4VideoContainer_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MP4VideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MP4VideoContainer_bitrate(ctx context.Context, field graphql.CollectedField, obj *graphql1.MP4VideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MP4VideoContainer_bitrate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bitrate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MP4VideoContainer_bitrate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MP4VideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MP4VideoContainer_width(ctx context.Context, field graphql.CollectedField, obj *graphql1.MP4VideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MP4VideoContainer_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MP4VideoContainer_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MP4VideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MP4VideoContainer_height(ctx context.Context, field graphql.CollectedField, obj *graphql1.MP4VideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MP4VideoContainer_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MP4VideoContainer_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MP4VideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaProgress_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.MediaProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaProgress_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaProgress_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_generateCCBillClubSupporterPaymentLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_generateCCBillClubSupporterPaymentLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GenerateCCBillClubSupporterPaymentLink(rctx, fc.Args["input"].(types.GenerateCCBillClubSupporterPaymentLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.GenerateCCBillClubSupporterPaymentLinkPayload)
	fc.Result = res
	return ec.marshalOGenerateCCBillClubSupporterPaymentLinkPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateCCBillClubSupporterPaymentLinkPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_generateCCBillClubSupporterPaymentLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymentLink":
				return ec.fieldContext_GenerateCCBillClubSupporterPaymentLinkPayload_paymentLink(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GenerateCCBillClubSupporterPaymentLinkPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_generateCCBillClubSupporterPaymentLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_becomeClubSupporterWithAccountSavedPaymentMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_becomeClubSupporterWithAccountSavedPaymentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BecomeClubSupporterWithAccountSavedPaymentMethod(rctx, fc.Args["input"].(types.BecomeClubSupporterWithAccountSavedPaymentMethodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.BecomeClubSupporterWithAccountSavedPaymentMethodPayload)
	fc.Result = res
	return ec.marshalOBecomeClubSupporterWithAccountSavedPaymentMethodPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐBecomeClubSupporterWithAccountSavedPaymentMethodPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_becomeClubSupporterWithAccountSavedPaymentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ccbillTransactionToken":
				return ec.fieldContext_BecomeClubSupporterWithAccountSavedPaymentMethodPayload_ccbillTransactionToken(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BecomeClubSupporterWithAccountSavedPaymentMethodPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_becomeClubSupporterWithAccountSavedPaymentMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cancelAccountClubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cancelAccountClubSupporterSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelAccountClubSupporterSubscription(rctx, fc.Args["input"].(types.CancelAccountClubSupporterSubscriptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CancelAccountClubSupporterSubscriptionPayload)
	fc.Result = res
	return ec.marshalOCancelAccountClubSupporterSubscriptionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancelAccountClubSupporterSubscriptionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cancelAccountClubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscription":
				return ec.fieldContext_CancelAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancelAccountClubSupporterSubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cancelAccountClubSupporterSubscription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refundAccountTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_refundAccountTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RefundAccountTransaction(rctx, fc.Args["input"].(types.RefundAccountTransactionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.RefundAccountTransactionPayload)
	fc.Result = res
	return ec.marshalORefundAccountTransactionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐRefundAccountTransactionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_refundAccountTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accountTransaction":
				return ec.fieldContext_RefundAccountTransactionPayload_accountTransaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RefundAccountTransactionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_refundAccountTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_extendAccountClubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_extendAccountClubSupporterSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ExtendAccountClubSupporterSubscription(rctx, fc.Args["input"].(types.ExtendAccountClubSupporterSubscriptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ExtendAccountClubSupporterSubscriptionPayload)
	fc.Result = res
	return ec.marshalOExtendAccountClubSupporterSubscriptionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExtendAccountClubSupporterSubscriptionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_extendAccountClubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubSupporterSubscription":
				return ec.fieldContext_ExtendAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExtendAccountClubSupporterSubscriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_extendAccountClubSupporterSubscription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_generateRefundAmountForAccountTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_generateRefundAmountForAccountTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GenerateRefundAmountForAccountTransaction(rctx, fc.Args["input"].(types.GenerateRefundAmountForAccountTransactionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.GenerateRefundAmountForAccountTransactionPayload)
	fc.Result = res
	return ec.marshalOGenerateRefundAmountForAccountTransactionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateRefundAmountForAccountTransactionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_generateRefundAmountForAccountTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "refundAmount":
				return ec.fieldContext_GenerateRefundAmountForAccountTransactionPayload_refundAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GenerateRefundAmountForAccountTransactionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_generateRefundAmountForAccountTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAccountSavedPaymentMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAccountSavedPaymentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAccountSavedPaymentMethod(rctx, fc.Args["input"].(types.DeleteAccountSavedPaymentMethodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.DeleteAccountSavedPaymentMethodPayload)
	fc.Result = res
	return ec.marshalODeleteAccountSavedPaymentMethodPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐDeleteAccountSavedPaymentMethodPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAccountSavedPaymentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deletedAccountSavedPaymentMethodId":
				return ec.fieldContext_DeleteAccountSavedPaymentMethodPayload_deletedAccountSavedPaymentMethodId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteAccountSavedPaymentMethodPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAccountSavedPaymentMethod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_generateClubSupporterPaymentReceiptFromAccountTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_generateClubSupporterPaymentReceiptFromAccountTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GenerateClubSupporterPaymentReceiptFromAccountTransaction(rctx, fc.Args["input"].(types.GenerateClubSupporterPaymentReceiptFromAccountTransactionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload)
	fc.Result = res
	return ec.marshalOGenerateClubSupporterPaymentReceiptFromAccountTransactionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateClubSupporterPaymentReceiptFromAccountTransactionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_generateClubSupporterPaymentReceiptFromAccountTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "link":
				return ec.fieldContext_GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload_link(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_generateClubSupporterPaymentReceiptFromAccountTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_generateClubSupporterRefundReceiptFromAccountTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_generateClubSupporterRefundReceiptFromAccountTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GenerateClubSupporterRefundReceiptFromAccountTransaction(rctx, fc.Args["input"].(types.GenerateClubSupporterRefundReceiptFromAccountTransactionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.GenerateClubSupporterRefundReceiptFromAccountTransactionPayload)
	fc.Result = res
	return ec.marshalOGenerateClubSupporterRefundReceiptFromAccountTransactionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateClubSupporterRefundReceiptFromAccountTransactionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_generateClubSupporterRefundReceiptFromAccountTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "link":
				return ec.fieldContext_GenerateClubSupporterRefundReceiptFromAccountTransactionPayload_link(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GenerateClubSupporterRefundReceiptFromAccountTransactionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_generateClubSupporterRefundReceiptFromAccountTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cancelActiveSupporterSubscriptionsForClub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cancelActiveSupporterSubscriptionsForClub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelActiveSupporterSubscriptionsForClub(rctx, fc.Args["input"].(types.CancelActiveSupporterSubscriptionsForClubInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CancelActiveSupporterSubscriptionsForClubPayload)
	fc.Result = res
	return ec.marshalOCancelActiveSupporterSubscriptionsForClubPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancelActiveSupporterSubscriptionsForClubPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cancelActiveSupporterSubscriptionsForClub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_CancelActiveSupporterSubscriptionsForClubPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancelActiveSupporterSubscriptionsForClubPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cancelActiveSupporterSubscriptionsForClub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCancellationReason(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCancellationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCancellationReason(rctx, fc.Args["input"].(types.CreateCancellationReasonInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateCancellationReasonPayload)
	fc.Result = res
	return ec.marshalOCreateCancellationReasonPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCancellationReasonPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCancellationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cancellationReason":
				return ec.fieldContext_CreateCancellationReasonPayload_cancellationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateCancellationReasonPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCancellationReason_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCancellationReasonTitle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCancellationReasonTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCancellationReasonTitle(rctx, fc.Args["input"].(types.UpdateCancellationReasonTitleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateCancellationReasonTitlePayload)
	fc.Result = res
	return ec.marshalOUpdateCancellationReasonTitlePayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCancellationReasonTitlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCancellationReasonTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cancellationReason":
				return ec.fieldContext_UpdateCancellationReasonTitlePayload_cancellationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCancellationReasonTitlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCancellationReasonTitle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCancellationReasonDeprecated(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCancellationReasonDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCancellationReasonDeprecated(rctx, fc.Args["input"].(types.UpdateCancellationReasonDeprecatedInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateCancellationReasonDeprecatedPayload)
	fc.Result = res
	return ec.marshalOUpdateCancellationReasonDeprecatedPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCancellationReasonDeprecatedPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCancellationReasonDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cancellationReason":
				return ec.fieldContext_UpdateCancellationReasonDeprecatedPayload_cancellationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCancellationReasonDeprecatedPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCancellationReasonDeprecated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *relay.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *relay.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *relay.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *relay.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentMethod_card(ctx context.Context, field graphql.CollectedField, obj *types.PaymentMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentMethod_card(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Card, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Card)
	fc.Result = res
	return ec.marshalNCard2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCard(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentMethod_card(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "last4":
				return ec.fieldContext_Card_last4(ctx, field)
			case "expiration":
				return ec.fieldContext_Card_expiration(ctx, field)
			case "type":
				return ec.fieldContext_Card_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Card", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentMethod_billingAddress(ctx context.Context, field graphql.CollectedField, obj *types.PaymentMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentMethod_billingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.BillingAddress)
	fc.Result = res
	return ec.marshalOBillingAddress2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐBillingAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentMethod_billingAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "addressLine1":
				return ec.fieldContext_BillingAddress_addressLine1(ctx, field)
			case "city":
				return ec.fieldContext_BillingAddress_city(ctx, field)
			case "state":
				return ec.fieldContext_BillingAddress_state(ctx, field)
			case "country":
				return ec.fieldContext_BillingAddress_country(ctx, field)
			case "postalCode":
				return ec.fieldContext_BillingAddress_postalCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BillingAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymentMethod_billingContact(ctx context.Context, field graphql.CollectedField, obj *types.PaymentMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymentMethod_billingContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.BillingContact)
	fc.Result = res
	return ec.marshalOBillingContact2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐBillingContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymentMethod_billingContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_BillingContact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_BillingContact_lastName(ctx, field)
			case "email":
				return ec.fieldContext_BillingContact_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_BillingContact_phoneNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BillingContact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Price_amount(ctx context.Context, field graphql.CollectedField, obj *types.Price) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Price_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Price_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Price",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Price_currency(ctx context.Context, field graphql.CollectedField, obj *types.Price) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Price_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Price_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Price",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cancellationReason(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cancellationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CancellationReason(rctx, fc.Args["reference"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CancellationReason)
	fc.Result = res
	return ec.marshalOCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cancellationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CancellationReason_id(ctx, field)
			case "reference":
				return ec.fieldContext_CancellationReason_reference(ctx, field)
			case "title":
				return ec.fieldContext_CancellationReason_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_CancellationReason_titleTranslations(ctx, field)
			case "deprecated":
				return ec.fieldContext_CancellationReason_deprecated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReason", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cancellationReason_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_cancellationReasons(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cancellationReasons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CancellationReasons(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["deprecated"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CancellationReasonConnection)
	fc.Result = res
	return ec.marshalNCancellationReasonConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReasonConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cancellationReasons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CancellationReasonConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CancellationReasonConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReasonConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cancellationReasons_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_ccbillSubscriptionDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_ccbillSubscriptionDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CcbillSubscriptionDetails(rctx, fc.Args["ccbillSubscriptionId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CCBillSubscriptionDetails)
	fc.Result = res
	return ec.marshalOCCBillSubscriptionDetails2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscriptionDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_ccbillSubscriptionDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CCBillSubscriptionDetails_id(ctx, field)
			case "status":
				return ec.fieldContext_CCBillSubscriptionDetails_status(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_CCBillSubscriptionDetails_paymentMethod(ctx, field)
			case "club":
				return ec.fieldContext_CCBillSubscriptionDetails_club(ctx, field)
			case "account":
				return ec.fieldContext_CCBillSubscriptionDetails_account(ctx, field)
			case "subscriptionInitialPrice":
				return ec.fieldContext_CCBillSubscriptionDetails_subscriptionInitialPrice(ctx, field)
			case "subscriptionRecurringPrice":
				return ec.fieldContext_CCBillSubscriptionDetails_subscriptionRecurringPrice(ctx, field)
			case "subscriptionCurrency":
				return ec.fieldContext_CCBillSubscriptionDetails_subscriptionCurrency(ctx, field)
			case "billedInitialPrice":
				return ec.fieldContext_CCBillSubscriptionDetails_billedInitialPrice(ctx, field)
			case "billedRecurringPrice":
				return ec.fieldContext_CCBillSubscriptionDetails_billedRecurringPrice(ctx, field)
			case "billedCurrency":
				return ec.fieldContext_CCBillSubscriptionDetails_billedCurrency(ctx, field)
			case "accountingInitialPrice":
				return ec.fieldContext_CCBillSubscriptionDetails_accountingInitialPrice(ctx, field)
			case "accountingRecurringPrice":
				return ec.fieldContext_CCBillSubscriptionDetails_accountingRecurringPrice(ctx, field)
			case "accountingCurrency":
				return ec.fieldContext_CCBillSubscriptionDetails_accountingCurrency(ctx, field)
			case "isRecurring":
				return ec.fieldContext_CCBillSubscriptionDetails_isRecurring(ctx, field)
			case "isDuplicate":
				return ec.fieldContext_CCBillSubscriptionDetails_isDuplicate(ctx, field)
			case "timesRebilled":
				return ec.fieldContext_CCBillSubscriptionDetails_timesRebilled(ctx, field)
			case "chargebacksIssued":
				return ec.fieldContext_CCBillSubscriptionDetails_chargebacksIssued(ctx, field)
			case "refundsIssued":
				return ec.fieldContext_CCBillSubscriptionDetails_refundsIssued(ctx, field)
			case "voidsIssued":
				return ec.fieldContext_CCBillSubscriptionDetails_voidsIssued(ctx, field)
			case "signupDate":
				return ec.fieldContext_CCBillSubscriptionDetails_signupDate(ctx, field)
			case "expirationDate":
				return ec.fieldContext_CCBillSubscriptionDetails_expirationDate(ctx, field)
			case "cancelDate":
				return ec.fieldContext_CCBillSubscriptionDetails_cancelDate(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CCBillSubscriptionDetails_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CCBillSubscriptionDetails", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_ccbillSubscriptionDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_accountClubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_accountClubSupporterSubscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountClubSupporterSubscription(rctx, fc.Args["reference"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.AccountClubSupporterSubscription)
	fc.Result = res
	return ec.marshalOAccountClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_accountClubSupporterSubscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountClubSupporterSubscription does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_accountClubSupporterSubscription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_accountTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_accountTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountTransaction(rctx, fc.Args["reference"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccountTransaction)
	fc.Result = res
	return ec.marshalOAccountTransaction2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_accountTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountTransaction_id(ctx, field)
			case "reference":
				return ec.fieldContext_AccountTransaction_reference(ctx, field)
			case "type":
				return ec.fieldContext_AccountTransaction_type(ctx, field)
			case "events":
				return ec.fieldContext_AccountTransaction_events(ctx, field)
			case "amount":
				return ec.fieldContext_AccountTransaction_amount(ctx, field)
			case "totalRefunded":
				return ec.fieldContext_AccountTransaction_totalRefunded(ctx, field)
			case "currency":
				return ec.fieldContext_AccountTransaction_currency(ctx, field)
			case "billedAtDate":
				return ec.fieldContext_AccountTransaction_billedAtDate(ctx, field)
			case "nextBillingDate":
				return ec.fieldContext_AccountTransaction_nextBillingDate(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_AccountTransaction_paymentMethod(ctx, field)
			case "createdAt":
				return ec.fieldContext_AccountTransaction_createdAt(ctx, field)
			case "ccbillTransaction":
				return ec.fieldContext_AccountTransaction_ccbillTransaction(ctx, field)
			case "clubSupporterSubscription":
				return ec.fieldContext_AccountTransaction_clubSupporterSubscription(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_accountTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_ccbillTransactionDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_ccbillTransactionDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CcbillTransactionDetails(rctx, fc.Args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CCBillTransactionDetails)
	fc.Result = res
	return ec.marshalOCCBillTransactionDetails2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillTransactionDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_ccbillTransactionDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CCBillTransactionDetails_id(ctx, field)
			case "approved":
				return ec.fieldContext_CCBillTransactionDetails_approved(ctx, field)
			case "declineError":
				return ec.fieldContext_CCBillTransactionDetails_declineError(ctx, field)
			case "declineCode":
				return ec.fieldContext_CCBillTransactionDetails_declineCode(ctx, field)
			case "declineText":
				return ec.fieldContext_CCBillTransactionDetails_declineText(ctx, field)
			case "linkedAccountClubSupporterSubscription":
				return ec.fieldContext_CCBillTransactionDetails_linkedAccountClubSupporterSubscription(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CCBillTransactionDetails", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_ccbillTransactionDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query__entities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__entities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve_entities(ctx, fc.Args["representations"].([]map[string]interface{})), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]fedruntime.Entity)
	fc.Result = res
	return ec.marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__entities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type _Entity does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query__entities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__service(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__service(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sdl":
				return ec.fieldContext__Service_sdl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _Service", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RawMedia_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.RawMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RawMedia_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RawMedia_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RawMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RawMedia_originalFileName(ctx context.Context, field graphql.CollectedField, obj *graphql1.RawMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RawMedia_originalFileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalFileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RawMedia_originalFileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RawMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RawMedia_failed(ctx context.Context, field graphql.CollectedField, obj *graphql1.RawMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RawMedia_failed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Failed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RawMedia_failed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RawMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RawMedia_progress(ctx context.Context, field graphql.CollectedField, obj *graphql1.RawMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RawMedia_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.MediaProgress)
	fc.Result = res
	return ec.marshalOMediaProgress2ᚖoverdollᚋlibrariesᚋgraphqlᚐMediaProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RawMedia_progress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RawMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MediaProgress_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaProgress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RefundAccountTransactionPayload_accountTransaction(ctx context.Context, field graphql.CollectedField, obj *types.RefundAccountTransactionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RefundAccountTransactionPayload_accountTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountTransaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AccountTransaction)
	fc.Result = res
	return ec.marshalOAccountTransaction2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RefundAccountTransactionPayload_accountTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RefundAccountTransactionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountTransaction_id(ctx, field)
			case "reference":
				return ec.fieldContext_AccountTransaction_reference(ctx, field)
			case "type":
				return ec.fieldContext_AccountTransaction_type(ctx, field)
			case "events":
				return ec.fieldContext_AccountTransaction_events(ctx, field)
			case "amount":
				return ec.fieldContext_AccountTransaction_amount(ctx, field)
			case "totalRefunded":
				return ec.fieldContext_AccountTransaction_totalRefunded(ctx, field)
			case "currency":
				return ec.fieldContext_AccountTransaction_currency(ctx, field)
			case "billedAtDate":
				return ec.fieldContext_AccountTransaction_billedAtDate(ctx, field)
			case "nextBillingDate":
				return ec.fieldContext_AccountTransaction_nextBillingDate(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_AccountTransaction_paymentMethod(ctx, field)
			case "createdAt":
				return ec.fieldContext_AccountTransaction_createdAt(ctx, field)
			case "ccbillTransaction":
				return ec.fieldContext_AccountTransaction_ccbillTransaction(ctx, field)
			case "clubSupporterSubscription":
				return ec.fieldContext_AccountTransaction_clubSupporterSubscription(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountTransaction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RefundAmount_proratedAmount(ctx context.Context, field graphql.CollectedField, obj *types.RefundAmount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RefundAmount_proratedAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProratedAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RefundAmount_proratedAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RefundAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RefundAmount_maximumAmount(ctx context.Context, field graphql.CollectedField, obj *types.RefundAmount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RefundAmount_maximumAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RefundAmount_maximumAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RefundAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RefundAmount_currency(ctx context.Context, field graphql.CollectedField, obj *types.RefundAmount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RefundAmount_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Currency)
	fc.Result = res
	return ec.marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RefundAmount_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RefundAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_type(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.ResourceType)
	fc.Result = res
	return ec.marshalNResourceType2overdollᚋlibrariesᚋgraphqlᚐResourceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ResourceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_processed(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_processed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_processed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_urls(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_urls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Urls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.ResourceURL)
	fc.Result = res
	return ec.marshalNResourceUrl2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURLᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_urls(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_ResourceUrl_url(ctx, field)
			case "mimeType":
				return ec.fieldContext_ResourceUrl_mimeType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResourceUrl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_width(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_height(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_videoDuration(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_videoDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_videoDuration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_videoThumbnail(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_videoThumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoThumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.ResourceURL)
	fc.Result = res
	return ec.marshalOResourceUrl2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURL(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_videoThumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_ResourceUrl_url(ctx, field)
			case "mimeType":
				return ec.fieldContext_ResourceUrl_mimeType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResourceUrl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_videoNoAudio(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_videoNoAudio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoNoAudio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_videoNoAudio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_preview(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_preview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_preview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_progress(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.ResourceProgress)
	fc.Result = res
	return ec.marshalOResourceProgress2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_progress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ResourceProgress_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResourceProgress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_failed(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_failed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Failed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_failed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceProgress_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.ResourceProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceProgress_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceProgress_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceUrl_url(ctx context.Context, field graphql.CollectedField, obj *graphql1.ResourceURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceUrl_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceUrl_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceUrl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceUrl_mimeType(ctx context.Context, field graphql.CollectedField, obj *graphql1.ResourceURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceUrl_mimeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceUrl_mimeType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceUrl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Translation_language(ctx context.Context, field graphql.CollectedField, obj *graphql1.Translation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Translation_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.Language)
	fc.Result = res
	return ec.marshalNLanguage2ᚖoverdollᚋlibrariesᚋgraphqlᚐLanguage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Translation_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Translation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "locale":
				return ec.fieldContext_Language_locale(ctx, field)
			case "name":
				return ec.fieldContext_Language_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Language", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Translation_text(ctx context.Context, field graphql.CollectedField, obj *graphql1.Translation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Translation_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Translation_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Translation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCancellationReasonDeprecatedPayload_cancellationReason(ctx context.Context, field graphql.CollectedField, obj *types.UpdateCancellationReasonDeprecatedPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCancellationReasonDeprecatedPayload_cancellationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancellationReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CancellationReason)
	fc.Result = res
	return ec.marshalOCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCancellationReasonDeprecatedPayload_cancellationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCancellationReasonDeprecatedPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CancellationReason_id(ctx, field)
			case "reference":
				return ec.fieldContext_CancellationReason_reference(ctx, field)
			case "title":
				return ec.fieldContext_CancellationReason_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_CancellationReason_titleTranslations(ctx, field)
			case "deprecated":
				return ec.fieldContext_CancellationReason_deprecated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReason", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCancellationReasonTitlePayload_cancellationReason(ctx context.Context, field graphql.CollectedField, obj *types.UpdateCancellationReasonTitlePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCancellationReasonTitlePayload_cancellationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancellationReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CancellationReason)
	fc.Result = res
	return ec.marshalOCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCancellationReasonTitlePayload_cancellationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCancellationReasonTitlePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CancellationReason_id(ctx, field)
			case "reference":
				return ec.fieldContext_CancellationReason_reference(ctx, field)
			case "title":
				return ec.fieldContext_CancellationReason_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_CancellationReason_titleTranslations(ctx, field)
			case "deprecated":
				return ec.fieldContext_CancellationReason_deprecated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CancellationReason", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_cover(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_cover(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cover, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMedia)
	fc.Result = res
	return ec.marshalNImageMedia2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_cover(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ImageMedia_id(ctx, field)
			case "variants":
				return ec.fieldContext_ImageMedia_variants(ctx, field)
			case "original":
				return ec.fieldContext_ImageMedia_original(ctx, field)
			case "colorPalettes":
				return ec.fieldContext_ImageMedia_colorPalettes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMedia", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_aspectRatio(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_aspectRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AspectRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.AspectRatio)
	fc.Result = res
	return ec.marshalNAspectRatio2ᚖoverdollᚋlibrariesᚋgraphqlᚐAspectRatio(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_aspectRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_AspectRatio_width(ctx, field)
			case "height":
				return ec.fieldContext_AspectRatio_height(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AspectRatio", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_containers(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_containers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Containers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]graphql1.VideoContainer)
	fc.Result = res
	return ec.marshalNVideoContainer2ᚕoverdollᚋlibrariesᚋgraphqlᚐVideoContainerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_containers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VideoContainer does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_duration(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_hasAudio(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_hasAudio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAudio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_hasAudio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__Service_sdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__Service_sdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBecomeClubSupporterWithAccountSavedPaymentMethodInput(ctx context.Context, obj interface{}) (types.BecomeClubSupporterWithAccountSavedPaymentMethodInput, error) {
	var it types.BecomeClubSupporterWithAccountSavedPaymentMethodInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
		case "savedPaymentMethodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("savedPaymentMethodId"))
			it.SavedPaymentMethodID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCancelAccountClubSupporterSubscriptionInput(ctx context.Context, obj interface{}) (types.CancelAccountClubSupporterSubscriptionInput, error) {
	var it types.CancelAccountClubSupporterSubscriptionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubSupporterSubscriptionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubSupporterSubscriptionId"))
			it.ClubSupporterSubscriptionID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "cancellationReasonId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cancellationReasonId"))
			it.CancellationReasonID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCancelActiveSupporterSubscriptionsForClubInput(ctx context.Context, obj interface{}) (types.CancelActiveSupporterSubscriptionsForClubInput, error) {
	var it types.CancelActiveSupporterSubscriptionsForClubInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCancellationReasonInput(ctx context.Context, obj interface{}) (types.CreateCancellationReasonInput, error) {
	var it types.CreateCancellationReasonInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteAccountSavedPaymentMethodInput(ctx context.Context, obj interface{}) (types.DeleteAccountSavedPaymentMethodInput, error) {
	var it types.DeleteAccountSavedPaymentMethodInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "savedPaymentMethodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("savedPaymentMethodId"))
			it.SavedPaymentMethodID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExtendAccountClubSupporterSubscriptionInput(ctx context.Context, obj interface{}) (types.ExtendAccountClubSupporterSubscriptionInput, error) {
	var it types.ExtendAccountClubSupporterSubscriptionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubSupporterSubscriptionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubSupporterSubscriptionId"))
			it.ClubSupporterSubscriptionID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "days":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("days"))
			it.Days, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGenerateCCBillClubSupporterPaymentLinkInput(ctx context.Context, obj interface{}) (types.GenerateCCBillClubSupporterPaymentLinkInput, error) {
	var it types.GenerateCCBillClubSupporterPaymentLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
		case "savePaymentDetailsForLater":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("savePaymentDetailsForLater"))
			it.SavePaymentDetailsForLater, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGenerateClubSupporterPaymentReceiptFromAccountTransactionInput(ctx context.Context, obj interface{}) (types.GenerateClubSupporterPaymentReceiptFromAccountTransactionInput, error) {
	var it types.GenerateClubSupporterPaymentReceiptFromAccountTransactionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "transactionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transactionId"))
			it.TransactionID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGenerateClubSupporterRefundReceiptFromAccountTransactionInput(ctx context.Context, obj interface{}) (types.GenerateClubSupporterRefundReceiptFromAccountTransactionInput, error) {
	var it types.GenerateClubSupporterRefundReceiptFromAccountTransactionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "transactionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transactionId"))
			it.TransactionID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "transactionEventId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transactionEventId"))
			it.TransactionEventID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGenerateRefundAmountForAccountTransactionInput(ctx context.Context, obj interface{}) (types.GenerateRefundAmountForAccountTransactionInput, error) {
	var it types.GenerateRefundAmountForAccountTransactionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "accountTransactionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountTransactionId"))
			it.AccountTransactionID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRefundAccountTransactionInput(ctx context.Context, obj interface{}) (types.RefundAccountTransactionInput, error) {
	var it types.RefundAccountTransactionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "accountTransactionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountTransactionId"))
			it.AccountTransactionID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCancellationReasonDeprecatedInput(ctx context.Context, obj interface{}) (types.UpdateCancellationReasonDeprecatedInput, error) {
	var it types.UpdateCancellationReasonDeprecatedInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cancellationReasonId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cancellationReasonId"))
			it.CancellationReasonID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "deprecated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deprecated"))
			it.Deprecated, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCancellationReasonTitleInput(ctx context.Context, obj interface{}) (types.UpdateCancellationReasonTitleInput, error) {
	var it types.UpdateCancellationReasonTitleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cancellationReasonId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cancellationReasonId"))
			it.CancellationReasonID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNBCP472string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _AccountClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, obj types.AccountClubSupporterSubscription) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.AccountActiveClubSupporterSubscription:
		return ec._AccountActiveClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountActiveClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountActiveClubSupporterSubscription(ctx, sel, obj)
	case types.AccountCancelledClubSupporterSubscription:
		return ec._AccountCancelledClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountCancelledClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountCancelledClubSupporterSubscription(ctx, sel, obj)
	case types.AccountExpiredClubSupporterSubscription:
		return ec._AccountExpiredClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountExpiredClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountExpiredClubSupporterSubscription(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IAccountClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, obj types.IAccountClubSupporterSubscription) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.AccountActiveClubSupporterSubscription:
		return ec._AccountActiveClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountActiveClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountActiveClubSupporterSubscription(ctx, sel, obj)
	case types.AccountCancelledClubSupporterSubscription:
		return ec._AccountCancelledClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountCancelledClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountCancelledClubSupporterSubscription(ctx, sel, obj)
	case types.AccountExpiredClubSupporterSubscription:
		return ec._AccountExpiredClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountExpiredClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountExpiredClubSupporterSubscription(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Media(ctx context.Context, sel ast.SelectionSet, obj graphql1.Media) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graphql1.VideoMedia:
		return ec._VideoMedia(ctx, sel, &obj)
	case *graphql1.VideoMedia:
		if obj == nil {
			return graphql.Null
		}
		return ec._VideoMedia(ctx, sel, obj)
	case graphql1.ImageMedia:
		return ec._ImageMedia(ctx, sel, &obj)
	case *graphql1.ImageMedia:
		if obj == nil {
			return graphql.Null
		}
		return ec._ImageMedia(ctx, sel, obj)
	case graphql1.RawMedia:
		return ec._RawMedia(ctx, sel, &obj)
	case *graphql1.RawMedia:
		if obj == nil {
			return graphql.Null
		}
		return ec._RawMedia(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj relay.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.AccountTransaction:
		return ec._AccountTransaction(ctx, sel, &obj)
	case *types.AccountTransaction:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountTransaction(ctx, sel, obj)
	case types.AccountActiveClubSupporterSubscription:
		return ec._AccountActiveClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountActiveClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountActiveClubSupporterSubscription(ctx, sel, obj)
	case types.AccountCancelledClubSupporterSubscription:
		return ec._AccountCancelledClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountCancelledClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountCancelledClubSupporterSubscription(ctx, sel, obj)
	case types.AccountExpiredClubSupporterSubscription:
		return ec._AccountExpiredClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountExpiredClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountExpiredClubSupporterSubscription(ctx, sel, obj)
	case types.CancellationReason:
		return ec._CancellationReason(ctx, sel, &obj)
	case *types.CancellationReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._CancellationReason(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _VideoContainer(ctx context.Context, sel ast.SelectionSet, obj graphql1.VideoContainer) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graphql1.HLSVideoContainer:
		return ec._HLSVideoContainer(ctx, sel, &obj)
	case *graphql1.HLSVideoContainer:
		if obj == nil {
			return graphql.Null
		}
		return ec._HLSVideoContainer(ctx, sel, obj)
	case graphql1.MP4VideoContainer:
		return ec._MP4VideoContainer(ctx, sel, &obj)
	case *graphql1.MP4VideoContainer:
		if obj == nil {
			return graphql.Null
		}
		return ec._MP4VideoContainer(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) __Entity(ctx context.Context, sel ast.SelectionSet, obj fedruntime.Entity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Account:
		return ec._Account(ctx, sel, &obj)
	case *types.Account:
		if obj == nil {
			return graphql.Null
		}
		return ec._Account(ctx, sel, obj)
	case types.AccountActiveClubSupporterSubscription:
		return ec._AccountActiveClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountActiveClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountActiveClubSupporterSubscription(ctx, sel, obj)
	case types.AccountCancelledClubSupporterSubscription:
		return ec._AccountCancelledClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountCancelledClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountCancelledClubSupporterSubscription(ctx, sel, obj)
	case types.AccountExpiredClubSupporterSubscription:
		return ec._AccountExpiredClubSupporterSubscription(ctx, sel, &obj)
	case *types.AccountExpiredClubSupporterSubscription:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountExpiredClubSupporterSubscription(ctx, sel, obj)
	case types.AccountTransaction:
		return ec._AccountTransaction(ctx, sel, &obj)
	case *types.AccountTransaction:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccountTransaction(ctx, sel, obj)
	case types.CancellationReason:
		return ec._CancellationReason(ctx, sel, &obj)
	case *types.CancellationReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._CancellationReason(ctx, sel, obj)
	case types.Club:
		return ec._Club(ctx, sel, &obj)
	case *types.Club:
		if obj == nil {
			return graphql.Null
		}
		return ec._Club(ctx, sel, obj)
	case types.ClubMember:
		return ec._ClubMember(ctx, sel, &obj)
	case *types.ClubMember:
		if obj == nil {
			return graphql.Null
		}
		return ec._ClubMember(ctx, sel, obj)
	case graphql1.MediaProgress:
		return ec._MediaProgress(ctx, sel, &obj)
	case *graphql1.MediaProgress:
		if obj == nil {
			return graphql.Null
		}
		return ec._MediaProgress(ctx, sel, obj)
	case graphql1.ResourceProgress:
		return ec._ResourceProgress(ctx, sel, &obj)
	case *graphql1.ResourceProgress:
		if obj == nil {
			return graphql.Null
		}
		return ec._ResourceProgress(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountImplementors = []string{"Account", "_Entity"}

func (ec *executionContext) _Account(ctx context.Context, sel ast.SelectionSet, obj *types.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "clubSupporterSubscriptions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_clubSupporterSubscriptions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "expiredClubSupporterSubscriptions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_expiredClubSupporterSubscriptions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "savedPaymentMethods":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_savedPaymentMethods(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "transactionsTotalCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_transactionsTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "transactionsPaymentCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_transactionsPaymentCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "transactionsRefundCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_transactionsRefundCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "transactionsChargebackCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_transactionsChargebackCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "transactions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_transactions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hasActiveOrCancelledAccountClubSupporterSubscriptions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_hasActiveOrCancelledAccountClubSupporterSubscriptions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._Account_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountActiveClubSupporterSubscriptionImplementors = []string{"AccountActiveClubSupporterSubscription", "AccountClubSupporterSubscription", "IAccountClubSupporterSubscription", "Node", "_Entity"}

func (ec *executionContext) _AccountActiveClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, obj *types.AccountActiveClubSupporterSubscription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountActiveClubSupporterSubscriptionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountActiveClubSupporterSubscription")
		case "id":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "account":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "club":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_club(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "transactions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountActiveClubSupporterSubscription_transactions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "billingAmount":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_billingAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "billingCurrency":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_billingCurrency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supporterSince":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_supporterSince(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "lastBillingDate":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_lastBillingDate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "nextBillingDate":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_nextBillingDate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "paymentMethod":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_paymentMethod(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ccbillSubscription":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_ccbillSubscription(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "billingError":

			out.Values[i] = ec._AccountActiveClubSupporterSubscription_billingError(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountCancelledClubSupporterSubscriptionImplementors = []string{"AccountCancelledClubSupporterSubscription", "AccountClubSupporterSubscription", "IAccountClubSupporterSubscription", "Node", "_Entity"}

func (ec *executionContext) _AccountCancelledClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, obj *types.AccountCancelledClubSupporterSubscription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountCancelledClubSupporterSubscriptionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountCancelledClubSupporterSubscription")
		case "id":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "account":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "club":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_club(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "transactions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountCancelledClubSupporterSubscription_transactions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "billingAmount":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_billingAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "billingCurrency":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_billingCurrency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supporterSince":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_supporterSince(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "cancelledAt":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_cancelledAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "endDate":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_endDate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "paymentMethod":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_paymentMethod(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ccbillSubscription":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_ccbillSubscription(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "billingError":

			out.Values[i] = ec._AccountCancelledClubSupporterSubscription_billingError(ctx, field, obj)

		case "cancellationReason":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountCancelledClubSupporterSubscription_cancellationReason(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountClubSupporterSubscriptionBillingErrorImplementors = []string{"AccountClubSupporterSubscriptionBillingError"}

func (ec *executionContext) _AccountClubSupporterSubscriptionBillingError(ctx context.Context, sel ast.SelectionSet, obj *types.AccountClubSupporterSubscriptionBillingError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountClubSupporterSubscriptionBillingErrorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountClubSupporterSubscriptionBillingError")
		case "failedAt":

			out.Values[i] = ec._AccountClubSupporterSubscriptionBillingError_failedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ccbillErrorText":

			out.Values[i] = ec._AccountClubSupporterSubscriptionBillingError_ccbillErrorText(ctx, field, obj)

		case "ccbillErrorCode":

			out.Values[i] = ec._AccountClubSupporterSubscriptionBillingError_ccbillErrorCode(ctx, field, obj)

		case "ccbillDeclineError":

			out.Values[i] = ec._AccountClubSupporterSubscriptionBillingError_ccbillDeclineError(ctx, field, obj)

		case "nextRetryDate":

			out.Values[i] = ec._AccountClubSupporterSubscriptionBillingError_nextRetryDate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountClubSupporterSubscriptionConnectionImplementors = []string{"AccountClubSupporterSubscriptionConnection"}

func (ec *executionContext) _AccountClubSupporterSubscriptionConnection(ctx context.Context, sel ast.SelectionSet, obj *types.AccountClubSupporterSubscriptionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountClubSupporterSubscriptionConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountClubSupporterSubscriptionConnection")
		case "edges":

			out.Values[i] = ec._AccountClubSupporterSubscriptionConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._AccountClubSupporterSubscriptionConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountClubSupporterSubscriptionEdgeImplementors = []string{"AccountClubSupporterSubscriptionEdge"}

func (ec *executionContext) _AccountClubSupporterSubscriptionEdge(ctx context.Context, sel ast.SelectionSet, obj *types.AccountClubSupporterSubscriptionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountClubSupporterSubscriptionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountClubSupporterSubscriptionEdge")
		case "node":

			out.Values[i] = ec._AccountClubSupporterSubscriptionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._AccountClubSupporterSubscriptionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountExpiredClubSupporterSubscriptionImplementors = []string{"AccountExpiredClubSupporterSubscription", "AccountClubSupporterSubscription", "IAccountClubSupporterSubscription", "Node", "_Entity"}

func (ec *executionContext) _AccountExpiredClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, obj *types.AccountExpiredClubSupporterSubscription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountExpiredClubSupporterSubscriptionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountExpiredClubSupporterSubscription")
		case "id":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "account":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "club":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_club(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "transactions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountExpiredClubSupporterSubscription_transactions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "billingAmount":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_billingAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "billingCurrency":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_billingCurrency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supporterSince":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_supporterSince(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ccbillSubscription":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_ccbillSubscription(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "expiredAt":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_expiredAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "billingError":

			out.Values[i] = ec._AccountExpiredClubSupporterSubscription_billingError(ctx, field, obj)

		case "cancellationReason":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountExpiredClubSupporterSubscription_cancellationReason(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountSavedPaymentMethodImplementors = []string{"AccountSavedPaymentMethod"}

func (ec *executionContext) _AccountSavedPaymentMethod(ctx context.Context, sel ast.SelectionSet, obj *types.AccountSavedPaymentMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountSavedPaymentMethodImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountSavedPaymentMethod")
		case "id":

			out.Values[i] = ec._AccountSavedPaymentMethod_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account":

			out.Values[i] = ec._AccountSavedPaymentMethod_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentMethod":

			out.Values[i] = ec._AccountSavedPaymentMethod_paymentMethod(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ccbillSubscription":

			out.Values[i] = ec._AccountSavedPaymentMethod_ccbillSubscription(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._AccountSavedPaymentMethod_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountSavedPaymentMethodConnectionImplementors = []string{"AccountSavedPaymentMethodConnection"}

func (ec *executionContext) _AccountSavedPaymentMethodConnection(ctx context.Context, sel ast.SelectionSet, obj *types.AccountSavedPaymentMethodConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountSavedPaymentMethodConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountSavedPaymentMethodConnection")
		case "edges":

			out.Values[i] = ec._AccountSavedPaymentMethodConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._AccountSavedPaymentMethodConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountSavedPaymentMethodEdgeImplementors = []string{"AccountSavedPaymentMethodEdge"}

func (ec *executionContext) _AccountSavedPaymentMethodEdge(ctx context.Context, sel ast.SelectionSet, obj *types.AccountSavedPaymentMethodEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountSavedPaymentMethodEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountSavedPaymentMethodEdge")
		case "node":

			out.Values[i] = ec._AccountSavedPaymentMethodEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._AccountSavedPaymentMethodEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountTransactionImplementors = []string{"AccountTransaction", "Node", "_Entity"}

func (ec *executionContext) _AccountTransaction(ctx context.Context, sel ast.SelectionSet, obj *types.AccountTransaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountTransactionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountTransaction")
		case "id":

			out.Values[i] = ec._AccountTransaction_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._AccountTransaction_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":

			out.Values[i] = ec._AccountTransaction_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "events":

			out.Values[i] = ec._AccountTransaction_events(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "amount":

			out.Values[i] = ec._AccountTransaction_amount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalRefunded":

			out.Values[i] = ec._AccountTransaction_totalRefunded(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "currency":

			out.Values[i] = ec._AccountTransaction_currency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "billedAtDate":

			out.Values[i] = ec._AccountTransaction_billedAtDate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "nextBillingDate":

			out.Values[i] = ec._AccountTransaction_nextBillingDate(ctx, field, obj)

		case "paymentMethod":

			out.Values[i] = ec._AccountTransaction_paymentMethod(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._AccountTransaction_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ccbillTransaction":

			out.Values[i] = ec._AccountTransaction_ccbillTransaction(ctx, field, obj)

		case "clubSupporterSubscription":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountTransaction_clubSupporterSubscription(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountTransactionConnectionImplementors = []string{"AccountTransactionConnection"}

func (ec *executionContext) _AccountTransactionConnection(ctx context.Context, sel ast.SelectionSet, obj *types.AccountTransactionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountTransactionConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountTransactionConnection")
		case "edges":

			out.Values[i] = ec._AccountTransactionConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._AccountTransactionConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountTransactionEdgeImplementors = []string{"AccountTransactionEdge"}

func (ec *executionContext) _AccountTransactionEdge(ctx context.Context, sel ast.SelectionSet, obj *types.AccountTransactionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountTransactionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountTransactionEdge")
		case "node":

			out.Values[i] = ec._AccountTransactionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._AccountTransactionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountTransactionEventImplementors = []string{"AccountTransactionEvent"}

func (ec *executionContext) _AccountTransactionEvent(ctx context.Context, sel ast.SelectionSet, obj *types.AccountTransactionEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountTransactionEventImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountTransactionEvent")
		case "id":

			out.Values[i] = ec._AccountTransactionEvent_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "amount":

			out.Values[i] = ec._AccountTransactionEvent_amount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":

			out.Values[i] = ec._AccountTransactionEvent_currency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reason":

			out.Values[i] = ec._AccountTransactionEvent_reason(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._AccountTransactionEvent_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var aspectRatioImplementors = []string{"AspectRatio"}

func (ec *executionContext) _AspectRatio(ctx context.Context, sel ast.SelectionSet, obj *graphql1.AspectRatio) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aspectRatioImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AspectRatio")
		case "width":

			out.Values[i] = ec._AspectRatio_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._AspectRatio_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var becomeClubSupporterWithAccountSavedPaymentMethodPayloadImplementors = []string{"BecomeClubSupporterWithAccountSavedPaymentMethodPayload"}

func (ec *executionContext) _BecomeClubSupporterWithAccountSavedPaymentMethodPayload(ctx context.Context, sel ast.SelectionSet, obj *types.BecomeClubSupporterWithAccountSavedPaymentMethodPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, becomeClubSupporterWithAccountSavedPaymentMethodPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BecomeClubSupporterWithAccountSavedPaymentMethodPayload")
		case "ccbillTransactionToken":

			out.Values[i] = ec._BecomeClubSupporterWithAccountSavedPaymentMethodPayload_ccbillTransactionToken(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var billingAddressImplementors = []string{"BillingAddress"}

func (ec *executionContext) _BillingAddress(ctx context.Context, sel ast.SelectionSet, obj *types.BillingAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, billingAddressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingAddress")
		case "addressLine1":

			out.Values[i] = ec._BillingAddress_addressLine1(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":

			out.Values[i] = ec._BillingAddress_city(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":

			out.Values[i] = ec._BillingAddress_state(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":

			out.Values[i] = ec._BillingAddress_country(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postalCode":

			out.Values[i] = ec._BillingAddress_postalCode(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var billingContactImplementors = []string{"BillingContact"}

func (ec *executionContext) _BillingContact(ctx context.Context, sel ast.SelectionSet, obj *types.BillingContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, billingContactImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingContact")
		case "firstName":

			out.Values[i] = ec._BillingContact_firstName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":

			out.Values[i] = ec._BillingContact_lastName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._BillingContact_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumber":

			out.Values[i] = ec._BillingContact_phoneNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cCBillSubscriptionImplementors = []string{"CCBillSubscription"}

func (ec *executionContext) _CCBillSubscription(ctx context.Context, sel ast.SelectionSet, obj *types.CCBillSubscription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cCBillSubscriptionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CCBillSubscription")
		case "paymentMethod":

			out.Values[i] = ec._CCBillSubscription_paymentMethod(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ccbillSubscriptionId":

			out.Values[i] = ec._CCBillSubscription_ccbillSubscriptionId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._CCBillSubscription_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "link":

			out.Values[i] = ec._CCBillSubscription_link(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cCBillSubscriptionDetailsImplementors = []string{"CCBillSubscriptionDetails"}

func (ec *executionContext) _CCBillSubscriptionDetails(ctx context.Context, sel ast.SelectionSet, obj *types.CCBillSubscriptionDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cCBillSubscriptionDetailsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CCBillSubscriptionDetails")
		case "id":

			out.Values[i] = ec._CCBillSubscriptionDetails_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._CCBillSubscriptionDetails_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentMethod":

			out.Values[i] = ec._CCBillSubscriptionDetails_paymentMethod(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "club":

			out.Values[i] = ec._CCBillSubscriptionDetails_club(ctx, field, obj)

		case "account":

			out.Values[i] = ec._CCBillSubscriptionDetails_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscriptionInitialPrice":

			out.Values[i] = ec._CCBillSubscriptionDetails_subscriptionInitialPrice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscriptionRecurringPrice":

			out.Values[i] = ec._CCBillSubscriptionDetails_subscriptionRecurringPrice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscriptionCurrency":

			out.Values[i] = ec._CCBillSubscriptionDetails_subscriptionCurrency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "billedInitialPrice":

			out.Values[i] = ec._CCBillSubscriptionDetails_billedInitialPrice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "billedRecurringPrice":

			out.Values[i] = ec._CCBillSubscriptionDetails_billedRecurringPrice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "billedCurrency":

			out.Values[i] = ec._CCBillSubscriptionDetails_billedCurrency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accountingInitialPrice":

			out.Values[i] = ec._CCBillSubscriptionDetails_accountingInitialPrice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accountingRecurringPrice":

			out.Values[i] = ec._CCBillSubscriptionDetails_accountingRecurringPrice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accountingCurrency":

			out.Values[i] = ec._CCBillSubscriptionDetails_accountingCurrency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRecurring":

			out.Values[i] = ec._CCBillSubscriptionDetails_isRecurring(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDuplicate":

			out.Values[i] = ec._CCBillSubscriptionDetails_isDuplicate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timesRebilled":

			out.Values[i] = ec._CCBillSubscriptionDetails_timesRebilled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chargebacksIssued":

			out.Values[i] = ec._CCBillSubscriptionDetails_chargebacksIssued(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refundsIssued":

			out.Values[i] = ec._CCBillSubscriptionDetails_refundsIssued(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "voidsIssued":

			out.Values[i] = ec._CCBillSubscriptionDetails_voidsIssued(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signupDate":

			out.Values[i] = ec._CCBillSubscriptionDetails_signupDate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expirationDate":

			out.Values[i] = ec._CCBillSubscriptionDetails_expirationDate(ctx, field, obj)

		case "cancelDate":

			out.Values[i] = ec._CCBillSubscriptionDetails_cancelDate(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._CCBillSubscriptionDetails_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cCBillTransactionImplementors = []string{"CCBillTransaction"}

func (ec *executionContext) _CCBillTransaction(ctx context.Context, sel ast.SelectionSet, obj *types.CCBillTransaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cCBillTransactionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CCBillTransaction")
		case "ccbillSubscriptionId":

			out.Values[i] = ec._CCBillTransaction_ccbillSubscriptionId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ccbillTransactionId":

			out.Values[i] = ec._CCBillTransaction_ccbillTransactionId(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cCBillTransactionDetailsImplementors = []string{"CCBillTransactionDetails"}

func (ec *executionContext) _CCBillTransactionDetails(ctx context.Context, sel ast.SelectionSet, obj *types.CCBillTransactionDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cCBillTransactionDetailsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CCBillTransactionDetails")
		case "id":

			out.Values[i] = ec._CCBillTransactionDetails_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "approved":

			out.Values[i] = ec._CCBillTransactionDetails_approved(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "declineError":

			out.Values[i] = ec._CCBillTransactionDetails_declineError(ctx, field, obj)

		case "declineCode":

			out.Values[i] = ec._CCBillTransactionDetails_declineCode(ctx, field, obj)

		case "declineText":

			out.Values[i] = ec._CCBillTransactionDetails_declineText(ctx, field, obj)

		case "linkedAccountClubSupporterSubscription":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CCBillTransactionDetails_linkedAccountClubSupporterSubscription(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cancelAccountClubSupporterSubscriptionPayloadImplementors = []string{"CancelAccountClubSupporterSubscriptionPayload"}

func (ec *executionContext) _CancelAccountClubSupporterSubscriptionPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CancelAccountClubSupporterSubscriptionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cancelAccountClubSupporterSubscriptionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CancelAccountClubSupporterSubscriptionPayload")
		case "clubSupporterSubscription":

			out.Values[i] = ec._CancelAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cancelActiveSupporterSubscriptionsForClubPayloadImplementors = []string{"CancelActiveSupporterSubscriptionsForClubPayload"}

func (ec *executionContext) _CancelActiveSupporterSubscriptionsForClubPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CancelActiveSupporterSubscriptionsForClubPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cancelActiveSupporterSubscriptionsForClubPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CancelActiveSupporterSubscriptionsForClubPayload")
		case "club":

			out.Values[i] = ec._CancelActiveSupporterSubscriptionsForClubPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cancellationReasonImplementors = []string{"CancellationReason", "Node", "_Entity"}

func (ec *executionContext) _CancellationReason(ctx context.Context, sel ast.SelectionSet, obj *types.CancellationReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cancellationReasonImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CancellationReason")
		case "id":

			out.Values[i] = ec._CancellationReason_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._CancellationReason_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CancellationReason_title(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "titleTranslations":

			out.Values[i] = ec._CancellationReason_titleTranslations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deprecated":

			out.Values[i] = ec._CancellationReason_deprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cancellationReasonConnectionImplementors = []string{"CancellationReasonConnection"}

func (ec *executionContext) _CancellationReasonConnection(ctx context.Context, sel ast.SelectionSet, obj *types.CancellationReasonConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cancellationReasonConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CancellationReasonConnection")
		case "edges":

			out.Values[i] = ec._CancellationReasonConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._CancellationReasonConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cancellationReasonEdgeImplementors = []string{"CancellationReasonEdge"}

func (ec *executionContext) _CancellationReasonEdge(ctx context.Context, sel ast.SelectionSet, obj *types.CancellationReasonEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cancellationReasonEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CancellationReasonEdge")
		case "node":

			out.Values[i] = ec._CancellationReasonEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._CancellationReasonEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cardImplementors = []string{"Card"}

func (ec *executionContext) _Card(ctx context.Context, sel ast.SelectionSet, obj *types.Card) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cardImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Card")
		case "last4":

			out.Values[i] = ec._Card_last4(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiration":

			out.Values[i] = ec._Card_expiration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Card_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubImplementors = []string{"Club", "_Entity"}

func (ec *executionContext) _Club(ctx context.Context, sel ast.SelectionSet, obj *types.Club) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Club")
		case "supporterSubscriptionPrice":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_supporterSubscriptionPrice(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "supporterSubscriptions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_supporterSubscriptions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "transactionMetrics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_transactionMetrics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._Club_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubMemberImplementors = []string{"ClubMember", "_Entity"}

func (ec *executionContext) _ClubMember(ctx context.Context, sel ast.SelectionSet, obj *types.ClubMember) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubMemberImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubMember")
		case "clubSupporterSubscription":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ClubMember_clubSupporterSubscription(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._ClubMember_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubTransactionMetricImplementors = []string{"ClubTransactionMetric"}

func (ec *executionContext) _ClubTransactionMetric(ctx context.Context, sel ast.SelectionSet, obj *types.ClubTransactionMetric) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubTransactionMetricImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubTransactionMetric")
		case "month":

			out.Values[i] = ec._ClubTransactionMetric_month(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "year":

			out.Values[i] = ec._ClubTransactionMetric_year(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":

			out.Values[i] = ec._ClubTransactionMetric_currency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalTransactionsCount":

			out.Values[i] = ec._ClubTransactionMetric_totalTransactionsCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalTransactionsAmount":

			out.Values[i] = ec._ClubTransactionMetric_totalTransactionsAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chargebacksCount":

			out.Values[i] = ec._ClubTransactionMetric_chargebacksCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chargebacksAmount":

			out.Values[i] = ec._ClubTransactionMetric_chargebacksAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chargebacksCountRatio":

			out.Values[i] = ec._ClubTransactionMetric_chargebacksCountRatio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chargebacksAmountRatio":

			out.Values[i] = ec._ClubTransactionMetric_chargebacksAmountRatio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refundsCount":

			out.Values[i] = ec._ClubTransactionMetric_refundsCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refundsAmount":

			out.Values[i] = ec._ClubTransactionMetric_refundsAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refundsCountRatio":

			out.Values[i] = ec._ClubTransactionMetric_refundsCountRatio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refundsAmountRatio":

			out.Values[i] = ec._ClubTransactionMetric_refundsAmountRatio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubTransactionMetricConnectionImplementors = []string{"ClubTransactionMetricConnection"}

func (ec *executionContext) _ClubTransactionMetricConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ClubTransactionMetricConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubTransactionMetricConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubTransactionMetricConnection")
		case "edges":

			out.Values[i] = ec._ClubTransactionMetricConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._ClubTransactionMetricConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubTransactionMetricEdgeImplementors = []string{"ClubTransactionMetricEdge"}

func (ec *executionContext) _ClubTransactionMetricEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ClubTransactionMetricEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubTransactionMetricEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubTransactionMetricEdge")
		case "node":

			out.Values[i] = ec._ClubTransactionMetricEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._ClubTransactionMetricEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var colorPaletteImplementors = []string{"ColorPalette"}

func (ec *executionContext) _ColorPalette(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ColorPalette) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, colorPaletteImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ColorPalette")
		case "percent":

			out.Values[i] = ec._ColorPalette_percent(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "red":

			out.Values[i] = ec._ColorPalette_red(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "green":

			out.Values[i] = ec._ColorPalette_green(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blue":

			out.Values[i] = ec._ColorPalette_blue(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createCancellationReasonPayloadImplementors = []string{"CreateCancellationReasonPayload"}

func (ec *executionContext) _CreateCancellationReasonPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CreateCancellationReasonPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCancellationReasonPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCancellationReasonPayload")
		case "cancellationReason":

			out.Values[i] = ec._CreateCancellationReasonPayload_cancellationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteAccountSavedPaymentMethodPayloadImplementors = []string{"DeleteAccountSavedPaymentMethodPayload"}

func (ec *executionContext) _DeleteAccountSavedPaymentMethodPayload(ctx context.Context, sel ast.SelectionSet, obj *types.DeleteAccountSavedPaymentMethodPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteAccountSavedPaymentMethodPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteAccountSavedPaymentMethodPayload")
		case "deletedAccountSavedPaymentMethodId":

			out.Values[i] = ec._DeleteAccountSavedPaymentMethodPayload_deletedAccountSavedPaymentMethodId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entityImplementors = []string{"Entity"}

func (ec *executionContext) _Entity(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Entity",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Entity")
		case "findAccountByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findAccountByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findAccountActiveClubSupporterSubscriptionByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findAccountActiveClubSupporterSubscriptionByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findAccountCancelledClubSupporterSubscriptionByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findAccountCancelledClubSupporterSubscriptionByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findAccountExpiredClubSupporterSubscriptionByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findAccountExpiredClubSupporterSubscriptionByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findAccountTransactionByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findAccountTransactionByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findCancellationReasonByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findCancellationReasonByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findClubByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findClubByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findClubMemberByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findClubMemberByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var expiredAccountClubSupporterSubscriptionImplementors = []string{"ExpiredAccountClubSupporterSubscription"}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, obj *types.ExpiredAccountClubSupporterSubscription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, expiredAccountClubSupporterSubscriptionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExpiredAccountClubSupporterSubscription")
		case "id":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscription_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscription_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "club":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscription_club(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supporterSince":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscription_supporterSince(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiredAt":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscription_expiredAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelledAt":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscription_cancelledAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var expiredAccountClubSupporterSubscriptionConnectionImplementors = []string{"ExpiredAccountClubSupporterSubscriptionConnection"}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscriptionConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ExpiredAccountClubSupporterSubscriptionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, expiredAccountClubSupporterSubscriptionConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExpiredAccountClubSupporterSubscriptionConnection")
		case "edges":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscriptionConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscriptionConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var expiredAccountClubSupporterSubscriptionEdgeImplementors = []string{"ExpiredAccountClubSupporterSubscriptionEdge"}

func (ec *executionContext) _ExpiredAccountClubSupporterSubscriptionEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ExpiredAccountClubSupporterSubscriptionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, expiredAccountClubSupporterSubscriptionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExpiredAccountClubSupporterSubscriptionEdge")
		case "node":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscriptionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._ExpiredAccountClubSupporterSubscriptionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var extendAccountClubSupporterSubscriptionPayloadImplementors = []string{"ExtendAccountClubSupporterSubscriptionPayload"}

func (ec *executionContext) _ExtendAccountClubSupporterSubscriptionPayload(ctx context.Context, sel ast.SelectionSet, obj *types.ExtendAccountClubSupporterSubscriptionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, extendAccountClubSupporterSubscriptionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExtendAccountClubSupporterSubscriptionPayload")
		case "clubSupporterSubscription":

			out.Values[i] = ec._ExtendAccountClubSupporterSubscriptionPayload_clubSupporterSubscription(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var generateCCBillClubSupporterPaymentLinkPayloadImplementors = []string{"GenerateCCBillClubSupporterPaymentLinkPayload"}

func (ec *executionContext) _GenerateCCBillClubSupporterPaymentLinkPayload(ctx context.Context, sel ast.SelectionSet, obj *types.GenerateCCBillClubSupporterPaymentLinkPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generateCCBillClubSupporterPaymentLinkPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenerateCCBillClubSupporterPaymentLinkPayload")
		case "paymentLink":

			out.Values[i] = ec._GenerateCCBillClubSupporterPaymentLinkPayload_paymentLink(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var generateClubSupporterPaymentReceiptFromAccountTransactionPayloadImplementors = []string{"GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload"}

func (ec *executionContext) _GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload(ctx context.Context, sel ast.SelectionSet, obj *types.GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generateClubSupporterPaymentReceiptFromAccountTransactionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload")
		case "link":

			out.Values[i] = ec._GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload_link(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var generateClubSupporterRefundReceiptFromAccountTransactionPayloadImplementors = []string{"GenerateClubSupporterRefundReceiptFromAccountTransactionPayload"}

func (ec *executionContext) _GenerateClubSupporterRefundReceiptFromAccountTransactionPayload(ctx context.Context, sel ast.SelectionSet, obj *types.GenerateClubSupporterRefundReceiptFromAccountTransactionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generateClubSupporterRefundReceiptFromAccountTransactionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenerateClubSupporterRefundReceiptFromAccountTransactionPayload")
		case "link":

			out.Values[i] = ec._GenerateClubSupporterRefundReceiptFromAccountTransactionPayload_link(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var generateRefundAmountForAccountTransactionPayloadImplementors = []string{"GenerateRefundAmountForAccountTransactionPayload"}

func (ec *executionContext) _GenerateRefundAmountForAccountTransactionPayload(ctx context.Context, sel ast.SelectionSet, obj *types.GenerateRefundAmountForAccountTransactionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generateRefundAmountForAccountTransactionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenerateRefundAmountForAccountTransactionPayload")
		case "refundAmount":

			out.Values[i] = ec._GenerateRefundAmountForAccountTransactionPayload_refundAmount(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hLSVideoContainerImplementors = []string{"HLSVideoContainer", "VideoContainer"}

func (ec *executionContext) _HLSVideoContainer(ctx context.Context, sel ast.SelectionSet, obj *graphql1.HLSVideoContainer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hLSVideoContainerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HLSVideoContainer")
		case "url":

			out.Values[i] = ec._HLSVideoContainer_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageMediaImplementors = []string{"ImageMedia", "Media"}

func (ec *executionContext) _ImageMedia(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ImageMedia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageMediaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageMedia")
		case "id":

			out.Values[i] = ec._ImageMedia_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "variants":

			out.Values[i] = ec._ImageMedia_variants(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "original":

			out.Values[i] = ec._ImageMedia_original(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colorPalettes":

			out.Values[i] = ec._ImageMedia_colorPalettes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageMediaAccessImplementors = []string{"ImageMediaAccess"}

func (ec *executionContext) _ImageMediaAccess(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ImageMediaAccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageMediaAccessImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageMediaAccess")
		case "width":

			out.Values[i] = ec._ImageMediaAccess_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._ImageMediaAccess_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":

			out.Values[i] = ec._ImageMediaAccess_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageMediaVariantsImplementors = []string{"ImageMediaVariants"}

func (ec *executionContext) _ImageMediaVariants(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ImageMediaVariants) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageMediaVariantsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageMediaVariants")
		case "mini":

			out.Values[i] = ec._ImageMediaVariants_mini(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":

			out.Values[i] = ec._ImageMediaVariants_icon(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thumbnail":

			out.Values[i] = ec._ImageMediaVariants_thumbnail(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thumbnailHd":

			out.Values[i] = ec._ImageMediaVariants_thumbnailHd(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "small":

			out.Values[i] = ec._ImageMediaVariants_small(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "medium":

			out.Values[i] = ec._ImageMediaVariants_medium(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "large":

			out.Values[i] = ec._ImageMediaVariants_large(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hd":

			out.Values[i] = ec._ImageMediaVariants_hd(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "banner":

			out.Values[i] = ec._ImageMediaVariants_banner(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var languageImplementors = []string{"Language"}

func (ec *executionContext) _Language(ctx context.Context, sel ast.SelectionSet, obj *graphql1.Language) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, languageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Language")
		case "locale":

			out.Values[i] = ec._Language_locale(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Language_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var localizedPricingPointImplementors = []string{"LocalizedPricingPoint"}

func (ec *executionContext) _LocalizedPricingPoint(ctx context.Context, sel ast.SelectionSet, obj *types.LocalizedPricingPoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, localizedPricingPointImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocalizedPricingPoint")
		case "localizedPrice":

			out.Values[i] = ec._LocalizedPricingPoint_localizedPrice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "prices":

			out.Values[i] = ec._LocalizedPricingPoint_prices(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mP4VideoContainerImplementors = []string{"MP4VideoContainer", "VideoContainer"}

func (ec *executionContext) _MP4VideoContainer(ctx context.Context, sel ast.SelectionSet, obj *graphql1.MP4VideoContainer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mP4VideoContainerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MP4VideoContainer")
		case "url":

			out.Values[i] = ec._MP4VideoContainer_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bitrate":

			out.Values[i] = ec._MP4VideoContainer_bitrate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "width":

			out.Values[i] = ec._MP4VideoContainer_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._MP4VideoContainer_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mediaProgressImplementors = []string{"MediaProgress", "_Entity"}

func (ec *executionContext) _MediaProgress(ctx context.Context, sel ast.SelectionSet, obj *graphql1.MediaProgress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaProgressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaProgress")
		case "id":

			out.Values[i] = ec._MediaProgress_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "generateCCBillClubSupporterPaymentLink":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_generateCCBillClubSupporterPaymentLink(ctx, field)
			})

		case "becomeClubSupporterWithAccountSavedPaymentMethod":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_becomeClubSupporterWithAccountSavedPaymentMethod(ctx, field)
			})

		case "cancelAccountClubSupporterSubscription":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelAccountClubSupporterSubscription(ctx, field)
			})

		case "refundAccountTransaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refundAccountTransaction(ctx, field)
			})

		case "extendAccountClubSupporterSubscription":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_extendAccountClubSupporterSubscription(ctx, field)
			})

		case "generateRefundAmountForAccountTransaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_generateRefundAmountForAccountTransaction(ctx, field)
			})

		case "deleteAccountSavedPaymentMethod":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAccountSavedPaymentMethod(ctx, field)
			})

		case "generateClubSupporterPaymentReceiptFromAccountTransaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_generateClubSupporterPaymentReceiptFromAccountTransaction(ctx, field)
			})

		case "generateClubSupporterRefundReceiptFromAccountTransaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_generateClubSupporterRefundReceiptFromAccountTransaction(ctx, field)
			})

		case "cancelActiveSupporterSubscriptionsForClub":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelActiveSupporterSubscriptionsForClub(ctx, field)
			})

		case "createCancellationReason":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCancellationReason(ctx, field)
			})

		case "updateCancellationReasonTitle":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCancellationReasonTitle(ctx, field)
			})

		case "updateCancellationReasonDeprecated":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCancellationReasonDeprecated(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *relay.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":

			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":

			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":

			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)

		case "endCursor":

			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentMethodImplementors = []string{"PaymentMethod"}

func (ec *executionContext) _PaymentMethod(ctx context.Context, sel ast.SelectionSet, obj *types.PaymentMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentMethodImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentMethod")
		case "card":

			out.Values[i] = ec._PaymentMethod_card(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "billingAddress":

			out.Values[i] = ec._PaymentMethod_billingAddress(ctx, field, obj)

		case "billingContact":

			out.Values[i] = ec._PaymentMethod_billingContact(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priceImplementors = []string{"Price"}

func (ec *executionContext) _Price(ctx context.Context, sel ast.SelectionSet, obj *types.Price) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Price")
		case "amount":

			out.Values[i] = ec._Price_amount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":

			out.Values[i] = ec._Price_currency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "cancellationReason":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cancellationReason(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "cancellationReasons":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cancellationReasons(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "ccbillSubscriptionDetails":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ccbillSubscriptionDetails(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "accountClubSupporterSubscription":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountClubSupporterSubscription(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "accountTransaction":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountTransaction(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "ccbillTransactionDetails":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ccbillTransactionDetails(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "_entities":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__entities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "_service":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rawMediaImplementors = []string{"RawMedia", "Media"}

func (ec *executionContext) _RawMedia(ctx context.Context, sel ast.SelectionSet, obj *graphql1.RawMedia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rawMediaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RawMedia")
		case "id":

			out.Values[i] = ec._RawMedia_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "originalFileName":

			out.Values[i] = ec._RawMedia_originalFileName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "failed":

			out.Values[i] = ec._RawMedia_failed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "progress":

			out.Values[i] = ec._RawMedia_progress(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var refundAccountTransactionPayloadImplementors = []string{"RefundAccountTransactionPayload"}

func (ec *executionContext) _RefundAccountTransactionPayload(ctx context.Context, sel ast.SelectionSet, obj *types.RefundAccountTransactionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, refundAccountTransactionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RefundAccountTransactionPayload")
		case "accountTransaction":

			out.Values[i] = ec._RefundAccountTransactionPayload_accountTransaction(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var refundAmountImplementors = []string{"RefundAmount"}

func (ec *executionContext) _RefundAmount(ctx context.Context, sel ast.SelectionSet, obj *types.RefundAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, refundAmountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RefundAmount")
		case "proratedAmount":

			out.Values[i] = ec._RefundAmount_proratedAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maximumAmount":

			out.Values[i] = ec._RefundAmount_maximumAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":

			out.Values[i] = ec._RefundAmount_currency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceImplementors = []string{"Resource"}

func (ec *executionContext) _Resource(ctx context.Context, sel ast.SelectionSet, obj *graphql1.Resource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Resource")
		case "id":

			out.Values[i] = ec._Resource_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Resource_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processed":

			out.Values[i] = ec._Resource_processed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "urls":

			out.Values[i] = ec._Resource_urls(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "width":

			out.Values[i] = ec._Resource_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._Resource_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoDuration":

			out.Values[i] = ec._Resource_videoDuration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoThumbnail":

			out.Values[i] = ec._Resource_videoThumbnail(ctx, field, obj)

		case "videoNoAudio":

			out.Values[i] = ec._Resource_videoNoAudio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preview":

			out.Values[i] = ec._Resource_preview(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "progress":

			out.Values[i] = ec._Resource_progress(ctx, field, obj)

		case "failed":

			out.Values[i] = ec._Resource_failed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceProgressImplementors = []string{"ResourceProgress", "_Entity"}

func (ec *executionContext) _ResourceProgress(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ResourceProgress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceProgressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceProgress")
		case "id":

			out.Values[i] = ec._ResourceProgress_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceUrlImplementors = []string{"ResourceUrl"}

func (ec *executionContext) _ResourceUrl(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ResourceURL) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceUrlImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceUrl")
		case "url":

			out.Values[i] = ec._ResourceUrl_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mimeType":

			out.Values[i] = ec._ResourceUrl_mimeType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var translationImplementors = []string{"Translation"}

func (ec *executionContext) _Translation(ctx context.Context, sel ast.SelectionSet, obj *graphql1.Translation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, translationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Translation")
		case "language":

			out.Values[i] = ec._Translation_language(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":

			out.Values[i] = ec._Translation_text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCancellationReasonDeprecatedPayloadImplementors = []string{"UpdateCancellationReasonDeprecatedPayload"}

func (ec *executionContext) _UpdateCancellationReasonDeprecatedPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateCancellationReasonDeprecatedPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCancellationReasonDeprecatedPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCancellationReasonDeprecatedPayload")
		case "cancellationReason":

			out.Values[i] = ec._UpdateCancellationReasonDeprecatedPayload_cancellationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCancellationReasonTitlePayloadImplementors = []string{"UpdateCancellationReasonTitlePayload"}

func (ec *executionContext) _UpdateCancellationReasonTitlePayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateCancellationReasonTitlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCancellationReasonTitlePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCancellationReasonTitlePayload")
		case "cancellationReason":

			out.Values[i] = ec._UpdateCancellationReasonTitlePayload_cancellationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoMediaImplementors = []string{"VideoMedia", "Media"}

func (ec *executionContext) _VideoMedia(ctx context.Context, sel ast.SelectionSet, obj *graphql1.VideoMedia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoMediaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoMedia")
		case "id":

			out.Values[i] = ec._VideoMedia_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cover":

			out.Values[i] = ec._VideoMedia_cover(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "aspectRatio":

			out.Values[i] = ec._VideoMedia_aspectRatio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "containers":

			out.Values[i] = ec._VideoMedia_containers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "duration":

			out.Values[i] = ec._VideoMedia_duration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasAudio":

			out.Values[i] = ec._VideoMedia_hasAudio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":

			out.Values[i] = ec.__Service_sdl(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccount2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx context.Context, sel ast.SelectionSet, v types.Account) graphql.Marshaler {
	return ec._Account(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx context.Context, sel ast.SelectionSet, v *types.Account) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountActiveClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountActiveClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, v types.AccountActiveClubSupporterSubscription) graphql.Marshaler {
	return ec._AccountActiveClubSupporterSubscription(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountActiveClubSupporterSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountActiveClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, v *types.AccountActiveClubSupporterSubscription) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountActiveClubSupporterSubscription(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountCancelledClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountCancelledClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, v types.AccountCancelledClubSupporterSubscription) graphql.Marshaler {
	return ec._AccountCancelledClubSupporterSubscription(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountCancelledClubSupporterSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountCancelledClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, v *types.AccountCancelledClubSupporterSubscription) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountCancelledClubSupporterSubscription(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, v types.AccountClubSupporterSubscription) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountClubSupporterSubscription(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountClubSupporterSubscriptionConnection2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionConnection(ctx context.Context, sel ast.SelectionSet, v types.AccountClubSupporterSubscriptionConnection) graphql.Marshaler {
	return ec._AccountClubSupporterSubscriptionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountClubSupporterSubscriptionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionConnection(ctx context.Context, sel ast.SelectionSet, v *types.AccountClubSupporterSubscriptionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountClubSupporterSubscriptionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountClubSupporterSubscriptionEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.AccountClubSupporterSubscriptionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountClubSupporterSubscriptionEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAccountClubSupporterSubscriptionEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionEdge(ctx context.Context, sel ast.SelectionSet, v *types.AccountClubSupporterSubscriptionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountClubSupporterSubscriptionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountClubSupporterSubscriptionStatus2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionStatus(ctx context.Context, v interface{}) (types.AccountClubSupporterSubscriptionStatus, error) {
	var res types.AccountClubSupporterSubscriptionStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountClubSupporterSubscriptionStatus2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionStatus(ctx context.Context, sel ast.SelectionSet, v types.AccountClubSupporterSubscriptionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAccountExpiredClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountExpiredClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, v types.AccountExpiredClubSupporterSubscription) graphql.Marshaler {
	return ec._AccountExpiredClubSupporterSubscription(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountExpiredClubSupporterSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountExpiredClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, v *types.AccountExpiredClubSupporterSubscription) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountExpiredClubSupporterSubscription(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountSavedPaymentMethod2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountSavedPaymentMethod(ctx context.Context, sel ast.SelectionSet, v *types.AccountSavedPaymentMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountSavedPaymentMethod(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountSavedPaymentMethodConnection2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountSavedPaymentMethodConnection(ctx context.Context, sel ast.SelectionSet, v types.AccountSavedPaymentMethodConnection) graphql.Marshaler {
	return ec._AccountSavedPaymentMethodConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountSavedPaymentMethodConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountSavedPaymentMethodConnection(ctx context.Context, sel ast.SelectionSet, v *types.AccountSavedPaymentMethodConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountSavedPaymentMethodConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountSavedPaymentMethodEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountSavedPaymentMethodEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.AccountSavedPaymentMethodEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountSavedPaymentMethodEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountSavedPaymentMethodEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAccountSavedPaymentMethodEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountSavedPaymentMethodEdge(ctx context.Context, sel ast.SelectionSet, v *types.AccountSavedPaymentMethodEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountSavedPaymentMethodEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountTransaction2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransaction(ctx context.Context, sel ast.SelectionSet, v types.AccountTransaction) graphql.Marshaler {
	return ec._AccountTransaction(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountTransaction2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransaction(ctx context.Context, sel ast.SelectionSet, v *types.AccountTransaction) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountTransaction(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountTransactionConnection2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionConnection(ctx context.Context, sel ast.SelectionSet, v types.AccountTransactionConnection) graphql.Marshaler {
	return ec._AccountTransactionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountTransactionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionConnection(ctx context.Context, sel ast.SelectionSet, v *types.AccountTransactionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountTransactionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountTransactionEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.AccountTransactionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountTransactionEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAccountTransactionEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionEdge(ctx context.Context, sel ast.SelectionSet, v *types.AccountTransactionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountTransactionEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountTransactionEvent2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.AccountTransactionEvent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountTransactionEvent2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAccountTransactionEvent2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionEvent(ctx context.Context, sel ast.SelectionSet, v *types.AccountTransactionEvent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountTransactionEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountTransactionType2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionType(ctx context.Context, v interface{}) (types.AccountTransactionType, error) {
	var res types.AccountTransactionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountTransactionType2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionType(ctx context.Context, sel ast.SelectionSet, v types.AccountTransactionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAspectRatio2ᚖoverdollᚋlibrariesᚋgraphqlᚐAspectRatio(ctx context.Context, sel ast.SelectionSet, v *graphql1.AspectRatio) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AspectRatio(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBCP472string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBCP472string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBecomeClubSupporterWithAccountSavedPaymentMethodInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐBecomeClubSupporterWithAccountSavedPaymentMethodInput(ctx context.Context, v interface{}) (types.BecomeClubSupporterWithAccountSavedPaymentMethodInput, error) {
	res, err := ec.unmarshalInputBecomeClubSupporterWithAccountSavedPaymentMethodInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCCBillSubscriptionStatus2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscriptionStatus(ctx context.Context, v interface{}) (types.CCBillSubscriptionStatus, error) {
	var res types.CCBillSubscriptionStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCCBillSubscriptionStatus2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscriptionStatus(ctx context.Context, sel ast.SelectionSet, v types.CCBillSubscriptionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCancelAccountClubSupporterSubscriptionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancelAccountClubSupporterSubscriptionInput(ctx context.Context, v interface{}) (types.CancelAccountClubSupporterSubscriptionInput, error) {
	res, err := ec.unmarshalInputCancelAccountClubSupporterSubscriptionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCancelActiveSupporterSubscriptionsForClubInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancelActiveSupporterSubscriptionsForClubInput(ctx context.Context, v interface{}) (types.CancelActiveSupporterSubscriptionsForClubInput, error) {
	res, err := ec.unmarshalInputCancelActiveSupporterSubscriptionsForClubInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCancellationReason2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx context.Context, sel ast.SelectionSet, v types.CancellationReason) graphql.Marshaler {
	return ec._CancellationReason(ctx, sel, &v)
}

func (ec *executionContext) marshalNCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx context.Context, sel ast.SelectionSet, v *types.CancellationReason) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CancellationReason(ctx, sel, v)
}

func (ec *executionContext) marshalNCancellationReasonConnection2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReasonConnection(ctx context.Context, sel ast.SelectionSet, v types.CancellationReasonConnection) graphql.Marshaler {
	return ec._CancellationReasonConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCancellationReasonConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReasonConnection(ctx context.Context, sel ast.SelectionSet, v *types.CancellationReasonConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CancellationReasonConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCancellationReasonEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReasonEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.CancellationReasonEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCancellationReasonEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReasonEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCancellationReasonEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReasonEdge(ctx context.Context, sel ast.SelectionSet, v *types.CancellationReasonEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CancellationReasonEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNCard2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCard(ctx context.Context, sel ast.SelectionSet, v *types.Card) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Card(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCardType2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCardType(ctx context.Context, v interface{}) (types.CardType, error) {
	var res types.CardType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCardType2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCardType(ctx context.Context, sel ast.SelectionSet, v types.CardType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNClub2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx context.Context, sel ast.SelectionSet, v types.Club) graphql.Marshaler {
	return ec._Club(ctx, sel, &v)
}

func (ec *executionContext) marshalNClub2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx context.Context, sel ast.SelectionSet, v *types.Club) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Club(ctx, sel, v)
}

func (ec *executionContext) marshalNClubMember2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx context.Context, sel ast.SelectionSet, v types.ClubMember) graphql.Marshaler {
	return ec._ClubMember(ctx, sel, &v)
}

func (ec *executionContext) marshalNClubMember2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx context.Context, sel ast.SelectionSet, v *types.ClubMember) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubMember(ctx, sel, v)
}

func (ec *executionContext) marshalNClubTransactionMetric2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTransactionMetric(ctx context.Context, sel ast.SelectionSet, v *types.ClubTransactionMetric) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubTransactionMetric(ctx, sel, v)
}

func (ec *executionContext) marshalNClubTransactionMetricConnection2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTransactionMetricConnection(ctx context.Context, sel ast.SelectionSet, v types.ClubTransactionMetricConnection) graphql.Marshaler {
	return ec._ClubTransactionMetricConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNClubTransactionMetricConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTransactionMetricConnection(ctx context.Context, sel ast.SelectionSet, v *types.ClubTransactionMetricConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubTransactionMetricConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNClubTransactionMetricEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTransactionMetricEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ClubTransactionMetricEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClubTransactionMetricEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTransactionMetricEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClubTransactionMetricEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTransactionMetricEdge(ctx context.Context, sel ast.SelectionSet, v *types.ClubTransactionMetricEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubTransactionMetricEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNColorPalette2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐColorPaletteᚄ(ctx context.Context, sel ast.SelectionSet, v []*graphql1.ColorPalette) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNColorPalette2ᚖoverdollᚋlibrariesᚋgraphqlᚐColorPalette(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNColorPalette2ᚖoverdollᚋlibrariesᚋgraphqlᚐColorPalette(ctx context.Context, sel ast.SelectionSet, v *graphql1.ColorPalette) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ColorPalette(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCancellationReasonInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCancellationReasonInput(ctx context.Context, v interface{}) (types.CreateCancellationReasonInput, error) {
	res, err := ec.unmarshalInputCreateCancellationReasonInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx context.Context, v interface{}) (graphql1.Currency, error) {
	var res graphql1.Currency
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCurrency2overdollᚋlibrariesᚋgraphqlᚐCurrency(ctx context.Context, sel ast.SelectionSet, v graphql1.Currency) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDate2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql1.UnmarshalDate(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDate2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql1.MarshalDate(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDeleteAccountSavedPaymentMethodInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐDeleteAccountSavedPaymentMethodInput(ctx context.Context, v interface{}) (types.DeleteAccountSavedPaymentMethodInput, error) {
	res, err := ec.unmarshalInputDeleteAccountSavedPaymentMethodInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNExpiredAccountClubSupporterSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExpiredAccountClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, v *types.ExpiredAccountClubSupporterSubscription) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExpiredAccountClubSupporterSubscription(ctx, sel, v)
}

func (ec *executionContext) marshalNExpiredAccountClubSupporterSubscriptionConnection2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExpiredAccountClubSupporterSubscriptionConnection(ctx context.Context, sel ast.SelectionSet, v types.ExpiredAccountClubSupporterSubscriptionConnection) graphql.Marshaler {
	return ec._ExpiredAccountClubSupporterSubscriptionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNExpiredAccountClubSupporterSubscriptionConnection2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExpiredAccountClubSupporterSubscriptionConnection(ctx context.Context, sel ast.SelectionSet, v *types.ExpiredAccountClubSupporterSubscriptionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExpiredAccountClubSupporterSubscriptionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNExpiredAccountClubSupporterSubscriptionEdge2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExpiredAccountClubSupporterSubscriptionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ExpiredAccountClubSupporterSubscriptionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExpiredAccountClubSupporterSubscriptionEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExpiredAccountClubSupporterSubscriptionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExpiredAccountClubSupporterSubscriptionEdge2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExpiredAccountClubSupporterSubscriptionEdge(ctx context.Context, sel ast.SelectionSet, v *types.ExpiredAccountClubSupporterSubscriptionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExpiredAccountClubSupporterSubscriptionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNExtendAccountClubSupporterSubscriptionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExtendAccountClubSupporterSubscriptionInput(ctx context.Context, v interface{}) (types.ExtendAccountClubSupporterSubscriptionInput, error) {
	res, err := ec.unmarshalInputExtendAccountClubSupporterSubscriptionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNGenerateCCBillClubSupporterPaymentLinkInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateCCBillClubSupporterPaymentLinkInput(ctx context.Context, v interface{}) (types.GenerateCCBillClubSupporterPaymentLinkInput, error) {
	res, err := ec.unmarshalInputGenerateCCBillClubSupporterPaymentLinkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGenerateClubSupporterPaymentReceiptFromAccountTransactionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateClubSupporterPaymentReceiptFromAccountTransactionInput(ctx context.Context, v interface{}) (types.GenerateClubSupporterPaymentReceiptFromAccountTransactionInput, error) {
	res, err := ec.unmarshalInputGenerateClubSupporterPaymentReceiptFromAccountTransactionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGenerateClubSupporterRefundReceiptFromAccountTransactionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateClubSupporterRefundReceiptFromAccountTransactionInput(ctx context.Context, v interface{}) (types.GenerateClubSupporterRefundReceiptFromAccountTransactionInput, error) {
	res, err := ec.unmarshalInputGenerateClubSupporterRefundReceiptFromAccountTransactionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGenerateRefundAmountForAccountTransactionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateRefundAmountForAccountTransactionInput(ctx context.Context, v interface{}) (types.GenerateRefundAmountForAccountTransactionInput, error) {
	res, err := ec.unmarshalInputGenerateRefundAmountForAccountTransactionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx context.Context, v interface{}) (relay.ID, error) {
	var res relay.ID
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx context.Context, sel ast.SelectionSet, v relay.ID) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNImageMedia2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMedia(ctx context.Context, sel ast.SelectionSet, v *graphql1.ImageMedia) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ImageMedia(ctx, sel, v)
}

func (ec *executionContext) marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx context.Context, sel ast.SelectionSet, v *graphql1.ImageMediaAccess) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ImageMediaAccess(ctx, sel, v)
}

func (ec *executionContext) marshalNImageMediaVariants2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaVariants(ctx context.Context, sel ast.SelectionSet, v *graphql1.ImageMediaVariants) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ImageMediaVariants(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLanguage2ᚖoverdollᚋlibrariesᚋgraphqlᚐLanguage(ctx context.Context, sel ast.SelectionSet, v *graphql1.Language) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Language(ctx, sel, v)
}

func (ec *executionContext) marshalNLocalizedPricingPoint2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐLocalizedPricingPoint(ctx context.Context, sel ast.SelectionSet, v types.LocalizedPricingPoint) graphql.Marshaler {
	return ec._LocalizedPricingPoint(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocalizedPricingPoint2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐLocalizedPricingPoint(ctx context.Context, sel ast.SelectionSet, v *types.LocalizedPricingPoint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LocalizedPricingPoint(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *relay.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPaymentMethod2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPaymentMethod(ctx context.Context, sel ast.SelectionSet, v *types.PaymentMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PaymentMethod(ctx, sel, v)
}

func (ec *executionContext) marshalNPrice2ᚕᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPriceᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Price) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrice2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPrice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPrice2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐPrice(ctx context.Context, sel ast.SelectionSet, v *types.Price) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Price(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRefundAccountTransactionInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐRefundAccountTransactionInput(ctx context.Context, v interface{}) (types.RefundAccountTransactionInput, error) {
	res, err := ec.unmarshalInputRefundAccountTransactionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNResourceType2overdollᚋlibrariesᚋgraphqlᚐResourceType(ctx context.Context, v interface{}) (graphql1.ResourceType, error) {
	var res graphql1.ResourceType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResourceType2overdollᚋlibrariesᚋgraphqlᚐResourceType(ctx context.Context, sel ast.SelectionSet, v graphql1.ResourceType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNResourceUrl2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURLᚄ(ctx context.Context, sel ast.SelectionSet, v []*graphql1.ResourceURL) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResourceUrl2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURL(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNResourceUrl2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURL(ctx context.Context, sel ast.SelectionSet, v *graphql1.ResourceURL) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ResourceUrl(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx context.Context, sel ast.SelectionSet, v []*graphql1.Translation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTranslation2ᚖoverdollᚋlibrariesᚋgraphqlᚐTranslation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTranslation2ᚖoverdollᚋlibrariesᚋgraphqlᚐTranslation(ctx context.Context, sel ast.SelectionSet, v *graphql1.Translation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Translation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx context.Context, v interface{}) (graphql1.URI, error) {
	var res graphql1.URI
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx context.Context, sel ast.SelectionSet, v graphql1.URI) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUpdateCancellationReasonDeprecatedInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCancellationReasonDeprecatedInput(ctx context.Context, v interface{}) (types.UpdateCancellationReasonDeprecatedInput, error) {
	res, err := ec.unmarshalInputUpdateCancellationReasonDeprecatedInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCancellationReasonTitleInput2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCancellationReasonTitleInput(ctx context.Context, v interface{}) (types.UpdateCancellationReasonTitleInput, error) {
	res, err := ec.unmarshalInputUpdateCancellationReasonTitleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVideoContainer2overdollᚋlibrariesᚋgraphqlᚐVideoContainer(ctx context.Context, sel ast.SelectionSet, v graphql1.VideoContainer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VideoContainer(ctx, sel, v)
}

func (ec *executionContext) marshalNVideoContainer2ᚕoverdollᚋlibrariesᚋgraphqlᚐVideoContainerᚄ(ctx context.Context, sel ast.SelectionSet, v []graphql1.VideoContainer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVideoContainer2overdollᚋlibrariesᚋgraphqlᚐVideoContainer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN_Any2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_Any2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_Any2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_Any2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN_Any2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_Any2map(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v []fedruntime.Entity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccountClubSupporterSubscription2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscription(ctx context.Context, sel ast.SelectionSet, v types.AccountClubSupporterSubscription) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountClubSupporterSubscription(ctx, sel, v)
}

func (ec *executionContext) marshalOAccountClubSupporterSubscriptionBillingError2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionBillingError(ctx context.Context, sel ast.SelectionSet, v *types.AccountClubSupporterSubscriptionBillingError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountClubSupporterSubscriptionBillingError(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountClubSupporterSubscriptionStatus2ᚕoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionStatusᚄ(ctx context.Context, v interface{}) ([]types.AccountClubSupporterSubscriptionStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]types.AccountClubSupporterSubscriptionStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountClubSupporterSubscriptionStatus2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAccountClubSupporterSubscriptionStatus2ᚕoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []types.AccountClubSupporterSubscriptionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountClubSupporterSubscriptionStatus2overdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountClubSupporterSubscriptionStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAccountTransaction2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransaction(ctx context.Context, sel ast.SelectionSet, v *types.AccountTransaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountTransaction(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountTransactionType2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionType(ctx context.Context, v interface{}) (*types.AccountTransactionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.AccountTransactionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountTransactionType2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccountTransactionType(ctx context.Context, sel ast.SelectionSet, v *types.AccountTransactionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBCP472ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBCP472ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOBecomeClubSupporterWithAccountSavedPaymentMethodPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐBecomeClubSupporterWithAccountSavedPaymentMethodPayload(ctx context.Context, sel ast.SelectionSet, v *types.BecomeClubSupporterWithAccountSavedPaymentMethodPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BecomeClubSupporterWithAccountSavedPaymentMethodPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOBillingAddress2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐBillingAddress(ctx context.Context, sel ast.SelectionSet, v *types.BillingAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BillingAddress(ctx, sel, v)
}

func (ec *executionContext) marshalOBillingContact2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐBillingContact(ctx context.Context, sel ast.SelectionSet, v *types.BillingContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BillingContact(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCCBillDeclineError2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillDeclineError(ctx context.Context, v interface{}) (*types.CCBillDeclineError, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.CCBillDeclineError)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCCBillDeclineError2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillDeclineError(ctx context.Context, sel ast.SelectionSet, v *types.CCBillDeclineError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCCBillSubscription2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscription(ctx context.Context, sel ast.SelectionSet, v *types.CCBillSubscription) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CCBillSubscription(ctx, sel, v)
}

func (ec *executionContext) marshalOCCBillSubscriptionDetails2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillSubscriptionDetails(ctx context.Context, sel ast.SelectionSet, v *types.CCBillSubscriptionDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CCBillSubscriptionDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOCCBillTransaction2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillTransaction(ctx context.Context, sel ast.SelectionSet, v *types.CCBillTransaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CCBillTransaction(ctx, sel, v)
}

func (ec *executionContext) marshalOCCBillTransactionDetails2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCCBillTransactionDetails(ctx context.Context, sel ast.SelectionSet, v *types.CCBillTransactionDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CCBillTransactionDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOCancelAccountClubSupporterSubscriptionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancelAccountClubSupporterSubscriptionPayload(ctx context.Context, sel ast.SelectionSet, v *types.CancelAccountClubSupporterSubscriptionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CancelAccountClubSupporterSubscriptionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCancelActiveSupporterSubscriptionsForClubPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancelActiveSupporterSubscriptionsForClubPayload(ctx context.Context, sel ast.SelectionSet, v *types.CancelActiveSupporterSubscriptionsForClubPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CancelActiveSupporterSubscriptionsForClubPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCancellationReason2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCancellationReason(ctx context.Context, sel ast.SelectionSet, v *types.CancellationReason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CancellationReason(ctx, sel, v)
}

func (ec *executionContext) marshalOClub2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx context.Context, sel ast.SelectionSet, v *types.Club) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Club(ctx, sel, v)
}

func (ec *executionContext) marshalOCreateCancellationReasonPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCancellationReasonPayload(ctx context.Context, sel ast.SelectionSet, v *types.CreateCancellationReasonPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateCancellationReasonPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalODate2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql1.UnmarshalDate(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql1.MarshalDate(*v)
	return res
}

func (ec *executionContext) marshalODeleteAccountSavedPaymentMethodPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐDeleteAccountSavedPaymentMethodPayload(ctx context.Context, sel ast.SelectionSet, v *types.DeleteAccountSavedPaymentMethodPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteAccountSavedPaymentMethodPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOExtendAccountClubSupporterSubscriptionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐExtendAccountClubSupporterSubscriptionPayload(ctx context.Context, sel ast.SelectionSet, v *types.ExtendAccountClubSupporterSubscriptionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExtendAccountClubSupporterSubscriptionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOGenerateCCBillClubSupporterPaymentLinkPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateCCBillClubSupporterPaymentLinkPayload(ctx context.Context, sel ast.SelectionSet, v *types.GenerateCCBillClubSupporterPaymentLinkPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GenerateCCBillClubSupporterPaymentLinkPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOGenerateClubSupporterPaymentReceiptFromAccountTransactionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateClubSupporterPaymentReceiptFromAccountTransactionPayload(ctx context.Context, sel ast.SelectionSet, v *types.GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GenerateClubSupporterPaymentReceiptFromAccountTransactionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOGenerateClubSupporterRefundReceiptFromAccountTransactionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateClubSupporterRefundReceiptFromAccountTransactionPayload(ctx context.Context, sel ast.SelectionSet, v *types.GenerateClubSupporterRefundReceiptFromAccountTransactionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GenerateClubSupporterRefundReceiptFromAccountTransactionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOGenerateRefundAmountForAccountTransactionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐGenerateRefundAmountForAccountTransactionPayload(ctx context.Context, sel ast.SelectionSet, v *types.GenerateRefundAmountForAccountTransactionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GenerateRefundAmountForAccountTransactionPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOMediaProgress2ᚖoverdollᚋlibrariesᚋgraphqlᚐMediaProgress(ctx context.Context, sel ast.SelectionSet, v *graphql1.MediaProgress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MediaProgress(ctx, sel, v)
}

func (ec *executionContext) marshalORefundAccountTransactionPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐRefundAccountTransactionPayload(ctx context.Context, sel ast.SelectionSet, v *types.RefundAccountTransactionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RefundAccountTransactionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalORefundAmount2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐRefundAmount(ctx context.Context, sel ast.SelectionSet, v *types.RefundAmount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RefundAmount(ctx, sel, v)
}

func (ec *executionContext) marshalOResourceProgress2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceProgress(ctx context.Context, sel ast.SelectionSet, v *graphql1.ResourceProgress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ResourceProgress(ctx, sel, v)
}

func (ec *executionContext) marshalOResourceUrl2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURL(ctx context.Context, sel ast.SelectionSet, v *graphql1.ResourceURL) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ResourceUrl(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOURI2ᚖoverdollᚋlibrariesᚋgraphqlᚐURI(ctx context.Context, v interface{}) (*graphql1.URI, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(graphql1.URI)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURI2ᚖoverdollᚋlibrariesᚋgraphqlᚐURI(ctx context.Context, sel ast.SelectionSet, v *graphql1.URI) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOUpdateCancellationReasonDeprecatedPayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCancellationReasonDeprecatedPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateCancellationReasonDeprecatedPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCancellationReasonDeprecatedPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateCancellationReasonTitlePayload2ᚖoverdollᚋapplicationsᚋhadesᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCancellationReasonTitlePayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateCancellationReasonTitlePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCancellationReasonTitlePayload(ctx, sel, v)
}

func (ec *executionContext) marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v fedruntime.Entity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__Entity(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
