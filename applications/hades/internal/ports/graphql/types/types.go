// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	graphql1 "overdoll/libraries/graphql"
	"overdoll/libraries/graphql/relay"
	"strconv"
	"time"
)

type AccountTransactionHistory interface {
	IsAccountTransactionHistory()
}

type IAccountTransactionHistory interface {
	IsIAccountTransactionHistory()
}

type Account struct {
	// Club supporter subscriptions linked to this account.
	ClubSupporterSubscriptions *AccountClubSupporterSubscriptionConnection `json:"clubSupporterSubscriptions"`
	// Saved payment methods linked to this account.
	SavedPaymentMethods *AccountSavedPaymentMethodConnection `json:"savedPaymentMethods"`
	// Transaction history for this account.
	TransactionHistory *AccountTransactionHistoryConnection `json:"transactionHistory"`
	ID                 relay.ID                             `json:"id"`
}

func (Account) IsEntity() {}

// Occurs when a club supporter subscription is cancelled.
type AccountCancelledTransactionHistory struct {
	// An ID to uniquely identify this transaction history.
	ID relay.ID `json:"id"`
	// The type of account transaction history, or what it belongs to.
	Transaction AccountTransactionType `json:"transaction"`
	// The account linked to this transaction history.
	Account *Account `json:"account"`
	// The club that was supported as part of this transaction history.
	SupportedClub *Club `json:"supportedClub"`
	// If this is a ccbill transaction, the reason for the cancellation.
	CcbillReason *string `json:"ccbillReason"`
	// A ccbill subscription transaction, if this transaction originated from ccbill.
	CcbillSubscriptionTransaction *CCBillSubscriptionTransaction `json:"ccbillSubscriptionTransaction"`
	// When this transaction occurred.
	Timestamp time.Time `json:"timestamp"`
}

func (AccountCancelledTransactionHistory) IsAccountTransactionHistory()  {}
func (AccountCancelledTransactionHistory) IsIAccountTransactionHistory() {}

// Occurs when a transaction is charged back.
type AccountChargebackTransactionHistory struct {
	// An ID to uniquely identify this transaction history.
	ID relay.ID `json:"id"`
	// The type of account transaction history, or what it belongs to.
	Transaction AccountTransactionType `json:"transaction"`
	// The account linked to this transaction history.
	Account *Account `json:"account"`
	// The amount charged back.
	//
	// A positive integer representing the currency in the smallest currency unit.
	Amount int `json:"amount"`
	// The currency charged back in.
	Currency Currency `json:"currency"`
	// The club that was supported as part of this transaction history.
	SupportedClub *Club `json:"supportedClub"`
	// If this is a ccbill transaction, the reason for the chargeback.
	CcbillReason *string `json:"ccbillReason"`
	// The payment method linked to this chargeback (only card will be available).
	PaymentMethod *PaymentMethod `json:"paymentMethod"`
	// A ccbill subscription transaction, if this transaction originated from ccbill.
	CcbillSubscriptionTransaction *CCBillSubscriptionTransaction `json:"ccbillSubscriptionTransaction"`
	// When this transaction occurred.
	Timestamp time.Time `json:"timestamp"`
}

func (AccountChargebackTransactionHistory) IsAccountTransactionHistory()  {}
func (AccountChargebackTransactionHistory) IsIAccountTransactionHistory() {}

// An account club supporter subscription.
type AccountClubSupporterSubscription struct {
	// An ID to uniquely identify this subscription.
	ID relay.ID `json:"id"`
	// The account linked to this subscription.
	Account *Account `json:"account"`
	// The club linked to this subscription.
	Club *Club `json:"club"`
	// The status of this subscription.
	Status AccountClubSupporterSubscriptionStatus `json:"status"`
	// When the account first became a supporter.
	SupporterSince time.Time `json:"supporterSince"`
	// The last billing date for this subscription.
	LastBillingDate time.Time `json:"lastBillingDate"`
	// The next billing date for this subscription.
	NextBillingDate time.Time `json:"nextBillingDate"`
	// When this subscription was cancelled.
	CancelledAt *time.Time `json:"cancelledAt"`
	// The billing amount.
	BillingAmount int `json:"billingAmount"`
	// The currency.
	BillingCurrency Currency `json:"billingCurrency"`
	// The payment method linked to this subscription.
	PaymentMethod *PaymentMethod `json:"paymentMethod"`
	// The ccbill subscription.
	CcbillSubscription *CCBillSubscription `json:"ccbillSubscription"`
	// When this subscription was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The reason this subscription was cancelled, if there is one.
	CancellationReason *CancellationReason `json:"cancellationReason"`
}

// Connection of the account club supporter subscription
type AccountClubSupporterSubscriptionConnection struct {
	Edges    []*AccountClubSupporterSubscriptionEdge `json:"edges"`
	PageInfo *relay.PageInfo                         `json:"pageInfo"`
}

// Edge of the account club supporter subscriptions
type AccountClubSupporterSubscriptionEdge struct {
	Node   *AccountClubSupporterSubscription `json:"node"`
	Cursor string                            `json:"cursor"`
}

// Occurs when a transaction subscription is expired (cancelled and the subscription end was reached).
type AccountExpiredTransactionHistory struct {
	// An ID to uniquely identify this transaction history.
	ID relay.ID `json:"id"`
	// The type of account transaction history, or what it belongs to.
	Transaction AccountTransactionType `json:"transaction"`
	// The account linked to this transaction history.
	Account *Account `json:"account"`
	// The club that was supported as part of this transaction history.
	SupportedClub *Club `json:"supportedClub"`
	// A ccbill subscription transaction, if this transaction originated from ccbill.
	CcbillSubscriptionTransaction *CCBillSubscriptionTransaction `json:"ccbillSubscriptionTransaction"`
	// When this transaction occurred.
	Timestamp time.Time `json:"timestamp"`
}

func (AccountExpiredTransactionHistory) IsAccountTransactionHistory()  {}
func (AccountExpiredTransactionHistory) IsIAccountTransactionHistory() {}

// Occurs when a transaction subscription is failed to be billed.
type AccountFailedTransactionHistory struct {
	// An ID to uniquely identify this transaction history.
	ID relay.ID `json:"id"`
	// The type of account transaction history, or what it belongs to.
	Transaction AccountTransactionType `json:"transaction"`
	// The account linked to this transaction history.
	Account *Account `json:"account"`
	// The next retry date for this transaction.
	NextRetryDate time.Time `json:"nextRetryDate"`
	// The club that was supported as part of this transaction history.
	SupportedClub *Club `json:"supportedClub"`
	// If this is a CCBill transaction, the error code and error text.
	CcbillErrorCode *string `json:"ccbillErrorCode"`
	CcbillErrorText *string `json:"ccbillErrorText"`
	// A ccbill subscription transaction, if this transaction originated from ccbill.
	CcbillSubscriptionTransaction *CCBillSubscriptionTransaction `json:"ccbillSubscriptionTransaction"`
	// When this transaction occurred.
	Timestamp time.Time `json:"timestamp"`
}

func (AccountFailedTransactionHistory) IsAccountTransactionHistory()  {}
func (AccountFailedTransactionHistory) IsIAccountTransactionHistory() {}

// Occurs when a subscription is rebilled.
type AccountInvoiceTransactionHistory struct {
	// An ID to uniquely identify this transaction history.
	ID relay.ID `json:"id"`
	// The type of account transaction history, or what it belongs to.
	Transaction AccountTransactionType `json:"transaction"`
	// The account linked to this transaction history.
	Account *Account `json:"account"`
	// The amount charged.
	//
	// A positive integer representing the currency in the smallest currency unit.
	Amount int `json:"amount"`
	// The currency charged in.
	Currency Currency `json:"currency"`
	// When the billing occurred.
	BilledAtDate time.Time `json:"billedAtDate"`
	// The next billing date for this subscription.
	NextBillingDate time.Time `json:"nextBillingDate"`
	// The payment method linked to this new transaction history.
	PaymentMethod *PaymentMethod `json:"paymentMethod"`
	// The club that was supported as part of this transaction history.
	SupportedClub *Club `json:"supportedClub"`
	// A ccbill subscription transaction, if this transaction originated from ccbill.
	CcbillSubscriptionTransaction *CCBillSubscriptionTransaction `json:"ccbillSubscriptionTransaction"`
	// When this transaction occurred.
	Timestamp time.Time `json:"timestamp"`
}

func (AccountInvoiceTransactionHistory) IsAccountTransactionHistory()  {}
func (AccountInvoiceTransactionHistory) IsIAccountTransactionHistory() {}

// Occurs when a new transaction history is created (usually a new subscription).
type AccountNewTransactionHistory struct {
	// An ID to uniquely identify this transaction history.
	ID relay.ID `json:"id"`
	// The type of account transaction history, or what it belongs to.
	Transaction AccountTransactionType `json:"transaction"`
	// The account linked to this transaction history.
	Account *Account `json:"account"`
	// The amount charged.
	//
	// A positive integer representing the currency in the smallest currency unit.
	Amount int `json:"amount"`
	// The currency charged in.
	Currency Currency `json:"currency"`
	// When the billing occurred.
	BilledAtDate time.Time `json:"billedAtDate"`
	// The next billing date for this subscription.
	NextBillingDate time.Time `json:"nextBillingDate"`
	// The payment method linked to this new transaction history.
	PaymentMethod *PaymentMethod `json:"paymentMethod"`
	// The club that was supported as part of this transaction history.
	SupportedClub *Club `json:"supportedClub"`
	// A ccbill subscription transaction, if this transaction originated from ccbill.
	CcbillSubscriptionTransaction *CCBillSubscriptionTransaction `json:"ccbillSubscriptionTransaction"`
	// When this transaction occurred.
	Timestamp time.Time `json:"timestamp"`
}

func (AccountNewTransactionHistory) IsAccountTransactionHistory()  {}
func (AccountNewTransactionHistory) IsIAccountTransactionHistory() {}

// Occurs when a transaction subscription is reactivated (after being cancelled).
type AccountReactivatedTransactionHistory struct {
	// An ID to uniquely identify this transaction history.
	ID relay.ID `json:"id"`
	// The type of account transaction history, or what it belongs to.
	Transaction AccountTransactionType `json:"transaction"`
	// The account linked to this transaction history.
	Account *Account `json:"account"`
	// The next billing date for this subscription.
	NextBillingDate time.Time `json:"nextBillingDate"`
	// The club that was supported as part of this transaction history.
	SupportedClub *Club `json:"supportedClub"`
	// A ccbill subscription transaction, if this transaction originated from ccbill.
	CcbillSubscriptionTransaction *CCBillSubscriptionTransaction `json:"ccbillSubscriptionTransaction"`
	// When this transaction occurred.
	Timestamp time.Time `json:"timestamp"`
}

func (AccountReactivatedTransactionHistory) IsAccountTransactionHistory()  {}
func (AccountReactivatedTransactionHistory) IsIAccountTransactionHistory() {}

// Occurs when a transaction is refunded.
type AccountRefundTransactionHistory struct {
	// An ID to uniquely identify this transaction history.
	ID relay.ID `json:"id"`
	// The type of account transaction history, or what it belongs to.
	Transaction AccountTransactionType `json:"transaction"`
	// The account linked to this transaction history.
	Account *Account `json:"account"`
	// The amount refunded.
	//
	// A positive integer representing the currency in the smallest currency unit.
	Amount int `json:"amount"`
	// The currency refunded in.
	Currency Currency `json:"currency"`
	// The club that was supported as part of this transaction history.
	SupportedClub *Club `json:"supportedClub"`
	// The payment method linked to this refund (only card will be available).
	PaymentMethod *PaymentMethod `json:"paymentMethod"`
	// If this is a ccbill transaction, the reason for the refund.
	CcbillReason *string `json:"ccbillReason"`
	// A ccbill subscription transaction, if this transaction originated from ccbill.
	CcbillSubscriptionTransaction *CCBillSubscriptionTransaction `json:"ccbillSubscriptionTransaction"`
	// When this transaction occurred.
	Timestamp time.Time `json:"timestamp"`
}

func (AccountRefundTransactionHistory) IsAccountTransactionHistory()  {}
func (AccountRefundTransactionHistory) IsIAccountTransactionHistory() {}

type AccountSavedPaymentMethod struct {
	// An ID to uniquely identify this payment method.
	ID relay.ID `json:"id"`
	// The account linked to this saved payment method.
	Account *Account `json:"account"`
	// The payment method.
	PaymentMethod *PaymentMethod `json:"paymentMethod"`
	// The ccbill subscription.
	CcbillSubscription *CCBillSubscription `json:"ccbillSubscription"`
	// When this payment method was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Connection of the account saved payment method
type AccountSavedPaymentMethodConnection struct {
	Edges    []*AccountSavedPaymentMethodEdge `json:"edges"`
	PageInfo *relay.PageInfo                  `json:"pageInfo"`
}

// Edge of the account saved payment method
type AccountSavedPaymentMethodEdge struct {
	Node   *AccountSavedPaymentMethod `json:"node"`
	Cursor string                     `json:"cursor"`
}

// Connection of the account transaction history.
type AccountTransactionHistoryConnection struct {
	Edges    []*AccountTransactionHistoryEdge `json:"edges"`
	PageInfo *relay.PageInfo                  `json:"pageInfo"`
}

// Edge of the the account transaction history.
type AccountTransactionHistoryEdge struct {
	Node   AccountTransactionHistory `json:"node"`
	Cursor string                    `json:"cursor"`
}

// Occurs when a transaction is voided.
type AccountVoidTransactionHistory struct {
	// An ID to uniquely identify this transaction history.
	ID relay.ID `json:"id"`
	// The type of account transaction history, or what it belongs to.
	Transaction AccountTransactionType `json:"transaction"`
	// The account linked to this transaction history.
	Account *Account `json:"account"`
	// The amount voided.
	//
	// A positive integer representing the currency in the smallest currency unit.
	Amount int `json:"amount"`
	// The currency voided in.
	Currency Currency `json:"currency"`
	// The club that was supported as part of this transaction history.
	SupportedClub *Club `json:"supportedClub"`
	// If this is a ccbill transaction, the reason for the void.
	CcbillReason *string `json:"ccbillReason"`
	// A ccbill subscription transaction, if this transaction originated from ccbill.
	CcbillSubscriptionTransaction *CCBillSubscriptionTransaction `json:"ccbillSubscriptionTransaction"`
	// When this transaction occurred.
	Timestamp time.Time `json:"timestamp"`
}

func (AccountVoidTransactionHistory) IsAccountTransactionHistory()  {}
func (AccountVoidTransactionHistory) IsIAccountTransactionHistory() {}

// Become club supporter with saved payment method.
type BecomeClubSupporterWithAccountSavedPaymentMethodInput struct {
	// The chosen club ID.
	ClubID relay.ID `json:"clubId"`
	// The chosen currency.
	Currency Currency `json:"currency"`
	// The chosen saved payment method.
	SavedPaymentMethodID relay.ID `json:"savedPaymentMethodId"`
}

// Payload for a new club supporter
type BecomeClubSupporterWithAccountSavedPaymentMethodPayload struct {
	// CCBill Transaction Token, if this was a ccbill transaction. Used to query more details about this transaction.
	CcbillTransactionToken *string `json:"ccbillTransactionToken"`
}

// Represents a billing address.
type BillingAddress struct {
	AddressLine1 string `json:"addressLine1"`
	City         string `json:"city"`
	State        string `json:"state"`
	Country      string `json:"country"`
	PostalCode   string `json:"postalCode"`
}

// Represents a billing contact.
type BillingContact struct {
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phoneNumber"`
}

// The ccbill subscription details.
//
// When this object is present, this means that it can only be updated through CCBill support. https://support.ccbill.com/
//
// For example: active subscriptions' payment methods can only be updated through support, or any saved payment methods.
type CCBillSubscription struct {
	PaymentMethod        string `json:"paymentMethod"`
	CcbillSubscriptionID string `json:"ccbillSubscriptionId"`
	Email                string `json:"email"`
}

type CCBillSubscriptionDetails struct {
	// The ID of the subscription.
	ID relay.ID `json:"id"`
	// The status of the CCBill subscription.
	Status CCBillSubscriptionStatus `json:"status"`
	// Payment method linked to this CCBill subscription.
	PaymentMethod *PaymentMethod `json:"paymentMethod"`
	// The club linked to this ccbill subscription, if there is one.
	Club *Club `json:"club"`
	// The account linked to this ccbill subscription.
	Account *Account `json:"account"`
	// Subscription details.
	SubscriptionInitialPrice   int      `json:"subscriptionInitialPrice"`
	SubscriptionRecurringPrice int      `json:"subscriptionRecurringPrice"`
	SubscriptionCurrency       Currency `json:"subscriptionCurrency"`
	// Billed details.
	BilledInitialPrice   int      `json:"billedInitialPrice"`
	BilledRecurringPrice int      `json:"billedRecurringPrice"`
	BilledCurrency       Currency `json:"billedCurrency"`
	// Accounting details.
	AccountingInitialPrice   int      `json:"accountingInitialPrice"`
	AccountingRecurringPrice int      `json:"accountingRecurringPrice"`
	AccountingCurrency       Currency `json:"accountingCurrency"`
	// Whether or not this is recurring, or a one-time charge.
	IsRecurring bool `json:"isRecurring"`
	// The amount of rebills that occurred.
	TimesRebilled int `json:"timesRebilled"`
	// The amount of chargebacks issued.
	ChargebacksIssued int `json:"chargebacksIssued"`
	// The amount of refunds issued.
	RefundsIssued int `json:"refundsIssued"`
	// The amount of voids issued.
	VoidsIssued int `json:"voidsIssued"`
	// The signup date.
	SignupDate time.Time `json:"signupDate"`
	// If this subscription was cancelled, the expiration date.
	ExpirationDate *time.Time `json:"expirationDate"`
	// If this subscription was cancelled, the date it occurred.
	CancelDate *time.Time `json:"cancelDate"`
	// When this subscription was updated last.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Represents a CCBill transaction, which may or may not contain these fields.
type CCBillSubscriptionTransaction struct {
	CcbillSubscriptionID string `json:"ccbillSubscriptionId"`
}

type CCBillTransactionDetails struct {
	// An ID uniquely identifying this transaction.
	ID relay.ID `json:"id"`
	// Whether or not the transaction was approved.
	Approved bool `json:"approved"`
	// The error from CCBill, if the transaction was not approved.
	DeclineError *CCBillDeclineError `json:"declineError"`
	// The decline code from CCBill.
	DeclineCode *string `json:"declineCode"`
	// The decline text from CCBill.
	DeclineText *string `json:"declineText"`
	// If this transaction was approved, poll this field to until this is not null anymore.
	//
	// This signifies that the transaction has processed successfully (on our end),
	//
	// and the supporter benefits are now available.
	LinkedAccountClubSupporterSubscription *AccountClubSupporterSubscription `json:"linkedAccountClubSupporterSubscription"`
}

// Cancel account club supporter subscription input.
type CancelAccountClubSupporterSubscriptionInput struct {
	// The chosen club supporter subscription id.
	ClubSupporterSubscriptionID relay.ID `json:"clubSupporterSubscriptionId"`
	// The cancellation reason for this subscription.
	CancellationReasonID relay.ID `json:"cancellationReasonId"`
}

// Payload for cancelling the account club supporter.
type CancelAccountClubSupporterSubscriptionPayload struct {
	// The new subscription.
	ClubSupporterSubscription *AccountClubSupporterSubscription `json:"clubSupporterSubscription"`
}

// Cancellation reason.
type CancellationReason struct {
	// ID of the reason.
	ID relay.ID `json:"id"`
	// Reference of the reason. Should be used for single lookups.
	Reference string `json:"reference"`
	// The title for this reason.
	Title string `json:"title"`
	// All translations for this title.
	TitleTranslations []*Translation `json:"titleTranslations"`
	// If this reason is deprecated.
	Deprecated bool `json:"deprecated"`
}

func (CancellationReason) IsNode()   {}
func (CancellationReason) IsEntity() {}

// Connection of the reason
type CancellationReasonConnection struct {
	Edges    []*CancellationReasonEdge `json:"edges"`
	PageInfo *relay.PageInfo           `json:"pageInfo"`
}

// Edge of the reason
type CancellationReasonEdge struct {
	Node   *CancellationReason `json:"node"`
	Cursor string              `json:"cursor"`
}

// Represents a card.
type Card struct {
	// Last 4 digits of the card.
	Last4 string `json:"last4"`
	// The expiration date.
	Expiration string `json:"expiration"`
	// The type of card.
	Type CardType `json:"type"`
}

type Club struct {
	// A supporter subscription price for this club.
	SupporterSubscriptionPrice *LocalizedPricingPoint `json:"supporterSubscriptionPrice"`
	ID                         relay.ID               `json:"id"`
}

func (Club) IsEntity() {}

// Create a new cancellation reason input.
type CreateCancellationReasonInput struct {
	// The title.
	Title string `json:"title"`
}

// Updated cancellation reason.
type CreateCancellationReasonPayload struct {
	// The updated cancellation reason.
	CancellationReason *CancellationReason `json:"cancellationReason"`
}

// Delete an account saved payment method input.
type DeleteAccountSavedPaymentMethodInput struct {
	// The chosen saved payment method id.
	SavedPaymentMethodID relay.ID `json:"savedPaymentMethodId"`
}

// Payload for deleting an account saved payment method.
type DeleteAccountSavedPaymentMethodPayload struct {
	// The deleted saved payment method.
	DeletedAccountSavedPaymentMethodID relay.ID `json:"deletedAccountSavedPaymentMethodId"`
}

// Extend account club supporter subscription input.
type ExtendAccountClubSupporterSubscriptionInput struct {
	// The chosen club supporter subscription id.
	ClubSupporterSubscriptionID relay.ID `json:"clubSupporterSubscriptionId"`
	// The amount of days to extend it for.
	Days int `json:"days"`
}

// Payload for extending the account club supporter.
type ExtendAccountClubSupporterSubscriptionPayload struct {
	// The new subscription.
	ClubSupporterSubscription *AccountClubSupporterSubscription `json:"clubSupporterSubscription"`
}

// Generate ccbill club supporter payment link.
type GenerateCCBillClubSupporterPaymentLinkInput struct {
	// The chosen club ID.
	ClubID relay.ID `json:"clubId"`
	// The chosen currency.
	Currency Currency `json:"currency"`
	// Whether or not we want to save the payment details for later.
	SavePaymentDetailsForLater bool `json:"savePaymentDetailsForLater"`
}

// Payload for a new ccbill payment link
type GenerateCCBillClubSupporterPaymentLinkPayload struct {
	// The payment link to use.
	PaymentLink *graphql1.URI `json:"paymentLink"`
}

// Generate club supporter receipt input.
type GenerateClubSupporterReceiptFromAccountTransactionHistoryInput struct {
	// The id of the transaction history.
	TransactionHistoryID relay.ID `json:"transactionHistoryId"`
}

// Payload for generating the receipt.
type GenerateClubSupporterReceiptFromAccountTransactionHistoryPayload struct {
	// The link to the receipt.
	Link *graphql1.URI `json:"link"`
}

// Generate a refund amount.
type GenerateRefundAmountForAccountClubSupporterSubscriptionInput struct {
	// The id of the subscription.
	ClubSupporterSubscriptionID relay.ID `json:"clubSupporterSubscriptionId"`
}

// Payload for generating the receipt.
type GenerateRefundAmountForAccountClubSupporterSubscriptionPayload struct {
	// The refund amount.
	RefundAmount *RefundAmount `json:"refundAmount"`
}

type Language struct {
	// BCP47 locale
	Locale string `json:"locale"`
	// Fully qualified name
	Name string `json:"name"`
}

// Type describing a localized pricing point.
type LocalizedPricingPoint struct {
	// Price for your current location + currency.
	LocalizedPrice *Price `json:"localizedPrice"`
	// All other prices in different currencies.
	Prices []*Price `json:"prices"`
}

// A payment method.
type PaymentMethod struct {
	// Card linked to this payment method.
	Card *Card `json:"card"`
	// Billing address of this card.
	BillingAddress *BillingAddress `json:"billingAddress"`
	// Billing contact of this card.
	BillingContact *BillingContact `json:"billingContact"`
}

// Type describing a price.
type Price struct {
	// The amount.
	//
	// A positive integer representing the currency in the smallest currency unit.
	Amount int `json:"amount"`
	// The currency the amount is represented in.
	Currency Currency `json:"currency"`
}

// A generated refund amount.
type RefundAmount struct {
	// A prorated refund amount, based on the first date and last date of billing / billing duration.
	//
	// A positive integer representing the currency in the smallest currency unit.
	ProratedAmount int `json:"proratedAmount"`
	// The maximum amount you can issue a refund for.
	//
	// A positive integer representing the currency in the smallest currency unit.
	MaximumAmount int `json:"maximumAmount"`
	// The currency.
	Currency Currency `json:"currency"`
}

type Translation struct {
	// The language linked to this translation.
	Language *Language `json:"language"`
	// The translation text.
	Text string `json:"text"`
}

// Update reason.
type UpdateCancellationReasonDeprecatedInput struct {
	// The cancellation reason to update.
	CancellationReasonID relay.ID `json:"cancellationReasonId"`
	// The deprecated status.
	Deprecated bool `json:"deprecated"`
}

// Updated reason.
type UpdateCancellationReasonDeprecatedPayload struct {
	// The updated reason.
	CancellationReason *CancellationReason `json:"cancellationReason"`
}

// Update cancellation reason.
type UpdateCancellationReasonTitleInput struct {
	// The reason to update.
	CancellationReasonID relay.ID `json:"cancellationReasonId"`
	// The title to update
	Title string `json:"title"`
	// The localization for this title.
	Locale string `json:"locale"`
}

// Updated reason.
type UpdateCancellationReasonTitlePayload struct {
	// The updated reason.
	CancellationReason *CancellationReason `json:"cancellationReason"`
}

// Void or refund account club supporter subscription.
type VoidOrRefundAccountClubSupporterSubscriptionInput struct {
	// The id of the subscription.
	ClubSupporterSubscriptionID relay.ID `json:"clubSupporterSubscriptionId"`
	// The amount to refund.
	//
	// A positive integer representing the currency in the smallest currency unit.
	Amount int `json:"amount"`
}

// Payload for voiding or refunding account club supporter subscription.
type VoidOrRefundAccountClubSupporterSubscriptionPayload struct {
	// The id of the subscription, deleted.
	DeletedClubSupporterSubscriptionID relay.ID `json:"deletedClubSupporterSubscriptionId"`
}

type AccountClubSupporterSubscriptionStatus string

const (
	AccountClubSupporterSubscriptionStatusActive    AccountClubSupporterSubscriptionStatus = "ACTIVE"
	AccountClubSupporterSubscriptionStatusCancelled AccountClubSupporterSubscriptionStatus = "CANCELLED"
)

var AllAccountClubSupporterSubscriptionStatus = []AccountClubSupporterSubscriptionStatus{
	AccountClubSupporterSubscriptionStatusActive,
	AccountClubSupporterSubscriptionStatusCancelled,
}

func (e AccountClubSupporterSubscriptionStatus) IsValid() bool {
	switch e {
	case AccountClubSupporterSubscriptionStatusActive, AccountClubSupporterSubscriptionStatusCancelled:
		return true
	}
	return false
}

func (e AccountClubSupporterSubscriptionStatus) String() string {
	return string(e)
}

func (e *AccountClubSupporterSubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountClubSupporterSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountClubSupporterSubscriptionStatus", str)
	}
	return nil
}

func (e AccountClubSupporterSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AccountTransactionType string

const (
	AccountTransactionTypeClubSupporterSubscription AccountTransactionType = "CLUB_SUPPORTER_SUBSCRIPTION"
)

var AllAccountTransactionType = []AccountTransactionType{
	AccountTransactionTypeClubSupporterSubscription,
}

func (e AccountTransactionType) IsValid() bool {
	switch e {
	case AccountTransactionTypeClubSupporterSubscription:
		return true
	}
	return false
}

func (e AccountTransactionType) String() string {
	return string(e)
}

func (e *AccountTransactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountTransactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountTransactionType", str)
	}
	return nil
}

func (e AccountTransactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CCBillDeclineError string

const (
	CCBillDeclineErrorGeneralSystemError               CCBillDeclineError = "GENERAL_SYSTEM_ERROR"
	CCBillDeclineErrorTransactionDeclined              CCBillDeclineError = "TRANSACTION_DECLINED"
	CCBillDeclineErrorTransactionDeniedOrRefusedByBank CCBillDeclineError = "TRANSACTION_DENIED_OR_REFUSED_BY_BANK"
	CCBillDeclineErrorCardExpired                      CCBillDeclineError = "CARD_EXPIRED"
	CCBillDeclineErrorInsufficientFunds                CCBillDeclineError = "INSUFFICIENT_FUNDS"
	CCBillDeclineErrorRateLimitError                   CCBillDeclineError = "RATE_LIMIT_ERROR"
	CCBillDeclineErrorTransactionApprovalRequired      CCBillDeclineError = "TRANSACTION_APPROVAL_REQUIRED"
)

var AllCCBillDeclineError = []CCBillDeclineError{
	CCBillDeclineErrorGeneralSystemError,
	CCBillDeclineErrorTransactionDeclined,
	CCBillDeclineErrorTransactionDeniedOrRefusedByBank,
	CCBillDeclineErrorCardExpired,
	CCBillDeclineErrorInsufficientFunds,
	CCBillDeclineErrorRateLimitError,
	CCBillDeclineErrorTransactionApprovalRequired,
}

func (e CCBillDeclineError) IsValid() bool {
	switch e {
	case CCBillDeclineErrorGeneralSystemError, CCBillDeclineErrorTransactionDeclined, CCBillDeclineErrorTransactionDeniedOrRefusedByBank, CCBillDeclineErrorCardExpired, CCBillDeclineErrorInsufficientFunds, CCBillDeclineErrorRateLimitError, CCBillDeclineErrorTransactionApprovalRequired:
		return true
	}
	return false
}

func (e CCBillDeclineError) String() string {
	return string(e)
}

func (e *CCBillDeclineError) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CCBillDeclineError(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CCBillDeclineError", str)
	}
	return nil
}

func (e CCBillDeclineError) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CCBillSubscriptionStatus string

const (
	// An inactive subscription, i.e. expired.
	CCBillSubscriptionStatusInactive CCBillSubscriptionStatus = "INACTIVE"
	// An active subscription that was cancelled, or a one-time charge.
	CCBillSubscriptionStatusActiveAndCancelled CCBillSubscriptionStatus = "ACTIVE_AND_CANCELLED"
	// An active subscription that is not cancelled.
	CCBillSubscriptionStatusActiveAndNotCancelled CCBillSubscriptionStatus = "ACTIVE_AND_NOT_CANCELLED"
)

var AllCCBillSubscriptionStatus = []CCBillSubscriptionStatus{
	CCBillSubscriptionStatusInactive,
	CCBillSubscriptionStatusActiveAndCancelled,
	CCBillSubscriptionStatusActiveAndNotCancelled,
}

func (e CCBillSubscriptionStatus) IsValid() bool {
	switch e {
	case CCBillSubscriptionStatusInactive, CCBillSubscriptionStatusActiveAndCancelled, CCBillSubscriptionStatusActiveAndNotCancelled:
		return true
	}
	return false
}

func (e CCBillSubscriptionStatus) String() string {
	return string(e)
}

func (e *CCBillSubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CCBillSubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CCBillSubscriptionStatus", str)
	}
	return nil
}

func (e CCBillSubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CardType string

const (
	CardTypeVisa       CardType = "VISA"
	CardTypeMastercard CardType = "MASTERCARD"
	CardTypeDiscover   CardType = "DISCOVER"
	CardTypeJcb        CardType = "JCB"
	CardTypeAmex       CardType = "AMEX"
	CardTypeOther      CardType = "OTHER"
)

var AllCardType = []CardType{
	CardTypeVisa,
	CardTypeMastercard,
	CardTypeDiscover,
	CardTypeJcb,
	CardTypeAmex,
	CardTypeOther,
}

func (e CardType) IsValid() bool {
	switch e {
	case CardTypeVisa, CardTypeMastercard, CardTypeDiscover, CardTypeJcb, CardTypeAmex, CardTypeOther:
		return true
	}
	return false
}

func (e CardType) String() string {
	return string(e)
}

func (e *CardType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CardType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CardType", str)
	}
	return nil
}

func (e CardType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Currency string

const (
	CurrencyUsd Currency = "USD"
	CurrencyCad Currency = "CAD"
	CurrencyAud Currency = "AUD"
	CurrencyJpy Currency = "JPY"
	CurrencyGbp Currency = "GBP"
	CurrencyEur Currency = "EUR"
)

var AllCurrency = []Currency{
	CurrencyUsd,
	CurrencyCad,
	CurrencyAud,
	CurrencyJpy,
	CurrencyGbp,
	CurrencyEur,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyUsd, CurrencyCad, CurrencyAud, CurrencyJpy, CurrencyGbp, CurrencyEur:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
