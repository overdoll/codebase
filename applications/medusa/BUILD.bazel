load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@build_bazel_rules_nodejs//:index.bzl", "copy_to_bin", "nodejs_binary")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@npm//razzle:index.bzl", "razzle")
load(":jest.bzl", "jest_test")

package(default_visibility = ["//visibility:public"])

_SRC = glob(
    [
        "public/*",
        "src/**/*",
        ".*",
    ],
) + [
    "razzle.config.js",
    "package.json",
]

copy_to_bin(
    name = "copy_static_files",
    srcs = _SRC,
)

write_file(
    name = "write_chdir_script",
    out = "chdir.js",
    content = ["process.chdir(__dirname)"],
)

_RUNTIME_DEPS = [
    "@npm//react",
    "@npm//react-dom",
    "@npm//react-relay",
    "@npm//react-router",
    "@npm//react-router-config",
    "@npm//relay-runtime",
    "@npm//chokidar",
    "@npm//webpack",
    "@npm//express",
    "@npm//webpack-dev-middleware",
    "@npm//webpack-hot-middleware",
    "@npm//@babel/polyfill",
    "@npm//babel-loader",
    "@npm//@babel/node",
    "@npm//@babel/preset-env",
    "@npm//@babel/preset-react",
    "@npm//@babel/preset-flow",
    "@npm//@babel/plugin-proposal-function-bind",
    "@npm//@babel/plugin-proposal-class-properties",
    "@npm//@babel/plugin-transform-arrow-functions",
    "@npm//@babel/plugin-transform-runtime",
    "@npm//@babel/plugin-transform-modules-commonjs",
    "@npm//css-loader",
    "@npm//dotenv-webpack",
    "@npm//html-loader",
    "@npm//html-webpack-plugin",
    "@npm//json-loader",
    "@npm//file-loader",
    "@npm//style-loader",
    "@npm//url-loader",
    "@npm//babel-plugin-relay",
    "@npm//@pmmmwh/react-refresh-webpack-plugin",
    "@npm//relay-compiler-webpack-plugin",
    "@npm//react-refresh",
    "@npm//@babel/plugin-transform-react-jsx",
    "@npm//subscriptions-transport-ws",
    "@npm//razzle",
    "@npm//react-ssr-prepass",
    "@npm//axios",
    "@npm//serialize-javascript",
    "@npm//@loadable/server",
    "@npm//@loadable/webpack-plugin",
    "@npm//@loadable/babel-plugin",
    "@npm//@loadable/component",
    "@npm//ejs",
    "@npm//helmet",
    "@npm//cookie-parser",
    "@npm//body-parser",
    "@npm//csurf",
    "@npm//winston",
    "@npm//@emotion/react",
    "@npm//@emotion/cache",
    "@npm//@emotion/server",
    "@npm//@emotion/css",
    "@npm//theme-ui",
    "@npm//react-i18next",
    "@npm//i18next-http-middleware",
    "@npm//i18next-fs-backend",
    "@npm//i18next",
    "@npm//react-hook-form",
    "@npm//@streamlinehq/streamline-bold",
    "@npm//@streamlinehq/streamline-regular",
    "@npm//react-spring",
    "@npm//@uppy/core",
    "@npm//@uppy/tus",
    "@npm//@uppy/golden-retriever",
    "@npm//@uppy/thumbnail-generator",
    "@npm//@uppy/react",
    "@npm//react-beautiful-dnd",
    "@npm//dexie",
    "@npm//use-query-params",
    "@npm//query-string",
    "@npm//webpack-bundle-analyzer",
]

nodejs_binary(
    name = "medusa",
    data = [
        "chdir.js",
        "copy_static_files",
    ] + _RUNTIME_DEPS,
    entry_point = "@npm//:node_modules/razzle/bin/razzle.js",
    templated_args = [
        "--node_options=--require=./$(rootpath chdir.js)",
        "start",
    ],
)

nodejs_image(
    name = "medusa-image",
    binary = ":medusa",
)

jest_test(
    name = "test",
    srcs = glob(
        [
            "src/client/**/*",
            "src/modules/**/*",
        ],
    ),
    deps = [
        "jest.setup.js",
        "jest.config.js",
    ] + glob([
        "src/__generated__/*",
        ".*",
    ]) + _RUNTIME_DEPS + [
        "@npm//@jest/transform",
        "@npm//@jest/core",
        "@npm//@testing-library/react",
        "@npm//babel-jest",
        "@npm//relay-test-utils",
        "@npm//jest-environment-jsdom-sixteen",
        "@npm//@testing-library/jest-dom",
        "@npm//c8",
    ],
)

razzle(
    name = "bundle",
    outs = [
        "build/chunks.json",
        "build/loadable-stats.json",
        "build/public",
        "build/server.js",
    ],
    args = [
        "--node_options=--require=./$(location chdir.js)",
        "build",
    ],
    data = [
        "copy_static_files",
        "chdir.js",
    ] + _RUNTIME_DEPS,
)

nodejs_binary(
    name = "medusa-production",
    data = [
        "chdir.js",
        ":bundle",
    ] + glob([
        "src/server/templates/**",
        "src/server/locales/**/*",
        "public/**",
    ]),
    entry_point = "build/server.js",
    templated_args = [
        "--node_options=--require=./$(rootpath chdir.js)",
    ],
)

nodejs_image(
    name = "medusa-production-image",
    binary = ":medusa-production",
    env = {
        "NODE_ENV": "production",
        "PORT": "8080",
    },
)
