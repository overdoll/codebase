type Account implements Node {
  """ID representing the account"""
  id: ID!

  """The ID that the account can be referenced by"""
  reference: String!

  """A URL pointing to the accounts's public avatar."""
  avatar(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """The username of the account."""
  username: String!

  """Whether or not this account is a staff member"""
  isStaff: Boolean!

  """Whether or not this account is part of the moderation team"""
  isModerator: Boolean!

  """The details of the account lock"""
  lock: AccountLock

  """
  The language of the account.

  Note: this is the language that will be used to determine which emails should be sent where.

  You should make sure that the root level "langauge" is the same when the user loads the app, so they get a
  consistent experience. Use "UpdateLanguage" when the languages are mismatched.
  """
  language: Language!

  """
  Sessions linked to this account

  Only queryable if the currently logged-in account belongs to the requested account
  """
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountSessionConnection!

  """Maximum amount of usernames that this account can create"""
  usernamesLimit: Int!

  """Usernames for account (history)"""
  usernames(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountUsernameConnection!

  """Maximum amount of emails that this account can create"""
  emailsLimit: Int!

  """
  Emails for account (multiple emails per account)

  Only queryable if the currently logged-in account belongs to the requested account
  """
  emails(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountEmailConnection!

  """
  Multi factor account settings

  Only queryable if the currently logged-in account belongs to the requested account
  """
  multiFactorSettings: AccountMultiFactorSettings!

  """
  MFA Recovery codes belonging to this account

  Only queryable if the currently logged-in account belongs to the requested account
  """
  recoveryCodes: [AccountMultiFactorRecoveryCode!]!

  """Posts queue specific to this account (when moderator)"""
  moderatorPostsQueue(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by brand slugs."""
    brandSlugs: [String!]

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = REVIEW

    """Ordering options for posts."""
    orderBy: PostsOrder! = {field: CREATED_AT}
  ): PostConnection!

  """Contributions specific to this account"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by brand slugs."""
    brandSlugs: [String!]

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Ordering options for posts."""
    orderBy: PostsOrder! = {field: CREATED_AT}
  ): PostConnection!

  """
  Post Audit Logs linked to this account

  Viewable by either the currently logged-in account or staff+
  """
  moderatorPostAuditLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The date range for audit logs. Required."""
    dateRange: PostAuditLogDateRange!
  ): PostAuditLogConnection!

  """
  Infraction history for this account

  Viewable by the currently authenticated account or staff+
  """
  infractions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountInfractionHistoryConnection!

  """
  Moderator settings and status for this account

  Viewable by the currently authenticated account or staff+
  """
  moderatorSettings: ModeratorSettings!
}

"""Connection of the account"""
type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the account"""
type AccountEdge {
  node: Account!
  cursor: String!
}

"""Email belonging to a specific account"""
type AccountEmail implements Node {
  """ID of the account email"""
  id: ID!

  """The account email"""
  email: String!

  """The current status of the account email"""
  status: AccountEmailStatus!

  """
  The account that this email belongs to

  May be null because unconfirmed emails are not yet actually attached to the account
  """
  account: Account
}

"""Connection of the account email"""
type AccountEmailConnection {
  pageInfo: PageInfo!
  edges: [AccountEmailEdge!]!
}

"""Edge of the account email"""
type AccountEmailEdge {
  cursor: String!
  node: AccountEmail!
}

enum AccountEmailStatus {
  CONFIRMED
  UNCONFIRMED
  PRIMARY
}

"""Infraction history belonging to an account"""
type AccountInfractionHistory implements Node {
  """ID of the infraction history"""
  id: ID!

  """The reason for this infraction, as a post rejection reason"""
  postRejectionReason: PostRejectionReason!
}

"""Connection of the infraction history"""
type AccountInfractionHistoryConnection {
  edges: [AccountInfractionHistoryEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the infraction history"""
type AccountInfractionHistoryEdge {
  node: AccountInfractionHistory!
  cursor: String!
}

type AccountLock {
  expires: Time!
  reason: AccountLockReason!
}

enum AccountLockReason {
  POST_INFRACTION
}

"""The multi-factor recovery code belonging to the account"""
type AccountMultiFactorRecoveryCode {
  """The multi factor recovery code"""
  code: String!
}

type AccountMultiFactorSettings {
  """
  Have recovery codes been generated? Required in order to configure TOTP
  """
  recoveryCodesGenerated: Boolean!

  """Is multi factor enabled - can be toggled off if they want to"""
  multiFactorEnabled: Boolean!

  """Privileged users cannot disable MFA (moderators, staff)"""
  canDisableMultiFactor: Boolean!

  """
  Has TOTP been configured? Recovery codes must be generated before configuring
  """
  multiFactorTotpConfigured: Boolean!
}

"""Session belonging to a specific account"""
type AccountSession implements Node {
  """ID of the session"""
  id: ID!

  """The originating user agent device"""
  device: String!

  """The original IP"""
  ip: String!

  """Where the session was originally created"""
  location: Location!

  """When the session was created"""
  created: Time!

  """When the session was last seen (last API call)"""
  lastSeen: Time!

  """
  If the session belongs to the currently authenticated account. This means that
  the session cannot be revoked (or else we get weird stuff)
  """
  current: Boolean!
}

"""Edge of the account session"""
type AccountSessionConnection {
  pageInfo: PageInfo!
  edges: [AccountSessionEdge!]!
}

"""Edge of the account session"""
type AccountSessionEdge {
  cursor: String!
  node: AccountSession!
}

"""Username belonging to a specific account"""
type AccountUsername implements Node {
  """ID of the account username"""
  id: ID!

  """The account username"""
  username: String!

  """The account that this username belongs to"""
  account: Account!
}

"""Connection of the account username"""
type AccountUsernameConnection {
  pageInfo: PageInfo!
  edges: [AccountUsernameEdge!]!
}

"""Edge of the account username"""
type AccountUsernameEdge {
  cursor: String!
  node: AccountUsername!
}

"""Add an email to the account"""
input AddAccountEmailInput {
  """The email that should be added to this account"""
  email: String!
}

"""Email to add the account"""
type AddAccountEmailPayload {
  """The account email that was added to"""
  accountEmail: AccountEmail

  """Any validation errors from the backend"""
  validation: AddAccountEmailValidation
}

"""Validation message for adding account email"""
enum AddAccountEmailValidation {
  INVALID_EMAIL
}

"""Add moderator to posts queue."""
input AddModeratorToPostQueueInput {
  """The moderator account to take the action on"""
  accountId: ID!
}

"""Remove moderator from posts queue."""
type AddModeratorToPostQueuePayload {
  """The account that was updated"""
  account: Account
}

"""Approve the pending post input"""
input ApprovePostInput {
  """Pending post to take action against"""
  postId: ID!
}

"""Approve the pending post payload"""
type ApprovePostPayload {
  """The audit log generated by the pending post"""
  postAuditLog: PostAuditLog
}

"""Input to assign account to a moderator role"""
input AssignAccountModeratorRole {
  """The account ID that the role needs to be assigned to"""
  accountId: ID!
}

"""Assigned account"""
type AssignAccountModeratorRolePayload {
  """The account that the role was assigned to"""
  account: Account
}

"""Input to assign account to a staff role"""
input AssignAccountStaffRole {
  """The account ID that the role needs to be assigned to"""
  accountId: ID!
}

"""Assigned account"""
type AssignAccountStaffRolePayload {
  """The account that the role was assigned to"""
  account: Account
}

type Audience implements Node & Object {
  """An ID pointing to this audience."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A title for this audience."""
  title: String!

  """Posts belonging to this audience"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by brand slugs."""
    brandSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Ordering options for posts."""
    orderBy: PostsOrder! = {field: CREATED_AT}
  ): PostConnection!
}

type AudienceConnection {
  edges: [AudienceEdge!]!
  pageInfo: PageInfo!
}

type AudienceEdge {
  cursor: String!
  node: Audience!
}

"""Ordering options for audiences"""
input AudiencesOrder {
  """The field to order audiences by."""
  field: AudiencesOrderField!
}

"""Properties by which audience connections can be ordered."""
enum AudiencesOrderField {
  """Audience by created time"""
  CREATED_AT
}

"""Authentication token. Used for logging in."""
type AuthenticationToken {
  """Unique ID of the token"""
  id: ID!

  """Token belong to this authentication token"""
  token: String!

  """
  When the token is viewed with the correct ID, whether or not the devices match
  (you cannot use the token unless the device is the same).
  """
  sameDevice: Boolean!

  """
  Whether or not the token is verified (required in order to see account status,
  and to use it for completing the auth flow).
  """
  verified: Boolean!

  """
  Whether or not this token is "secure"
  Secure means that the token has been viewed from the same network as originally created
  if it wasn't viewed in the same network, the interface should take care and double-check with
  the user that they want to verify the token.
  """
  secure: Boolean!

  """The userAgent this token was created from."""
  userAgent: String!

  """The location where this token was created at."""
  location: Location!

  """Once the token is verified, you can see the status of the account."""
  accountStatus: AuthenticationTokenAccountStatus
}

type AuthenticationTokenAccountStatus {
  """
  When verified, whether or not there is an account belonging to this token.
  """
  registered: Boolean!

  """If multi-factor is enabled for this account"""
  multiFactor: MultiFactor
}

scalar BCP47

type Brand implements Node & Object {
  """An ID pointing to this brand."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A name for this brand."""
  name: String!

  """Posts belonging to this brand"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Ordering options for posts."""
    orderBy: PostsOrder! = {field: CREATED_AT}
  ): PostConnection!
}

type BrandConnection {
  edges: [BrandEdge!]!
  pageInfo: PageInfo!
}

type BrandEdge {
  cursor: String!
  node: Brand!
}

"""Ordering options for brands"""
input BrandsOrder {
  """The field to order brands by."""
  field: BrandsOrderField!
}

"""Properties by which brand connections can be ordered."""
enum BrandsOrderField {
  """Brand by created time"""
  CREATED_AT
}

"""Ordering options for categories"""
input CategoriesOrder {
  """The field to order categories by."""
  field: CategoriesOrderField!
}

"""Properties by which category connections can be ordered."""
enum CategoriesOrderField {
  """Category by created time"""
  CREATED_AT
}

type Category implements Node & Object {
  """An ID pointing to this category."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A title for this category."""
  title: String!

  """Posts belonging to this category"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by brand slugs."""
    brandSlugs: [String!]

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Ordering options for posts."""
    orderBy: PostsOrder! = {field: CREATED_AT}
  ): PostConnection!
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type Character implements Node & Object {
  """An ID pointing to this character."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A name for this character."""
  name: String!

  """The series linked to this character."""
  series: Series!

  """Posts belonging to this character"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by brand slugs."""
    brandSlugs: [String!]

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Ordering options for posts."""
    orderBy: PostsOrder! = {field: CREATED_AT}
  ): PostConnection!
}

type CharacterConnection {
  edges: [CharacterEdge!]!
  pageInfo: PageInfo!
}

type CharacterEdge {
  cursor: String!
  node: Character!
}

"""Ordering options for characters"""
input CharactersOrder {
  """The field to order characters by."""
  field: CharactersOrderField!
}

"""Properties by which character connections can be ordered."""
enum CharactersOrderField {
  """Character by created time"""
  CREATED_AT
}

"""Input for confirming the account email"""
input ConfirmAccountEmailInput {
  """The ID that is sent for confirmation"""
  id: String!
}

"""Payload for confirming the account email"""
type ConfirmAccountEmailPayload {
  """Validation for confirming account email"""
  validation: ConfirmAccountEmailValidation

  """The account email that was confirmed"""
  accountEmail: AccountEmail
}

"""Validation for confirming account email"""
enum ConfirmAccountEmailValidation {
  TOKEN_EXPIRED
  EMAIL_TAKEN
}

"""Payload for creating an account with authentication token"""
input CreateAccountWithAuthenticationTokenInput {
  """The original token"""
  token: String!

  """The username to create the account with"""
  username: String!
}

"""Payload for creating an account"""
type CreateAccountWithAuthenticationTokenPayload {
  """Validation for creating an account"""
  validation: CreateAccountWithAuthenticationTokenValidation

  """The account that was created"""
  account: Account

  """A token is revoked once an account is created, this represents it"""
  revokedAuthenticationTokenId: ID!
}

"""Validation for creating an account with an authentication token"""
enum CreateAccountWithAuthenticationTokenValidation {
  EMAIL_TAKEN
  USERNAME_TAKEN
  TOKEN_INVALID
}

"""Payload for a created pending post"""
type CreatePostPayload {
  """The pending post after the creation"""
  post: Post
}

"""Input for removing an email from an account"""
input DeleteAccountEmailInput {
  """The email that should be removed"""
  accountEmailId: ID!
}

"""Email to add the account"""
type DeleteAccountEmailPayload {
  """The ID of the account email that was removed"""
  accountEmailId: ID!
}

"""Input for removing an email from an account"""
input DeleteAccountUsernameInput {
  """The username that should be removed"""
  accountUsernameId: ID!
}

"""Username to delete from account"""
type DeleteAccountUsernamePayload {
  """The ID of the account username that was removed"""
  accountUsernameId: ID!
}

"""Payload for disabling account multi factor"""
type DisableAccountMultiFactorPayload {
  """TOTP that was removed from this account, if it was removed"""
  accountMultiFactorTotpEnabled: Boolean
}

"""Input for enrolling the account into TOTP"""
input EnrollAccountMultiFactorTotpInput {
  """The TOTP ID, sent intially"""
  id: String!

  """The code that the TOTP expects"""
  code: String!
}

"""Payload of the enrolled totp payload"""
type EnrollAccountMultiFactorTotpPayload {
  """Validation for enrolling TOTP"""
  validation: EnrollAccountMultiFactorTotpValidation

  """TOTP that belongs to this account now"""
  accountMultiFactorTotpEnabled: Boolean
}

"""Validation for enrolling in TOTP"""
enum EnrollAccountMultiFactorTotpValidation {
  INVALID_CODE
}

"""Payload of the created account recovery codes"""
type GenerateAccountMultiFactorRecoveryCodesPayload {
  """The recovery codes that were created"""
  accountMultiFactorRecoveryCodes: [AccountMultiFactorRecoveryCode!]!
}

"""Payload of the generated TOTP token"""
type GenerateAccountMultiFactorTotpPayload {
  """TOTP pair that was generated"""
  multiFactorTotp: MultiFactorTotp
}

"""
Payload for granting access to an account using the token and the recovery code
"""
input GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeInput {
  """The original token"""
  token: String!

  """Recovery code"""
  recoveryCode: String!
}

"""
Payload for granting access to an account using the authentication token and Recovery Code
"""
type GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodePayload {
  """Validation options"""
  validation: GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeValidation

  """The account that granted access to"""
  account: Account

  """
  A token is revoked once the account access is granted, this represents it
  """
  revokedAuthenticationTokenId: ID!
}

"""Validation for granting account access with multi factor"""
enum GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeValidation {
  TOKEN_INVALID
  RECOVERY_CODE_INVALID
}

"""
Payload for granting access to an account using the token and the totp code
"""
input GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpInput {
  """The original token"""
  token: String!

  """TOTP code"""
  code: String!
}

"""
Payload for granting access to an account using the authentication token and TOTP code
"""
type GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpPayload {
  """Validation options"""
  validation: GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpValidation

  """The account that granted access to"""
  account: Account

  """
  A token is revoked once the account access is granted, this represents it
  """
  revokedAuthenticationTokenId: ID!
}

"""Validation for granting account access with multi factor"""
enum GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpValidation {
  TOKEN_INVALID
  CODE_INVALID
}

"""
Payload for granting account access with the token. Will fail if account has multi-factor auth enabled.
"""
input GrantAccountAccessWithAuthenticationTokenInput {
  """The original token"""
  token: String!
}

type GrantAccountAccessWithAuthenticationTokenPayload {
  """Validation options"""
  validation: GrantAccountAccessWithAuthenticationTokenValidation

  """The account that granted access to"""
  account: Account

  """
  A token is revoked once the account access is granted, this represents it
  """
  revokedAuthenticationTokenId: ID!
}

enum GrantAccountAccessWithAuthenticationTokenValidation {
  TOKEN_INVALID
}

"""Input for granting an authentication token"""
input GrantAuthenticationTokenInput {
  """The email that the token will be granted for"""
  email: String!
}

"""Payload for starting an authentication"""
type GrantAuthenticationTokenPayload {
  """The authentication token after starting"""
  authenticationToken: AuthenticationToken

  """Validation for granting an authentication token"""
  validation: GrantAuthenticationTokenValidation
}

"""Validation for granting an authentication token"""
enum GrantAuthenticationTokenValidation {
  INVALID_EMAIL
}

type Language {
  locale: BCP47!
}

"""Represents a physical location."""
type Location {
  """City"""
  city: String!

  """Country"""
  country: String!

  """Postal Code"""
  postalCode: String!

  """Subdivision"""
  subdivision: String!

  """Latitude"""
  latitude: Float!

  """Longitude"""
  longitude: Float!
}

"""General moderator settings."""
type ModeratorSettings {
  """If this moderator is in queue."""
  isInModeratorQueue: Boolean!

  """
  The last time this moderator was selected for a post. Null if moderator not in queue
  """
  lastSelected: Time
}

"""Types of multi factor enabled for this account"""
type MultiFactor {
  totp: Boolean!
}

"""TOTP secret + image combination"""
type MultiFactorTotp {
  """The TOTP ID. Should be sent back when creating the TOTP"""
  id: String!

  """The TOTP secret"""
  secret: String!

  """
  Always html image compatible. Just set SRC tag to this and it will work!
  """
  imageSrc: String!
}

type Mutation {
  """
  Unlock Account - account may be locked for any reason. Use this endpoint to unlock the account
  """
  unlockAccount: UnlockAccountPayload

  """Update the current language."""
  updateLanguage(input: UpdateLanguageInput!): UpdateLanguagePayload

  """
  Update the language of the account.

  Note: that this is only a value, and in order to see anything in the browser,
  you should use the "UpdateLanguage" mutation.
  """
  updateAccountLanguage(input: UpdateAccountLanguageInput!): UpdateAccountLanguagePayload

  """Revoke a session for this account"""
  revokeAccountSession(input: RevokeAccountSessionInput!): RevokeAccountSessionPayload

  """Add an email to the account, will need to be confirmed"""
  addAccountEmail(input: AddAccountEmailInput!): AddAccountEmailPayload

  """
  Delete account email - email must belong to account and cannot be the primary email
  """
  deleteAccountEmail(input: DeleteAccountEmailInput!): DeleteAccountEmailPayload

  """Delete account username - cannot be the current username"""
  deleteAccountUsername(input: DeleteAccountUsernameInput!): DeleteAccountUsernamePayload

  """
  Update the account username

  Will retain the old username
  """
  updateAccountUsernameAndRetainPrevious(input: UpdateAccountUsernameAndRetainPreviousInput!): UpdateAccountUsernameAndRetainPreviousPayload

  """
  Update the account email status to primary

  Cannot update if the email is not confirmed
  """
  updateAccountEmailStatusToPrimary(input: UpdateAccountEmailStatusToPrimaryInput!): UpdateAccountEmailStatusToPrimaryPayload

  """
  Generates a new set of recovery codes. The previous set (whatever it was) will be deleted!
  """
  generateAccountMultiFactorRecoveryCodes: GenerateAccountMultiFactorRecoveryCodesPayload

  """
  Generate a TOTP key for the current user. Recovery codes must be generated first.
  """
  generateAccountMultiFactorTotp: GenerateAccountMultiFactorTotpPayload

  """
  Enroll into TOTP.

  Must have called "generateAccountMultiFactorTOTP" first before enrolling, since this will
  generate a valid secret
  """
  enrollAccountMultiFactorTotp(input: EnrollAccountMultiFactorTotpInput!): EnrollAccountMultiFactorTotpPayload

  """
  Disable account multi factor

  Will delete all multi factor settings (if TOTP is set up, etc...)

  Priv. users cannot disable multi factor
  """
  disableAccountMultiFactor: DisableAccountMultiFactorPayload

  """Confirm account email, so it may be used"""
  confirmAccountEmail(input: ConfirmAccountEmailInput!): ConfirmAccountEmailPayload

  """Assign a moderator role to the account"""
  assignAccountModeratorRole(input: AssignAccountModeratorRole!): AssignAccountModeratorRolePayload

  """Assign a staff role to the account"""
  assignAccountStaffRole(input: AssignAccountStaffRole!): AssignAccountStaffRolePayload

  """Revoke the moderator role from the account"""
  revokeAccountModeratorRole(input: RevokeAccountModeratorRole!): RevokeAccountModeratorRolePayload

  """Revoke the staff role from the account"""
  revokeAccountStaffRole(input: RevokeAccountStaffRole!): RevokeAccountStaffRolePayload

  """
  Grant authentication token

  Authentication token can be used to login into a specific account, provided the token's value is first redeemed
  with the query
  """
  grantAuthenticationToken(input: GrantAuthenticationTokenInput!): GrantAuthenticationTokenPayload

  """
  Revoke authentication token

  Creating accounts and completing authentication flows will not be possible once it's revoked
  """
  revokeAuthenticationToken(input: RevokeAuthenticationTokenInput!): RevokeAuthenticationTokenPayload

  """Create an account using the current authentication token"""
  createAccountWithAuthenticationToken(input: CreateAccountWithAuthenticationTokenInput!): CreateAccountWithAuthenticationTokenPayload

  """
  Grant account access with authentication token

  Should be used if the token does not require a multi-factor authentication step, and the token has to be
  verified first
  """
  grantAccountAccessWithAuthenticationToken(input: GrantAccountAccessWithAuthenticationTokenInput!): GrantAccountAccessWithAuthenticationTokenPayload

  """
  Grant account access using an authentication token and a multi factor option

  Set "code" when authenticating with a TOTP code
  """
  grantAccountAccessWithAuthenticationTokenAndMultiFactorTotp(input: GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpInput!): GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpPayload

  """
  Grant account access using an authentication token and a multi factor option

  Set "recoveryCode" when authenticating with a recovery code
  """
  grantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCode(input: GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeInput!): GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodePayload

  """
  Will verify the authentication token. Requires the secret (sent in an email)
  """
  verifyAuthenticationToken(input: VerifyAuthenticationTokenInput!): VerifyAuthenticationTokenPayload

  """Logout the current account"""
  revokeAccountAccess: RevokeAccountAccessPayload

  """Create a new post"""
  createPost: CreatePostPayload

  """Update a post in draft status - brand"""
  updatePostBrand(input: UpdatePostBrandInput!): UpdatePostBrandPayload

  """Update a post in draft status - audience"""
  updatePostAudience(input: UpdatePostAudienceInput!): UpdatePostAudiencePayload

  """Update a post in draft status - content"""
  updatePostContent(input: UpdatePostContentInput!): UpdatePostContentPayload

  """Update a post in draft status - characters"""
  updatePostCharacters(input: UpdatePostCharactersInput!): UpdatePostCharactersPayload

  """Update a post in draft status - categories"""
  updatePostCategories(input: UpdatePostCategoriesInput!): UpdatePostCategoriesPayload

  """
  Submit a post. Will be either in review or instantly move to publishing if the account is verified
  """
  submitPost(input: SubmitPostInput!): SubmitPostPayload

  """Reject a specific post"""
  rejectPost(input: RejectPostInput!): RejectPostPayload

  """Remove a specific post, after a post has already been moderated"""
  removePost(input: RemovePostInput!): RemovePostPayload

  """Approve a specific post"""
  approvePost(input: ApprovePostInput!): ApprovePostPayload

  """
  Revert an audit log, in case it was done incorrectly

  Will delete an infraction if there was one, but the rest of the audit log will generally stay intact
  """
  revertPostAuditLog(input: RevertPostAuditLogInput!): RevertPostAuditLogPayload

  """Add moderator to posts queue"""
  addModeratorToPostQueue(input: AddModeratorToPostQueueInput!): AddModeratorToPostQueuePayload

  """Remove moderator from posts queue"""
  removeModeratorFromPostQueue(input: RemoveModeratorFromPostQueueInput!): RemoveModeratorFromPostQueuePayload

  """Report a specific post"""
  reportPost(input: ReportPostInput!): ReportPostPayload
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  id: ID!
}

"""Represents an account"""
interface Object {
  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!

  """
  The reference of this post. Should always be used to reference this post.
  """
  reference: String!

  """The state of the post"""
  state: PostState!

  """The moderator to whom this pending post was assigned"""
  moderator: Account

  """The contributor who contributed this post"""
  contributor: Account!

  """DraggableContent belonging to this post"""
  content: [Resource!]!

  """The date and time of when this post was created"""
  createdAt: Time!

  """The date and time of when this post was posted"""
  postedAt: Time

  """The date at which this pending post will be reassigned"""
  reassignmentAt: Time

  """Represents the audience that this post belongs to"""
  audience: Audience

  """Represents the brand that this post belongs to"""
  brand: Brand

  """Categories that belong to this post"""
  categories: [Category!]!

  """Characters that belong to this post"""
  characters: [Character!]!

  """Audit logs belonging to this pending post"""
  auditLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostAuditLogConnection!

  """Whether or not the post was reported by the viewer."""
  viewerReport: PostReport

  """Reports belonging to a post"""
  reports(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The date range for post reports. Required."""
    dateRange: PostReportDateRange!
  ): PostReportConnection!
}

"""
Post audit log

Audit log is created when a moderator takes an action against a pending post
"""
type PostAuditLog implements Node {
  """ID of the audit log"""
  id: ID!

  """The contributor that the audit log belongs to"""
  contributor: Account!

  """The moderator that this log belongs to"""
  moderator: Account!

  """The status or the action that was taken against the pending post"""
  action: PostAuditLogAction!

  """The reason the action was taken"""
  postRejectionReason: PostRejectionReason

  """Additional notes by the moderator"""
  notes: String

  """If this audit log was reverted"""
  reverted: Boolean!

  """The time until which this audit log will be revertable"""
  reversibleUntil: Time!

  """The post linked to this audit log"""
  post: Post!
}

enum PostAuditLogAction {
  APPROVED
  DENIED
  REMOVED
}

"""Connection of the audit log"""
type PostAuditLogConnection {
  edges: [PostAuditLogEdge!]!
  pageInfo: PageInfo!
}

"""Date range for audit logs"""
input PostAuditLogDateRange {
  from: Time!
  to: Time!
}

"""Edge of the audit log"""
type PostAuditLogEdge {
  node: PostAuditLog!
  cursor: String!
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type PostEdge {
  cursor: String!
  node: Post!
}

"""Infraction history belonging to an account"""
type PostRejectionReason implements Node {
  """ID of the rejection reason"""
  id: ID!

  """The reason for this rejection"""
  reason: String!

  """
  If the rejection reason will count against an infraction on the account
  """
  infraction: Boolean!
}

"""Connection of the pending post rejection reason"""
type PostRejectionReasonConnection {
  edges: [PostRejectionReasonEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the pending post rejection reason"""
type PostRejectionReasonEdge {
  node: PostRejectionReason!
  cursor: String!
}

"""Post report"""
type PostReport implements Node {
  """ID of the report"""
  id: ID!

  """The account that initiated this report"""
  account: Account!

  """The reason for this report"""
  postReportReason: PostReportReason!
}

"""Connection of the post report"""
type PostReportConnection {
  edges: [PostReportEdge!]!
  pageInfo: PageInfo!
}

"""Date range for post reports"""
input PostReportDateRange {
  """The starting date range"""
  from: Time!

  """The ending date range"""
  to: Time!
}

"""Edge of the post report"""
type PostReportEdge {
  node: PostReport!
  cursor: String!
}

"""Post report reason"""
type PostReportReason implements Node {
  """ID of the report reason"""
  id: ID!

  """The reason for this report"""
  reason: String!
}

"""Connection of the pending post rejection reason"""
type PostReportReasonConnection {
  edges: [PostReportReasonEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the pending post rejection reason"""
type PostReportReasonEdge {
  node: PostReportReason!
  cursor: String!
}

"""Ordering options for posts"""
input PostsOrder {
  """The field to order security advisories by."""
  field: PostsOrderField!
}

"""Properties by which posts connections can be ordered."""
enum PostsOrderField {
  """Posts by update time"""
  CREATED_AT
}

enum PostState {
  DRAFT
  PUBLISHING
  REVIEW
  PUBLISHED
  DISCARDING
  DISCARDED
  REJECTED
  PROCESSING
  REMOVING
  REMOVED
}

type Query {
  """Get the currently-authenticated account"""
  viewer: Account

  """Look up a single account"""
  account(
    """Look up a post by a username"""
    username: String!
  ): Account

  """Look up or search multiple accounts"""
  accounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the account username."""
    username: String
  ): AccountConnection!

  """List of all available languages"""
  languages: [Language!]!

  """
  The current language that is set

  Note: this is only temporary, per-browser language

  For a permanent language on an account level, see "Language" as part of viewer
  """
  language: Language!

  """
  Get the status of the authentication token - whether or not it is redeemed, account status, etc..

  Note: you can only view the authentication token if you're the originating
  device or you have entered a valid secret (not from same device)
  """
  viewAuthenticationToken(token: String!, secret: String): AuthenticationToken

  """Search all audiences."""
  audiences(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    slugs: [String!]

    """Search by title of the audience."""
    title: String

    """Ordering options for audiences."""
    orderBy: AudiencesOrder! = {field: CREATED_AT}
  ): AudienceConnection!

  """Get a single audience."""
  audience(
    """Search by slug of the audience."""
    slug: String!
  ): Audience

  """Search multiple brands."""
  brands(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by brand slugs."""
    slugs: [String!]

    """Filter by the name of the brand."""
    name: String

    """Ordering options for brands."""
    orderBy: BrandsOrder! = {field: CREATED_AT}
  ): BrandConnection!

  """Get a single brand."""
  brand(
    """Search by slug of the brand."""
    slug: String!
  ): Brand

  """Search all categories."""
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    slugs: [String!]

    """Filter by the title of the category."""
    title: String

    """Ordering options for categories."""
    orderBy: CategoriesOrder! = {field: CREATED_AT}
  ): CategoryConnection!

  """Get a single category."""
  category(
    """Search by slug of the category."""
    slug: String!
  ): Category

  """Get or search all series"""
  series(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by series slugs."""
    slugs: [String!]

    """Filter by the title of the series."""
    title: String

    """Ordering options for series."""
    orderBy: SeriesOrder! = {field: CREATED_AT}
  ): SeriesConnection!

  """Get a single serial."""
  serial(
    """Search by slug of the serial."""
    slug: String!
  ): Series

  """Get or search all characters"""
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by character slugs."""
    slugs: [String!]

    """
    When searching for a character by slug, you need to include the series' slug since slugs are unique-per-series.

    Only one slug is allowed for now since you don't want inaccurate results
    """
    seriesSlug: String

    """Filter by the name of the character."""
    name: String

    """Ordering options for characters."""
    orderBy: CharactersOrder! = {field: CREATED_AT}
  ): CharacterConnection!

  """Get a single character."""
  character(
    """Search by slug of the character."""
    slug: String!

    """A series slug is required since character slugs are unique-per-series."""
    seriesSlug: String!
  ): Character

  """Look up a single post"""
  post(
    """Look up a post by a reference #"""
    reference: String!
  ): Post

  """Search multiple posts"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by brand slugs."""
    brandSlugs: [String!]

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Ordering options for posts."""
    orderBy: PostsOrder! = {field: CREATED_AT}
  ): PostConnection!

  """
  Get rejection reasons that can be used for pending posts

  Only viewable by moderators+
  """
  postRejectionReasons(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostRejectionReasonConnection!

  """
  Get rejection reasons that can be used for pending posts

  Viewable by everyone who is authenticated
  """
  postReportReasons(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostReportReasonConnection!
  node(id: ID!): Node
}

"""Moderate the pending post input"""
input RejectPostInput {
  """Pending post to take action against"""
  postId: ID!

  """Required to enter a rejection reason ID"""
  postRejectionReasonId: ID!

  """Any extra notes for the moderator"""
  notes: String
}

"""Reject the pending post payload"""
type RejectPostPayload {
  """The audit log generated by the pending post"""
  postAuditLog: PostAuditLog
}

"""Remove moderator from posts queue."""
input RemoveModeratorFromPostQueueInput {
  """The moderator account to take the action on"""
  accountId: ID!
}

"""Remove moderator from posts queue."""
type RemoveModeratorFromPostQueuePayload {
  """The account that was updated"""
  account: Account
}

"""Moderate the pending post input"""
input RemovePostInput {
  """Pending post to take action against"""
  postId: ID!

  """Required to enter a rejection reason ID"""
  postRejectionReasonId: ID!

  """Any extra notes for the staff member"""
  notes: String
}

"""Remove the pending post payload"""
type RemovePostPayload {
  """The audit log generated by the pending post"""
  postAuditLog: PostAuditLog
}

"""Report the post input"""
input ReportPostInput {
  """The post to report"""
  postId: ID!

  """The post report reason ID"""
  postReportReason: ID!
}

"""Report the post payload"""
type ReportPostPayload {
  """The post report that was generated"""
  postReport: PostReport
}

"""
A resource represents an image or a video format that contains an ID to uniquely identify it,
and urls to access the resources. We have many urls in order to provide a fallback for older browsers

We also identify the type of resource (image or video) to make it easy to distinguish them
"""
type Resource {
  id: String!
  type: ResourceType!
  urls: [ResourceUrl!]!
}

"""Identifies the type of resource"""
enum ResourceType {
  IMAGE
  VIDEO
}

"""A type representing a url to the resource and the mimetype"""
type ResourceUrl {
  url: URI!
  mimeType: String!
}

"""Revert the pending post audit log input"""
input RevertPostAuditLogInput {
  """The audit log to revert"""
  postAuditLogId: ID!
}

"""Revert the pending post audit log payload"""
type RevertPostAuditLogPayload {
  """The new state of the audit log"""
  postAuditLog: PostAuditLog
}

"""Payload for revoking the current viewer"""
type RevokeAccountAccessPayload {
  """The account that was revoked"""
  revokedAccountId: ID!
}

"""Input to revoke moderator role"""
input RevokeAccountModeratorRole {
  """The account ID that the role needs to be revoked from"""
  accountId: ID!
}

"""Revoked account"""
type RevokeAccountModeratorRolePayload {
  """The account that the role was revoked from"""
  account: Account
}

"""Input for updating an account's username"""
input RevokeAccountSessionInput {
  """Session ID that should be revoked"""
  accountSessionId: ID!
}

"""Payload of the revoked account session"""
type RevokeAccountSessionPayload {
  """The ID of the session that was revoked"""
  accountSessionId: ID!
}

"""Input to revoke staff role"""
input RevokeAccountStaffRole {
  """The account ID that the role needs to be revoked from"""
  accountId: ID!
}

"""Revoked account"""
type RevokeAccountStaffRolePayload {
  """The account that the role was revoked from"""
  account: Account
}

"""Input for revoking an authentication token"""
input RevokeAuthenticationTokenInput {
  """The token to revoke"""
  token: String!

  """
  The secret associated with this token. Required if revoking the token not on the same device that created it.
  """
  secret: String
}

"""Payload for revoking the authentication token"""
type RevokeAuthenticationTokenPayload {
  """The authentication token that was removed"""
  revokedAuthenticationTokenId: ID!
}

type Series implements Node & Object {
  """An ID pointing to this series."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A title for this series."""
  title: String!

  """Posts belonging to this series"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by brand slugs."""
    brandSlugs: [String!]

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Ordering options for posts."""
    orderBy: PostsOrder! = {field: CREATED_AT}
  ): PostConnection!
}

type SeriesConnection {
  edges: [SeriesEdge!]!
  pageInfo: PageInfo!
}

type SeriesEdge {
  cursor: String!
  node: Series!
}

"""Ordering options for series"""
input SeriesOrder {
  """The field to order series by."""
  field: SeriesOrderField!
}

"""Properties by which series connections can be ordered."""
enum SeriesOrderField {
  """Series by created time"""
  CREATED_AT
}

"""Publish post."""
input SubmitPostInput {
  """The post to publish"""
  id: ID!
}

"""Payload for submitting a post"""
type SubmitPostPayload {
  """The post after being submitted"""
  post: Post

  """Whether or not the submitted post is going in review"""
  inReview: Boolean
}

scalar Time

"""Input for unlocking an account"""
input UnlockAccountInput {
  accountID: ID!
}

"""Payload for the unlocked account"""
type UnlockAccountPayload {
  """Account that was unlocked"""
  account: Account
}

"""Input for updating the account status to primary"""
input UpdateAccountEmailStatusToPrimaryInput {
  """The email that should be updated"""
  accountEmailId: ID!
}

"""Payload of the updated account email"""
type UpdateAccountEmailStatusToPrimaryPayload {
  """The account email that was updated to primary"""
  primaryAccountEmail: AccountEmail

  """The account email that was updated to 'confirmed' status"""
  updatedAccountEmail: AccountEmail
}

"""Input for updating the account language"""
input UpdateAccountLanguageInput {
  """The locale to update the language to"""
  locale: BCP47!
}

"""Payload of the account language update"""
type UpdateAccountLanguagePayload {
  """The new language that is now set"""
  language: Language

  """The account that has the updated language"""
  Account: Account
}

"""Input for updating an account's username"""
input UpdateAccountUsernameAndRetainPreviousInput {
  """The username that the account should be updated to"""
  username: String!
}

"""Payload of the updated username"""
type UpdateAccountUsernameAndRetainPreviousPayload {
  """Validation for taking an account username"""
  validation: UpdateAccountUsernameAndRetainPreviousValidation

  """The account username that was added"""
  accountUsername: AccountUsername
}

"""Validation message for updating account username"""
enum UpdateAccountUsernameAndRetainPreviousValidation {
  USERNAME_TAKEN
}

"""Input for updating the current language"""
input UpdateLanguageInput {
  """The locale to update the language to"""
  locale: BCP47!
}

"""Payload of the language update"""
type UpdateLanguagePayload {
  """The new language that is now set"""
  language: Language
}

"""Update post audience."""
input UpdatePostAudienceInput {
  """The post to update"""
  id: ID!

  """The audience that this post belongs to"""
  audienceId: ID!
}

"""Payload for updating a post"""
type UpdatePostAudiencePayload {
  """The post after the update"""
  post: Post
}

"""Update post brand."""
input UpdatePostBrandInput {
  """The post to update"""
  id: ID!

  """The brand that this post belongs to"""
  brandId: ID!
}

"""Payload for updating a post"""
type UpdatePostBrandPayload {
  """The post after the update"""
  post: Post
}

"""Update post audience."""
input UpdatePostCategoriesInput {
  """The post to update"""
  id: ID!

  """Category IDs for this post"""
  categoryIds: [ID!]!
}

"""Payload for updating a post"""
type UpdatePostCategoriesPayload {
  """The post after the update"""
  post: Post
}

"""Update post characters."""
input UpdatePostCharactersInput {
  """The post to update"""
  id: ID!

  """Ids for all the characters"""
  characterIds: [ID!]!
}

"""Payload for updating a post"""
type UpdatePostCharactersPayload {
  """The post after the update"""
  post: Post
}

"""Update post audience."""
input UpdatePostContentInput {
  """The post to update"""
  id: ID!

  """Image IDs for the content"""
  content: [String!]!
}

"""Payload for updating a post"""
type UpdatePostContentPayload {
  """The post after the update"""
  post: Post
}

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

"""Input for verifying authentication token"""
input VerifyAuthenticationTokenInput {
  """The original token"""
  token: String!

  """Secret (get it from the email)"""
  secret: String!
}

"""Payload for verifying the authentication token"""
type VerifyAuthenticationTokenPayload {
  """Validation options"""
  validation: VerifyAuthenticationTokenValidation

  """The authentication token"""
  authenticationToken: AuthenticationToken
}

"""Validation for granting account access"""
enum VerifyAuthenticationTokenValidation {
  TOKEN_INVALID
}
