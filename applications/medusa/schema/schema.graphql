type Artist {
  id: String!
  avatar: String!
  username: String!
}

type AuditUser {
  id: String!
  username: String!
}

type Authentication {
  cookie: Cookie
  user: User
}

input AuthenticationInput {
  email: String!
}

type Category {
  id: String!
  thumbnail: String!
  title: String!
}

type Character {
  id: String!
  thumbnail: String!
  name: String!
  media: Media!
}

input CharacterRequest {
  name: String!
  media: String!
}

type CharacterRequestType {
  name: String!
  media: String!
}

input ConnectionInput {
  after: String
  before: String
  first: Int
  last: Int
}

type Contributor {
  id: String!
  username: String!
  avatar: String!
}

type Cookie {
  sameSession: Boolean!
  registered: Boolean!
  redeemed: Boolean!
  session: String!
  email: String!
  invalid: Boolean!
}

type Media {
  id: String!
  thumbnail: String!
  title: String!
}

type ModeratePost {
  auditLog: PendingPostAuditLog
  validation: Validation
}

input ModeratePostInput {
  pendingPostId: String!
  rejectionReasonId: String
  notes: String!
}

type Mutation {
  """Initiates an authentication flow for the specified user"""
  authenticate(data: AuthenticationInput): Boolean!

  """
  Registration for the user. Will only work once authenticate is initiated
  and the cookie is still valid when redeemed (5 minutes)
  """
  register(data: RegisterInput): Boolean!
  logout: Boolean!
  authEmail: Boolean!

  """Post a new post"""
  post(data: PostInput): PostResponse!

  """Update post"""
  updatePost(id: String!, data: PostInput): PostUpdateResponse!

  """
  Moderate a specific pending post
  Pending post must belong to the moderator
  
  If rejecting, must input a rejection reason and additional notes
  """
  moderatePost(data: ModeratePostInput!): ModeratePost!

  """
  Revert an audit log, in case it was done incorrectly
  
  Will delete an infraction if there was one, but the rest of the audit log will generally stay intact
  """
  revertPendingPostAuditLog(data: RevertPostInput!): ModeratePost!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PendingPost {
  id: String!
  state: String!
  moderator: String!
  contributor: Contributor!
  content: [String!]!
  categories: [Category!]!
  characters: [Character!]!
  mediaRequests: [String!]
  characterRequests: [CharacterRequestType!]
  artistId: String
  artistUsername: String!
}

type PendingPostAuditLog {
  id: String!
  postId: String!
  contributor: AuditUser!
  moderator: AuditUser!
  infractionId: String
  status: String!
  reason: String!
  notes: String!
  reverted: Boolean!
  canRevert: Boolean!
}

type PendingPostAuditLogConnection {
  edges: [PendingPostAuditLogEdge!]!
}

type PendingPostAuditLogEdge {
  node: PendingPostAuditLog!
}

input PendingPostAuditLogFilters {
  moderatorId: String
  contributorId: String
  postId: String
  dateRange: [Int!]
}

type PendingPostConnection {
  edges: [PendingPostEdge!]!
  pageInfo: PageInfo!
}

type PendingPostEdge {
  cursor: String!
  node: PendingPost!
}

input PendingPostFilters {
  moderatorId: String
  contributorId: String
  artistId: String
  id: String
}

type PendingPostRejectionReason {
  id: String!
  reason: String!
  infraction: Boolean!
}

input PostInput {
  content: [String!]!
  categories: [String!]!
  characters: [String!]!
  mediaRequests: [String!]
  characterRequests: [CharacterRequest!]
  artistId: String
  artistUsername: String!
}

type PostResponse {
  id: String!
  review: Boolean!
  validation: Validation
}

type PostUpdateResponse {
  validation: Validation
}

type Query {
  """
  A query that will allow you to get information about the currently logged-in user
  or the current state of authentication (cookie)
  
  Good for persisting state on refresh and authorizing users
  """
  authentication: Authentication

  """Query for redeeming the cookie - when user receives the cookie from"""
  redeemCookie(cookie: String!): Cookie!

  """
  Get Pending Posts, specific to a moderator
  
  Can paginate using ConnectionInput and filter with PendingPostFilters
  
  All filters will work, except moderatorId, which is staff-only (by default, will grab pending post for logged-in user)
  """
  pendingPosts(input: ConnectionInput!, filter: PendingPostFilters!): PendingPostConnection!

  """Get a single pending post by ID"""
  pendingPost(id: String!): PendingPost!
  characters(data: SearchInput!): [Character!]!
  categories(data: SearchInput!): [Category!]!
  artists(data: SearchInput!): [Artist!]!
  media(data: SearchInput!): [Media!]!

  """
  Get pending post for the currently-logged in user
  
  Filters are available, but the moderatorId filter will only work if you are at least a staff role
  """
  pendingPostAuditLogs(filter: PendingPostAuditLogFilters!): PendingPostAuditLogConnection!

  """
  Get rejection reasons. Only available to moderators + staff
  Used as the input for rejecting a pending post
  """
  rejectionReasons: [PendingPostRejectionReason!]!
}

input RegisterInput {
  username: String!
}

input RevertPostInput {
  auditLogId: String!
}

input SearchInput {
  search: String!
}

type User {
  id: String!
  username: String!
  roles: [String!]!
  pendingPosts: [PendingPost!]
  infractionHistory: [UsersInfractionHistory!]
}

type UsersInfractionHistory {
  id: String!
  reason: String!
}

type Validation {
  code: String!
}
