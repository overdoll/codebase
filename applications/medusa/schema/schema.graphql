type Account implements Node {
  """ID representing the account"""
  id: ID!

  """The ID that the account can be referenced by"""
  reference: String!

  """A URL pointing to the account's public avatar."""
  avatar: Resource

  """The username of the account."""
  username: String!

  """Whether or not this account is a staff member"""
  isStaff: Boolean!

  """Whether or not this account is part of the moderation team"""
  isModerator: Boolean!

  """The details of the account lock"""
  lock: AccountLock

  """
  The language of the account.
  
  Note: this is the language that will be used to determine which emails should be sent where.
  
  You should make sure that the root level "langauge" is the same when the user loads the app, so they get a
  consistent experience. Use "UpdateLanguage" when the languages are mismatched.
  """
  language: Language!

  """
  Sessions linked to this account
  
  Only queryable if the currently logged-in account belongs to the requested account
  """
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountSessionConnection!

  """The next time the username is available to be changed"""
  usernameEditAvailableAt: Time!

  """Maximum amount of emails that this account can create"""
  emailsLimit: Int!

  """
  Emails for account (multiple emails per account)
  
  Only queryable if the currently logged-in account belongs to the requested account
  """
  emails(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountEmailConnection!

  """
  Have recovery codes been generated? Required in order to configure TOTP
  """
  recoveryCodesGenerated: Boolean!

  """Is multi factor enabled - can be toggled off if they want to"""
  multiFactorEnabled: Boolean!

  """Privileged users cannot disable MFA (moderators, staff)"""
  canDisableMultiFactor: Boolean!

  """
  Has TOTP been configured? Recovery codes must be generated before configuring
  """
  multiFactorTotpConfigured: Boolean!

  """
  MFA Recovery codes belonging to this account
  
  Only queryable if the currently logged-in account belongs to the requested account
  """
  recoveryCodes: [AccountMultiFactorRecoveryCode!]!

  """The curation profile linked to this account."""
  curationProfile: CurationProfile!

  """Posts feed for the clubs that the account currently is a member of."""
  clubMembersPostsFeed(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """Posts queue specific to this account (when moderator)"""
  moderatorPostsQueue(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = REVIEW

    """Sorting options for posts."""
    sortBy: PostsSort! = NEW
  ): PostConnection!

  """Contributions specific to this account"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!

  """
  Post Audit Logs linked to this account
  
  Viewable by either the currently logged-in account or staff+
  """
  postAuditLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The date range for audit logs. Required."""
    dateRange: PostAuditLogDateRange!
  ): PostAuditLogConnection!

  """
  Moderator settings and status for this account
  
  Viewable by the currently authenticated account or staff+
  """
  moderatorSettings: ModeratorSettings!

  """Maximum amount of clubs that you can create."""
  clubsLimit: Int!

  """Current count of the amount of clubs that the account has created."""
  clubsCount: Int!

  """Represents the clubs that the account has created."""
  clubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by club slugs."""
    slugs: [String!]

    """Filter by the name of the club."""
    name: String

    """Sorting options for clubs."""
    sortBy: ClubsSort! = POPULAR
  ): ClubConnection!

  """Maximum amount of clubs that you can join as an account."""
  clubMembershipsLimit: Int!

  """
  Current count of club memberships. Should be compared against the limit before joining a club.
  """
  clubMembershipsCount: Int!

  """Represents the club memberships that the account has."""
  clubMemberships(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """sorting options for club members."""
    sortBy: ClubMembersSort! = NEWEST
  ): ClubMemberConnection!
}

"""Connection of the account"""
type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the account"""
type AccountEdge {
  node: Account!
  cursor: String!
}

"""Email belonging to a specific account"""
type AccountEmail implements Node {
  """ID of the account email"""
  id: ID!

  """The account email"""
  email: String!

  """The current status of the account email"""
  status: AccountEmailStatus!

  """
  The account that this email belongs to
  
  May be null because unconfirmed emails are not yet actually attached to the account
  """
  account: Account
}

"""Connection of the account email"""
type AccountEmailConnection {
  pageInfo: PageInfo!
  edges: [AccountEmailEdge!]!
}

"""Edge of the account email"""
type AccountEmailEdge {
  cursor: String!
  node: AccountEmail!
}

enum AccountEmailStatus {
  CONFIRMED
  UNCONFIRMED
  PRIMARY
}

type AccountLock {
  expires: Time!
}

"""The multi-factor recovery code belonging to the account"""
type AccountMultiFactorRecoveryCode {
  """The multi factor recovery code"""
  code: String!
}

"""Session belonging to a specific account"""
type AccountSession implements Node {
  """ID of the session"""
  id: ID!

  """The originating user agent device"""
  device: String!

  """The original IP"""
  ip: String!

  """Where the session was originally created"""
  location: Location!

  """When the session was created"""
  created: Time!

  """When the session was last seen (last API call)"""
  lastSeen: Time!

  """
  If the session belongs to the currently authenticated account. This means that
  the session cannot be revoked (or else we get weird stuff)
  """
  current: Boolean!
}

"""Edge of the account session"""
type AccountSessionConnection {
  pageInfo: PageInfo!
  edges: [AccountSessionEdge!]!
}

"""Edge of the account session"""
type AccountSessionEdge {
  cursor: String!
  node: AccountSession!
}

"""Properties by which accounts connections can be sorted."""
enum AccountsSort {
  """Accounts by newest first"""
  NEW
}

"""Add an email to the account"""
input AddAccountEmailInput {
  """The email that should be added to this account"""
  email: String!
}

"""Email to add the account"""
type AddAccountEmailPayload {
  """The account email that was added to"""
  accountEmail: AccountEmail

  """Any validation errors from the backend"""
  validation: AddAccountEmailValidation
}

"""Validation message for adding account email"""
enum AddAccountEmailValidation {
  INVALID_EMAIL
}

"""Add alias slug."""
input AddClubSlugAliasInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Payload for a new alt slug"""
type AddClubSlugAliasPayload {
  """The club after update"""
  club: Club

  """Validation for adding a new club"""
  validation: AddClubSlugAliasValidation
}

"""Validation for adding a new slug to a club"""
enum AddClubSlugAliasValidation {
  SLUG_TAKEN
}

"""Add moderator to posts queue."""
input AddModeratorToPostQueueInput {
  """The moderator account to take the action on"""
  accountId: ID!
}

"""Remove moderator from posts queue."""
type AddModeratorToPostQueuePayload {
  """The account that was updated"""
  account: Account
}

"""Add post content."""
input AddPostContentInput {
  """The post to update"""
  id: ID!

  """Image IDs for the content"""
  content: [String!]!
}

"""Payload for updating a post"""
type AddPostContentPayload {
  """The post after the update"""
  post: Post
}

"""Approve the pending post input"""
input ApprovePostInput {
  """Pending post to take action against"""
  postId: ID!
}

"""Approve the pending post payload"""
type ApprovePostPayload {
  """The audit log generated by the pending post"""
  postAuditLog: PostAuditLog
}

"""Input to assign account to a moderator role"""
input AssignAccountModeratorRole {
  """The account ID that the role needs to be assigned to"""
  accountId: ID!
}

"""Assigned account"""
type AssignAccountModeratorRolePayload {
  """The account that the role was assigned to"""
  account: Account
}

"""Input to assign account to a staff role"""
input AssignAccountStaffRole {
  """The account ID that the role needs to be assigned to"""
  accountId: ID!
}

"""Assigned account"""
type AssignAccountStaffRolePayload {
  """The account that the role was assigned to"""
  account: Account
}

type Audience implements Node {
  """An ID pointing to this audience."""
  id: ID!

  """A url-friendly ID. Should be used when searching."""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A title for this audience."""
  title: String!

  """If this audience is standard or not."""
  standard: Boolean!

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """Posts belonging to this audience"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!
}

type AudienceConnection {
  edges: [AudienceEdge!]!
  pageInfo: PageInfo!
}

type AudienceCurationProfile {
  """Whether or not the audience section was completed."""
  completed: Boolean!

  """Whether or not the audience section was skipped."""
  skipped: Boolean!

  """Audiences selected for this section."""
  audiences: [Audience!]!
}

type AudienceEdge {
  cursor: String!
  node: Audience!
}

"""Properties by which audience connections can be sorted."""
enum AudiencesSort {
  """Audience by newest first"""
  NEW

  """Audience by top likes"""
  TOP

  """Audience by most posts"""
  POPULAR
}

"""Authentication token. Used for logging in."""
type AuthenticationToken {
  """Unique ID of the token"""
  id: ID!

  """Token belong to this authentication token"""
  token: String!

  """
  When the token is viewed with the correct ID, whether or not the devices match
  (you cannot use the token unless the device is the same).
  """
  sameDevice: Boolean!

  """
  Whether or not the token is verified (required in order to see account status,
  and to use it for completing the auth flow).
  """
  verified: Boolean!

  """
  Whether or not this token is "secure"
  Secure means that the token has been viewed from the same network as originally created
  if it wasn't viewed in the same network, the interface should take care and double-check with
  the user that they want to verify the token.
  """
  secure: Boolean!

  """The userAgent this token was created from."""
  userAgent: String!

  """The location where this token was created at."""
  location: Location!

  """Once the token is verified, you can see the status of the account."""
  accountStatus: AuthenticationTokenAccountStatus
}

type AuthenticationTokenAccountStatus {
  """
  When verified, whether or not there is an account belonging to this token.
  """
  registered: Boolean!

  """If multi-factor is enabled for this account"""
  multiFactor: MultiFactor
}

"""Localization formatted in BCP47."""
scalar BCP47

"""Become a club member."""
input BecomeClubMemberInput {
  """The chosen club ID."""
  clubId: ID!
}

"""Payload for a new club member"""
type BecomeClubMemberPayload {
  """The membership after creation"""
  clubMember: ClubMember
}

"""Properties by which categories connections can be sorted."""
enum CategoriesSort {
  """Categories by newest first"""
  NEW

  """Categories by top likes"""
  TOP

  """Categories by most posts"""
  POPULAR
}

type Category implements Node {
  """An ID pointing to this category."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A title for this category."""
  title: String!

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """Posts belonging to this category"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

type CategoryCurationProfile {
  """Whether or not the category section was completed."""
  completed: Boolean!

  """Whether or not the category section was skipped."""
  skipped: Boolean!

  """Categories selected for this section."""
  categories: [Category!]!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type Character implements Node {
  """An ID pointing to this character."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A name for this character."""
  name: String!

  """All translations for this name."""
  nameTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """The series linked to this character."""
  series: Series!

  """Posts belonging to this character"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!
}

type CharacterConnection {
  edges: [CharacterEdge!]!
  pageInfo: PageInfo!
}

type CharacterEdge {
  cursor: String!
  node: Character!
}

"""Properties by which character connections can be sorted."""
enum CharactersSort {
  """Characters by newest first"""
  NEW

  """Characters by top likes"""
  TOP

  """Characters by most posts"""
  POPULAR
}

type Club implements Node {
  """An ID pointing to this club."""
  id: ID!

  """An internal reference, uniquely identifying the club."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """Maximum amount of slug aliases that can be created for this club."""
  slugAliasesLimit: Int!

  """
  An alias list of slugs. These are valid, as in, you can find the club using
  the slug. However, it should always be replaced by the default slug.
  """
  slugAliases: [ClubSlugAlias!]!

  """A URL pointing to the object's thumbnail."""
  thumbnail(size: Int): Resource

  """A name for this club."""
  name: String!

  """The account that owns this club."""
  owner: Account!

  """Whether or not this club is suspended."""
  suspension: ClubSuspension

  """Whether or not the viewer is a member of this club."""
  viewerMember: ClubMember

  """The total amount of members in this club."""
  membersCount: Int!

  """Club members."""
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """sorting options for club members."""
    sortBy: ClubMembersSort! = NEWEST
  ): ClubMemberConnection!

  """Posts belonging to this club"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!

  """
  Infraction history for this club
  
  Viewable by the currently authenticated account or staff+
  """
  infractionHistory(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ClubInfractionHistoryConnection!
}

type ClubConnection {
  edges: [ClubEdge!]!
  pageInfo: PageInfo!
}

type ClubEdge {
  cursor: String!
  node: Club!
}

"""Infraction history belonging to a club"""
type ClubInfractionHistory implements Node {
  """ID of the infraction history"""
  id: ID!

  """The club belonging to this history object."""
  club: Club!

  """The account that issued this infraction."""
  issuerAccount: Account!

  """The rule cited for this infraction."""
  rule: Rule!

  """The source for this infraction."""
  source: ClubInfractionHistorySource!

  """When this infraction was issued."""
  issuedAt: Time!

  """
  When this infraction expires (no longer considered when issuing future infractions).
  """
  expiresAt: Time!
}

"""Connection of the infraction history"""
type ClubInfractionHistoryConnection {
  edges: [ClubInfractionHistoryEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the infraction history"""
type ClubInfractionHistoryEdge {
  node: ClubInfractionHistory!
  cursor: String!
}

enum ClubInfractionHistorySource {
  MANUAL
  POST_MODERATION_REJECTION
  POST_MANUAL_REMOVAL
}

type ClubMember implements Node {
  """An ID pointing to this club member."""
  id: ID!

  """When the membership was created (when the account originally joined)."""
  joinedAt: Time!

  """The club that this membership belongs to."""
  club: Club!

  """The account that belongs to this membership."""
  account: Account!
}

type ClubMemberConnection {
  edges: [ClubMemberEdge!]!
  pageInfo: PageInfo!
}

type ClubMemberEdge {
  cursor: String!
  node: ClubMember!
}

"""Properties by which club member connections can be sorted."""
enum ClubMembersSort {
  """By oldest members"""
  NEWEST
}

"""The club slug alias"""
type ClubSlugAlias {
  """The slug alias"""
  slug: String!
}

"""Properties by which club connections can be sorted."""
enum ClubsSort {
  """Clubs by popularity"""
  POPULAR
}

type ClubSuspension {
  """When the suspension expires. Can call UnSuspendClub when time = now."""
  expires: Time!
}

"""Input for confirming the account email"""
input ConfirmAccountEmailInput {
  """The ID that is sent for confirmation"""
  id: String!

  """The secret for email confirmation."""
  secret: String!
}

"""Payload for confirming the account email"""
type ConfirmAccountEmailPayload {
  """Validation for confirming account email"""
  validation: ConfirmAccountEmailValidation

  """The account email that was confirmed"""
  accountEmail: AccountEmail
}

"""Validation for confirming account email"""
enum ConfirmAccountEmailValidation {
  TOKEN_EXPIRED
  EMAIL_TAKEN
}

"""Payload for creating an account with authentication token"""
input CreateAccountWithAuthenticationTokenInput {
  """The original token"""
  token: String!

  """The username to create the account with"""
  username: String!
}

"""Payload for creating an account"""
type CreateAccountWithAuthenticationTokenPayload {
  """Validation for creating an account"""
  validation: CreateAccountWithAuthenticationTokenValidation

  """The account that was created"""
  account: Account

  """A token is revoked once an account is created, this represents it"""
  revokedAuthenticationTokenId: ID!
}

"""Validation for creating an account with an authentication token"""
enum CreateAccountWithAuthenticationTokenValidation {
  EMAIL_TAKEN
  USERNAME_TAKEN
  TOKEN_INVALID
}

"""Create a new audience."""
input CreateAudienceInput {
  """The chosen slug for the audience."""
  slug: String!

  """The chosen title for the audience."""
  title: String!

  """If the audience is standard or not."""
  standard: Boolean!
}

"""Payload for a new audience"""
type CreateAudiencePayload {
  """The audience after creation"""
  audience: Audience

  """Validation for creating a new audience"""
  validation: CreateAudienceValidation
}

"""Validation for creating a new audience"""
enum CreateAudienceValidation {
  SLUG_TAKEN
}

"""Create a new category."""
input CreateCategoryInput {
  """The chosen slug for the category."""
  slug: String!

  """The chosen title for the category."""
  title: String!
}

"""Payload for a new category"""
type CreateCategoryPayload {
  """The category after creation"""
  category: Category

  """Validation for creating a new category"""
  validation: CreateCategoryValidation
}

"""Validation for creating a new category"""
enum CreateCategoryValidation {
  SLUG_TAKEN
}

"""Create a new character."""
input CreateCharacterInput {
  """The chosen series for the character."""
  seriesId: ID!

  """The chosen slug for the character."""
  slug: String!

  """The chosen name for the character."""
  name: String!
}

"""Payload for a new character"""
type CreateCharacterPayload {
  """The character after creation"""
  character: Character

  """Validation for creating a new character"""
  validation: CreateCharacterValidation
}

"""Validation for creating a new character"""
enum CreateCharacterValidation {
  SLUG_TAKEN
}

"""Create club."""
input CreateClubInput {
  """The chosen slug for the club."""
  slug: String!

  """The chosen name for the club."""
  name: String!
}

"""Payload for a new club"""
type CreateClubPayload {
  """The club after creation"""
  club: Club

  """Validation for creating a new club"""
  validation: CreateClubValidation
}

"""Validation for creating a new club"""
enum CreateClubValidation {
  SLUG_TAKEN
}

"""Create a new post. A club ID is required."""
input CreatePostInput {
  """The club ID that this post will belong to"""
  clubId: ID!
}

"""Payload for a created pending post"""
type CreatePostPayload {
  """The pending post after the creation"""
  post: Post
}

"""Create a new rule input."""
input CreateRuleInput {
  """The title."""
  title: String!

  """The description."""
  description: String!

  """If breaking this rule would cause an infraction."""
  infraction: Boolean!
}

"""Updated rule."""
type CreateRulePayload {
  """The updated rule."""
  rule: Rule
}

"""Create a new series."""
input CreateSeriesInput {
  """The chosen slug for the series."""
  slug: String!

  """The chosen title for the series."""
  title: String!
}

"""Payload for a new series"""
type CreateSeriesPayload {
  """The series after creation"""
  series: Series

  """Validation for creating a new series"""
  validation: CreateSeriesValidation
}

"""Validation for creating a new series"""
enum CreateSeriesValidation {
  SLUG_TAKEN
}

type CurationProfile {
  """An ID uniquely identifying this profile."""
  id: ID!

  """If the whole profile was completed or not."""
  completed: Boolean!

  """The date of birth profile."""
  dateOfBirth: DateOfBirthCurationProfile!

  """The audience profile."""
  audience: AudienceCurationProfile!

  """The category profile."""
  category: CategoryCurationProfile!
}

type DateOfBirthCurationProfile {
  """Whether or not the date of birth section was skipped."""
  skipped: Boolean!

  """Whether or not the date of birth section was completed."""
  completed: Boolean!

  """The date of birth set."""
  dateOfBirth: Time
}

"""Input for removing an email from an account"""
input DeleteAccountEmailInput {
  """The email that should be removed"""
  accountEmailId: ID!
}

"""Email to add the account"""
type DeleteAccountEmailPayload {
  """The ID of the account email that was removed"""
  accountEmailId: ID!
}

"""Payload for disabling account multi factor"""
type DisableAccountMultiFactorPayload {
  """TOTP that was removed from this account, if it was removed"""
  accountMultiFactorTotpEnabled: Boolean
}

"""Input for enrolling the account into TOTP"""
input EnrollAccountMultiFactorTotpInput {
  """The TOTP ID, sent initially"""
  id: String!

  """The code that the TOTP expects"""
  code: String!
}

"""Payload of the enrolled totp payload"""
type EnrollAccountMultiFactorTotpPayload {
  """Validation for enrolling TOTP"""
  validation: EnrollAccountMultiFactorTotpValidation

  """TOTP that belongs to this account now"""
  accountMultiFactorTotpEnabled: Boolean
}

"""Validation for enrolling in TOTP"""
enum EnrollAccountMultiFactorTotpValidation {
  INVALID_CODE
}

"""Payload of the created account recovery codes"""
type GenerateAccountMultiFactorRecoveryCodesPayload {
  """The recovery codes that were created"""
  accountMultiFactorRecoveryCodes: [AccountMultiFactorRecoveryCode!]!
}

"""Payload of the generated TOTP token"""
type GenerateAccountMultiFactorTotpPayload {
  """TOTP pair that was generated"""
  multiFactorTotp: MultiFactorTotp
}

"""
Payload for granting access to an account using the token and the recovery code
"""
input GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeInput {
  """The original token"""
  token: String!

  """Recovery code"""
  recoveryCode: String!
}

"""
Payload for granting access to an account using the authentication token and Recovery Code
"""
type GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodePayload {
  """Validation options"""
  validation: GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeValidation

  """The account that granted access to"""
  account: Account

  """
  A token is revoked once the account access is granted, this represents it
  """
  revokedAuthenticationTokenId: ID!
}

"""Validation for granting account access with multi factor"""
enum GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeValidation {
  TOKEN_INVALID
  RECOVERY_CODE_INVALID
}

"""
Payload for granting access to an account using the token and the totp code
"""
input GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpInput {
  """The original token"""
  token: String!

  """TOTP code"""
  code: String!
}

"""
Payload for granting access to an account using the authentication token and TOTP code
"""
type GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpPayload {
  """Validation options"""
  validation: GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpValidation

  """The account that granted access to"""
  account: Account

  """
  A token is revoked once the account access is granted, this represents it
  """
  revokedAuthenticationTokenId: ID!
}

"""Validation for granting account access with multi factor"""
enum GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpValidation {
  TOKEN_INVALID
  CODE_INVALID
}

"""
Payload for granting account access with the token. Will fail if account has multi-factor auth enabled.
"""
input GrantAccountAccessWithAuthenticationTokenInput {
  """The original token"""
  token: String!
}

type GrantAccountAccessWithAuthenticationTokenPayload {
  """Validation options"""
  validation: GrantAccountAccessWithAuthenticationTokenValidation

  """The account that granted access to"""
  account: Account

  """
  A token is revoked once the account access is granted, this represents it
  """
  revokedAuthenticationTokenId: ID!
}

enum GrantAccountAccessWithAuthenticationTokenValidation {
  TOKEN_INVALID
}

"""Input for granting an authentication token"""
input GrantAuthenticationTokenInput {
  """The email that the token will be granted for"""
  email: String!
}

"""Payload for starting an authentication"""
type GrantAuthenticationTokenPayload {
  """The authentication token after starting"""
  authenticationToken: AuthenticationToken

  """Validation for granting an authentication token"""
  validation: GrantAuthenticationTokenValidation
}

"""Validation for granting an authentication token"""
enum GrantAuthenticationTokenValidation {
  INVALID_EMAIL
}

"""Issue a club infraction."""
input IssueClubInfractionInput {
  """The club to issue the infraction to."""
  clubId: ID!

  """The rule to cite."""
  ruleId: ID!

  """
  Pass a custom end time. If none is passed, will use sliding scale based on previous infractions.
  """
  customEndTime: Time
}

"""Issue a new club infraction payload."""
type IssueClubInfractionPayload {
  """The new club infraction history item."""
  clubInfractionHistory: ClubInfractionHistory
}

type Language {
  """BCP47 locale"""
  locale: BCP47!

  """Fully qualified name"""
  name: String!
}

"""Like a post."""
input LikePostInput {
  """The post ID that you want to like"""
  postId: ID!
}

"""Payload for the liked post"""
type LikePostPayload {
  """The new PostLike entry."""
  postLike: PostLike
}

"""Represents a physical location."""
type Location {
  """City"""
  city: String!

  """Country"""
  country: String!

  """Postal Code"""
  postalCode: String!

  """Subdivision"""
  subdivision: String!

  """Latitude"""
  latitude: Float!

  """Longitude"""
  longitude: Float!
}

"""Input for locking an account."""
input LockAccountInput {
  """The account to lock."""
  accountID: ID!

  """When the lock should end."""
  endTime: Time!
}

"""Payload for the locked account"""
type LockAccountPayload {
  """Account that was locked"""
  account: Account
}

"""General moderator settings."""
type ModeratorSettings {
  """If this moderator is in queue."""
  isInModeratorQueue: Boolean!

  """
  The last time this moderator was selected for a post. Null if moderator not in queue
  """
  lastSelected: Time
}

"""Types of multi factor enabled for this account"""
type MultiFactor {
  totp: Boolean!
}

"""TOTP secret + image combination"""
type MultiFactorTotp {
  """The TOTP ID. Should be sent back when creating the TOTP"""
  id: String!

  """The TOTP secret"""
  secret: String!

  """
  Always html image compatible. Just set SRC tag to this and it will work!
  """
  imageSrc: String!
}

type Mutation {
  """
  Unlock Account - account may be locked for any reason. Use this endpoint to unlock the account.
  
  Can be unlocked by staff+ regardless if time is past.
  """
  unlockAccount(input: UnlockAccountInput!): UnlockAccountPayload

  """Lock an account for a specific duration."""
  lockAccount(input: LockAccountInput!): LockAccountPayload

  """Update the current language."""
  updateLanguage(input: UpdateLanguageInput!): UpdateLanguagePayload

  """
  Update the language of the account.
  
  Note: that this is only a value, and in order to see anything in the browser,
  you should use the "UpdateLanguage" mutation.
  """
  updateAccountLanguage(input: UpdateAccountLanguageInput!): UpdateAccountLanguagePayload

  """Revoke a session for this account"""
  revokeAccountSession(input: RevokeAccountSessionInput!): RevokeAccountSessionPayload

  """Add an email to the account, will need to be confirmed"""
  addAccountEmail(input: AddAccountEmailInput!): AddAccountEmailPayload

  """
  Delete account email - email must belong to account and cannot be the primary email
  """
  deleteAccountEmail(input: DeleteAccountEmailInput!): DeleteAccountEmailPayload

  """
  Update the account username
  
  Will retain the old username
  """
  updateAccountUsername(input: UpdateAccountUsernameInput!): UpdateAccountUsernamePayload

  """
  Update the account email status to primary
  
  Cannot update if the email is not confirmed
  """
  updateAccountEmailStatusToPrimary(input: UpdateAccountEmailStatusToPrimaryInput!): UpdateAccountEmailStatusToPrimaryPayload

  """
  Generates a new set of recovery codes. The previous set (whatever it was) will be deleted!
  """
  generateAccountMultiFactorRecoveryCodes: GenerateAccountMultiFactorRecoveryCodesPayload

  """
  Generate a TOTP key for the current user. Recovery codes must be generated first.
  """
  generateAccountMultiFactorTotp: GenerateAccountMultiFactorTotpPayload

  """
  Enroll into TOTP.
  
  Must have called "generateAccountMultiFactorTOTP" first before enrolling, since this will
  generate a valid secret
  """
  enrollAccountMultiFactorTotp(input: EnrollAccountMultiFactorTotpInput!): EnrollAccountMultiFactorTotpPayload

  """
  Disable account multi factor
  
  Will delete all multi factor settings (if TOTP is set up, etc...)
  
  Priv. users cannot disable multi factor
  """
  disableAccountMultiFactor: DisableAccountMultiFactorPayload

  """Confirm account email, so it may be used"""
  confirmAccountEmail(input: ConfirmAccountEmailInput!): ConfirmAccountEmailPayload

  """Assign a moderator role to the account"""
  assignAccountModeratorRole(input: AssignAccountModeratorRole!): AssignAccountModeratorRolePayload

  """Assign a staff role to the account"""
  assignAccountStaffRole(input: AssignAccountStaffRole!): AssignAccountStaffRolePayload

  """Revoke the moderator role from the account"""
  revokeAccountModeratorRole(input: RevokeAccountModeratorRole!): RevokeAccountModeratorRolePayload

  """Revoke the staff role from the account"""
  revokeAccountStaffRole(input: RevokeAccountStaffRole!): RevokeAccountStaffRolePayload

  """
  Grant authentication token
  
  Authentication token can be used to login into a specific account, provided the token's value is first redeemed
  with the query
  """
  grantAuthenticationToken(input: GrantAuthenticationTokenInput!): GrantAuthenticationTokenPayload

  """
  Revoke authentication token
  
  Creating accounts and completing authentication flows will not be possible once it's revoked
  """
  revokeAuthenticationToken(input: RevokeAuthenticationTokenInput!): RevokeAuthenticationTokenPayload

  """Create an account using the current authentication token"""
  createAccountWithAuthenticationToken(input: CreateAccountWithAuthenticationTokenInput!): CreateAccountWithAuthenticationTokenPayload

  """
  Grant account access with authentication token
  
  Should be used if the token does not require a multi-factor authentication step, and the token has to be
  verified first
  """
  grantAccountAccessWithAuthenticationToken(input: GrantAccountAccessWithAuthenticationTokenInput!): GrantAccountAccessWithAuthenticationTokenPayload

  """
  Grant account access using an authentication token and a multi factor option
  
  Set "code" when authenticating with a TOTP code
  """
  grantAccountAccessWithAuthenticationTokenAndMultiFactorTotp(input: GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpInput!): GrantAccountAccessWithAuthenticationTokenAndMultiFactorTotpPayload

  """
  Grant account access using an authentication token and a multi factor option
  
  Set "recoveryCode" when authenticating with a recovery code
  """
  grantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCode(input: GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodeInput!): GrantAccountAccessWithAuthenticationTokenAndMultiFactorRecoveryCodePayload

  """
  Will verify the authentication token. Requires the secret (sent in an email)
  """
  verifyAuthenticationToken(input: VerifyAuthenticationTokenInput!): VerifyAuthenticationTokenPayload

  """Logout the current account"""
  revokeAccountAccess: RevokeAccountAccessPayload

  """Create a new audience"""
  createAudience(input: CreateAudienceInput!): CreateAudiencePayload

  """Update audience title"""
  updateAudienceTitle(input: UpdateAudienceTitleInput!): UpdateAudienceTitlePayload

  """Update audience thumbnail"""
  updateAudienceThumbnail(input: UpdateAudienceThumbnailInput!): UpdateAudienceThumbnailPayload

  """Update audience standard"""
  updateAudienceIsStandard(input: UpdateAudienceIsStandardInput!): UpdateAudienceIsStandardPayload

  """Create a new category"""
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload

  """Update category title"""
  updateCategoryTitle(input: UpdateCategoryTitleInput!): UpdateCategoryTitlePayload

  """Update category thumbnail"""
  updateCategoryThumbnail(input: UpdateCategoryThumbnailInput!): UpdateCategoryThumbnailPayload

  """Create a new character"""
  createCharacter(input: CreateCharacterInput!): CreateCharacterPayload

  """Update character title"""
  updateCharacterName(input: UpdateCharacterNameInput!): UpdateCharacterNamePayload

  """Update character thumbnail"""
  updateCharacterThumbnail(input: UpdateCharacterThumbnailInput!): UpdateCharacterThumbnailPayload

  """Update the audience for the curation profile"""
  updateCurationProfileAudience(input: UpdateCurationProfileAudienceInput!): UpdateCurationProfileAudiencePayload

  """Update the category for the curation profile"""
  updateCurationProfileCategory(input: UpdateCurationProfileCategoryInput!): UpdateCurationProfileCategoryPayload

  """Update the date of birth for the curation profile"""
  updateCurationProfileDateOfBirth(input: UpdateCurationProfileDateOfBirthInput!): UpdateCurationProfileDateOfBirthPayload

  """Like a post"""
  likePost(input: LikePostInput!): LikePostPayload

  """Undo a like on a post"""
  undoLikePost(input: UndoLikePostInput!): UndoLikePostPayload

  """Create a new post"""
  createPost(input: CreatePostInput!): CreatePostPayload

  """Update a post in draft status - audience"""
  updatePostAudience(input: UpdatePostAudienceInput!): UpdatePostAudiencePayload

  """Update a post in draft status - add content"""
  addPostContent(input: AddPostContentInput!): AddPostContentPayload

  """Update a post in draft status - remove content"""
  removePostContent(input: RemovePostContentInput!): RemovePostContentPayload

  """
  Update a post in draft status - update post content order - need to send exact same IDs
  """
  updatePostContentOrder(input: UpdatePostContentOrderInput!): UpdatePostContentOrderPayload

  """Update a post in draft status - characters"""
  updatePostCharacters(input: UpdatePostCharactersInput!): UpdatePostCharactersPayload

  """Update a post in draft status - categories"""
  updatePostCategories(input: UpdatePostCategoriesInput!): UpdatePostCategoriesPayload

  """
  Submit a post. Will be either in review or instantly move to publishing if the account is verified
  """
  submitPost(input: SubmitPostInput!): SubmitPostPayload

  """Create a new series"""
  createSeries(input: CreateSeriesInput!): CreateSeriesPayload

  """Update series title"""
  updateSeriesTitle(input: UpdateSeriesTitleInput!): UpdateSeriesTitlePayload

  """Update series thumbnail"""
  updateSeriesThumbnail(input: UpdateSeriesThumbnailInput!): UpdateSeriesThumbnailPayload

  """Issue a club infraction."""
  issueClubInfraction(input: IssueClubInfractionInput!): IssueClubInfractionPayload

  """
  In case of a false infraction, you can remove it from the club's history.
  
  Staff+ only.
  """
  removeClubInfractionHistory(input: RemoveClubInfractionHistoryInput!): RemoveClubInfractionHistoryPayload

  """Reject a specific post"""
  rejectPost(input: RejectPostInput!): RejectPostPayload

  """Remove a specific post, after a post has already been moderated"""
  removePost(input: RemovePostInput!): RemovePostPayload

  """Approve a specific post"""
  approvePost(input: ApprovePostInput!): ApprovePostPayload

  """Add moderator to posts queue"""
  addModeratorToPostQueue(input: AddModeratorToPostQueueInput!): AddModeratorToPostQueuePayload

  """Remove moderator from posts queue"""
  removeModeratorFromPostQueue(input: RemoveModeratorFromPostQueueInput!): RemoveModeratorFromPostQueuePayload

  """Report a specific post"""
  reportPost(input: ReportPostInput!): ReportPostPayload

  """Create a new rule."""
  createRule(input: CreateRuleInput!): CreateRulePayload

  """Update a rule title."""
  updateRuleTitle(input: UpdateRuleTitleInput!): UpdateRuleTitlePayload

  """Update a rule description."""
  updateRuleDescription(input: UpdateRuleDescriptionInput!): UpdateRuleDescriptionPayload

  """Update a rule infraction."""
  updateRuleInfraction(input: UpdateRuleInfractionInput!): UpdateRuleInfractionPayload

  """Update a rule deprecation."""
  updateRuleDeprecated(input: UpdateRuleDeprecatedInput!): UpdateRuleDeprecatedPayload

  """Become a member of a club"""
  becomeClubMember(input: BecomeClubMemberInput!): BecomeClubMemberPayload

  """Withdraw membership from a club"""
  withdrawClubMembership(input: WithdrawClubMembershipInput!): WithdrawClubMembershipPayload

  """Create a new club"""
  createClub(input: CreateClubInput!): CreateClubPayload

  """Add an alternative slug to the club"""
  addClubSlugAlias(input: AddClubSlugAliasInput!): AddClubSlugAliasPayload

  """Remove an alternative slug from the club"""
  removeClubSlugAlias(input: RemoveClubSlugAliasInput!): RemoveClubSlugAliasPayload

  """
  Make the alias slug the default, swapping out the old slug into the alias list.
  """
  promoteClubSlugAliasToDefault(input: PromoteClubSlugAliasToDefaultInput!): PromoteClubSlugAliasToDefaultPayload

  """Update the club's name (english-only for now)"""
  updateClubName(input: UpdateClubNameInput!): UpdateClubNamePayload

  """Update the club thumbnail"""
  updateClubThumbnail(input: UpdateClubThumbnailInput!): UpdateClubThumbnailPayload

  """
  Suspend the club.
  
  Staff+ only.
  """
  suspendClub(input: SuspendClubInput!): SuspendClubPayload

  """
  Un-Suspend the club. Suspension must be expired.
  
  Staff+ may un-suspend even if suspension hasn't expired yet.
  """
  unSuspendClub(input: UnSuspendClubInput!): UnSuspendClubPayload
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!

  """
  The reference of this post. Should always be used to reference this post.
  """
  reference: String!

  """The state of the post"""
  state: PostState!

  """The moderator to whom this pending post was assigned"""
  moderator: Account

  """The contributor who contributed this post"""
  contributor: Account!

  """The club belonging to the post"""
  club: Club!

  """Content belonging to this post"""
  content: [Resource!]!

  """The date and time of when this post was created"""
  createdAt: Time!

  """The date and time of when this post was posted"""
  postedAt: Time

  """The date at which this pending post will be reassigned"""
  reassignmentAt: Time

  """Suggested posts for this post."""
  suggestedPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """Represents the audience that this post belongs to"""
  audience: Audience

  """Categories that belong to this post"""
  categories: [Category!]!

  """Characters that belong to this post"""
  characters: [Character!]!

  """The amount of likes on this post."""
  likes: Int!

  """Whether or not the viewer liked this post."""
  viewerLiked: PostLike

  """Audit logs belonging to this pending post"""
  auditLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostAuditLogConnection!

  """Whether or not the post was reported by the viewer."""
  viewerReport: PostReport

  """Reports belonging to a post"""
  reports(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The date range for post reports. Required."""
    dateRange: PostReportDateRange!
  ): PostReportConnection!
}

"""
Post audit log

Audit log is created when a moderator takes an action against a pending post
"""
type PostAuditLog implements Node {
  """ID of the audit log"""
  id: ID!

  """The moderator that this log belongs to"""
  moderator: Account!

  """The status or the action that was taken against the pending post"""
  action: PostAuditLogAction!

  """If a post was removed or rejected, this is the rule that was cited."""
  rule: Rule

  """Additional notes by the moderator"""
  notes: String

  """The post linked to this audit log"""
  post: Post!
}

enum PostAuditLogAction {
  APPROVED
  DENIED
  REMOVED
}

"""Connection of the audit log"""
type PostAuditLogConnection {
  edges: [PostAuditLogEdge!]!
  pageInfo: PageInfo!
}

"""Date range for audit logs"""
input PostAuditLogDateRange {
  from: Time!
  to: Time!
}

"""Edge of the audit log"""
type PostAuditLogEdge {
  node: PostAuditLog!
  cursor: String!
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type PostEdge {
  cursor: String!
  node: Post!
}

type PostLike implements Node {
  """An ID uniquely identifying this like."""
  id: ID!

  """The time and date at which the post was liked."""
  likedAt: Time!

  """The post this like belongs to."""
  post: Post!

  """The account this like belongs to"""
  account: Account!
}

"""Post report"""
type PostReport implements Node {
  """ID of the report"""
  id: ID!

  """The account that initiated this report"""
  account: Account!

  """The rule that was cited for this report."""
  rule: Rule!
}

"""Connection of the post report"""
type PostReportConnection {
  edges: [PostReportEdge!]!
  pageInfo: PageInfo!
}

"""Date range for post reports"""
input PostReportDateRange {
  """The starting date range"""
  from: Time!

  """The ending date range"""
  to: Time!
}

"""Edge of the post report"""
type PostReportEdge {
  node: PostReport!
  cursor: String!
}

"""Properties by which posts connections can be sorted."""
enum PostsSort {
  """Posts by newest first"""
  NEW

  """Posts by top likes"""
  TOP
}

enum PostState {
  DRAFT
  PUBLISHING
  REVIEW
  PUBLISHED
  DISCARDING
  DISCARDED
  REJECTED
  PROCESSING
  REMOVING
  REMOVED
}

"""Update alias slug to default."""
input PromoteClubSlugAliasToDefaultInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Payload for a new alt slug"""
type PromoteClubSlugAliasToDefaultPayload {
  """The club after update"""
  club: Club
}

type Query {
  """Get the currently-authenticated account"""
  viewer: Account

  """Look up a single account"""
  account(
    """Look up a post by a username"""
    username: String!
  ): Account

  """Look up or search multiple accounts"""
  accounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the account username."""
    username: String

    """Sorting options for accounts."""
    sortBy: AccountsSort! = NEW
  ): AccountConnection!

  """List of all available languages"""
  languages: [Language!]!

  """
  The current language that is set
  
  Note: this is only temporary, per-browser language
  
  For a permanent language on an account level, see "Language" as part of viewer
  """
  language: Language!

  """
  Get the status of the authentication token - whether or not it is redeemed, account status, etc..
  
  Note: you can only view the authentication token if you're the originating
  device or you have entered a valid secret (not from same device)
  """
  viewAuthenticationToken(token: String!, secret: String): AuthenticationToken

  """Search all audiences."""
  audiences(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    slugs: [String!]

    """Search by title of the audience."""
    title: String

    """Sorting options for audiences."""
    sortBy: AudiencesSort! = POPULAR
  ): AudienceConnection!

  """Get a single audience."""
  audience(
    """Search by slug of the audience."""
    slug: String!
  ): Audience

  """Search all categories."""
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    slugs: [String!]

    """Filter by the title of the category."""
    title: String

    """Sorting options for categories."""
    sortBy: CategoriesSort! = POPULAR
  ): CategoryConnection!

  """Get a single category."""
  category(
    """Search by slug of the category."""
    slug: String!
  ): Category

  """Get or search all characters"""
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by character slugs."""
    slugs: [String!]

    """
    When searching for a character by slug, you need to include the series' slug since slugs are unique-per-series.
    
    Only one slug is allowed for now since you don't want inaccurate results
    """
    seriesSlug: String

    """Filter by the name of the character."""
    name: String

    """Sorting options for characters."""
    sortBy: CharactersSort! = POPULAR
  ): CharacterConnection!

  """Get a single character."""
  character(
    """Search by slug of the character."""
    slug: String!

    """A series slug is required since character slugs are unique-per-series."""
    seriesSlug: String!
  ): Character

  """Posts feed. The default."""
  postsFeed(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """Look up a single post"""
  post(
    """Look up a post by a reference #"""
    reference: String!
  ): Post

  """Search multiple posts"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!

  """Get or search all series"""
  series(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by series slugs."""
    slugs: [String!]

    """Filter by the title of the series."""
    title: String

    """Sorting options for series."""
    sortBy: SeriesSort! = POPULAR
  ): SeriesConnection!

  """Get a single serial."""
  serial(
    """Search by slug of the serial."""
    slug: String!
  ): Series

  """All post reports."""
  postReports(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The date range for post reports. Required."""
    dateRange: PostReportDateRange!
  ): PostReportConnection!

  """Get all rules for the site."""
  rules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Whether or not to show deprecated rules."""
    deprecated: Boolean! = false
  ): RuleConnection!

  """Search multiple clubs."""
  clubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by club slugs."""
    slugs: [String!]

    """Filter by the name of the club."""
    name: String

    """Sorting options for clubs."""
    sortBy: ClubsSort! = POPULAR
  ): ClubConnection!

  """Get a single club."""
  club(
    """Search by slug of the club."""
    slug: String!
  ): Club
  node(id: ID!): Node
}

"""Moderate the pending post input"""
input RejectPostInput {
  """Pending post to take action against"""
  postId: ID!

  """Required to enter a rule ID."""
  ruleId: ID!

  """Any extra notes for the moderator"""
  notes: String
}

"""Reject the pending post payload"""
type RejectPostPayload {
  """The audit log generated by the pending post"""
  postAuditLog: PostAuditLog
}

"""Remove a club infraction."""
input RemoveClubInfractionHistoryInput {
  """The history item to remove."""
  clubInfractionHistoryId: ID!
}

"""Remove club infraction history."""
type RemoveClubInfractionHistoryPayload {
  """The removed infraction history Id."""
  clubInfractionHistoryId: ID!
}

"""Remove alias slug."""
input RemoveClubSlugAliasInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Payload for a new alt slug"""
type RemoveClubSlugAliasPayload {
  """The club after update"""
  club: Club
}

"""Remove moderator from posts queue."""
input RemoveModeratorFromPostQueueInput {
  """The moderator account to take the action on"""
  accountId: ID!
}

"""Remove moderator from posts queue."""
type RemoveModeratorFromPostQueuePayload {
  """The account that was updated"""
  account: Account
}

"""Remove post content."""
input RemovePostContentInput {
  """The post to update"""
  id: ID!

  """Content IDs for the content"""
  contentIds: [ID!]!
}

"""Payload for updating a post"""
type RemovePostContentPayload {
  """The post after the update"""
  post: Post
}

"""Moderate the pending post input"""
input RemovePostInput {
  """Pending post to take action against"""
  postId: ID!

  """Required to enter a rule ID."""
  ruleId: ID!

  """Any extra notes for the staff member"""
  notes: String
}

"""Remove the pending post payload"""
type RemovePostPayload {
  """The audit log generated by the pending post"""
  postAuditLog: PostAuditLog
}

"""Report the post input"""
input ReportPostInput {
  """The post to report"""
  postId: ID!

  """The rule to report this post for."""
  ruleId: ID!
}

"""Report the post payload"""
type ReportPostPayload {
  """The post report that was generated"""
  postReport: PostReport
}

"""
A resource represents an image or a video format that contains an ID to uniquely identify it,
and urls to access the resources. We have many urls in order to provide a fallback for older browsers

We also identify the type of resource (image or video) to make it easy to distinguish them
"""
type Resource implements Node {
  """An ID uniquely identifying this resource."""
  id: ID!

  """The type of resource - either an image or a video."""
  type: ResourceType!

  """
  Whether or not the resource is processed. Can be used for additional permission checks.
  """
  processed: Boolean!

  """URLs to access the resource."""
  urls: [ResourceUrl!]!
}

"""Identifies the type of resource"""
enum ResourceType {
  IMAGE
  VIDEO
}

"""A type representing a url to the resource and the mimetype"""
type ResourceUrl {
  url: URI!
  mimeType: String!
}

"""Payload for revoking the current viewer"""
type RevokeAccountAccessPayload {
  """The account that was revoked"""
  revokedAccountId: ID!
}

"""Input to revoke moderator role"""
input RevokeAccountModeratorRole {
  """The account ID that the role needs to be revoked from"""
  accountId: ID!
}

"""Revoked account"""
type RevokeAccountModeratorRolePayload {
  """The account that the role was revoked from"""
  account: Account
}

"""Input for updating an account's username"""
input RevokeAccountSessionInput {
  """Session ID that should be revoked"""
  accountSessionId: ID!
}

"""Payload of the revoked account session"""
type RevokeAccountSessionPayload {
  """The ID of the session that was revoked"""
  accountSessionId: ID!
}

"""Input to revoke staff role"""
input RevokeAccountStaffRole {
  """The account ID that the role needs to be revoked from"""
  accountId: ID!
}

"""Revoked account"""
type RevokeAccountStaffRolePayload {
  """The account that the role was revoked from"""
  account: Account
}

"""Input for revoking an authentication token"""
input RevokeAuthenticationTokenInput {
  """The token to revoke"""
  token: String!

  """
  The secret associated with this token. Required if revoking the token not on the same device that created it.
  """
  secret: String
}

"""Payload for revoking the authentication token"""
type RevokeAuthenticationTokenPayload {
  """The authentication token that was removed"""
  revokedAuthenticationTokenId: ID!
}

"""Rule."""
type Rule implements Node {
  """ID of the rule."""
  id: ID!

  """The title for this rule."""
  title: String!

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """The description for this rule."""
  description: String!

  """All translations for this description."""
  descriptionTranslations: [Translation!]!

  """If this rule is deprecated."""
  deprecated: Boolean!

  """
  If breaking this rule would cause an infraction - used for when posts are rejected or removed and this rule is applied.
  """
  infraction: Boolean!
}

"""Connection of the rule"""
type RuleConnection {
  edges: [RuleEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the rule"""
type RuleEdge {
  node: Rule!
  cursor: String!
}

type Series implements Node {
  """An ID pointing to this series."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A title for this series."""
  title: String!

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """Posts belonging to this series"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!
}

type SeriesConnection {
  edges: [SeriesEdge!]!
  pageInfo: PageInfo!
}

type SeriesEdge {
  cursor: String!
  node: Series!
}

"""Properties by which series connections can be sorted."""
enum SeriesSort {
  """Series by newest first"""
  NEW

  """Series by top likes"""
  TOP

  """Series by most posts"""
  POPULAR
}

"""Publish post."""
input SubmitPostInput {
  """The post to publish"""
  id: ID!
}

"""Payload for submitting a post"""
type SubmitPostPayload {
  """The post after being submitted"""
  post: Post

  """Whether or not the submitted post is going in review"""
  inReview: Boolean
}

"""Suspend the club."""
input SuspendClubInput {
  """The club to suspend."""
  clubId: ID!

  """When the suspension should end."""
  endTime: Time!
}

"""Suspend club payload."""
type SuspendClubPayload {
  """The new club after it's suspended."""
  club: Club
}

scalar Time

type Translation {
  """The language linked to this translation."""
  language: Language!

  """The translation text."""
  text: String!
}

"""Undo like on a post."""
input UndoLikePostInput {
  """The post ID that you want to unlike"""
  postId: ID!
}

"""Payload for undoing a post like"""
type UndoLikePostPayload {
  """The post like that was deleted."""
  postLikeId: ID
}

"""Input for unlocking an account"""
input UnlockAccountInput {
  """The account to unlock."""
  accountID: ID!
}

"""Payload for the unlocked account"""
type UnlockAccountPayload {
  """Account that was unlocked"""
  account: Account
}

"""Un-Suspend the club."""
input UnSuspendClubInput {
  """The club to un-suspend."""
  clubId: ID!
}

"""Un suspend club payload."""
type UnSuspendClubPayload {
  """The new club after it's not suspended anymore."""
  club: Club
}

"""Input for updating the account status to primary"""
input UpdateAccountEmailStatusToPrimaryInput {
  """The email that should be updated"""
  accountEmailId: ID!
}

"""Payload of the updated account email"""
type UpdateAccountEmailStatusToPrimaryPayload {
  """The account email that was updated to primary"""
  primaryAccountEmail: AccountEmail

  """The account email that was updated to 'confirmed' status"""
  updatedAccountEmail: AccountEmail
}

"""Input for updating the account language"""
input UpdateAccountLanguageInput {
  """The locale to update the language to"""
  locale: BCP47!
}

"""Payload of the account language update"""
type UpdateAccountLanguagePayload {
  """The new language that is now set"""
  language: Language

  """The account that has the updated language"""
  Account: Account
}

"""Input for updating an account's username"""
input UpdateAccountUsernameInput {
  """The username that the account should be updated to"""
  username: String!
}

"""Payload of the updated username"""
type UpdateAccountUsernamePayload {
  """Validation for taking an account username"""
  validation: UpdateAccountUsernameValidation

  """The account that was modified"""
  account: Account
}

"""Validation message for updating account username"""
enum UpdateAccountUsernameValidation {
  USERNAME_TAKEN
}

"""Update audience."""
input UpdateAudienceIsStandardInput {
  """The audience to update"""
  id: ID!

  """Standard"""
  standard: Boolean!
}

"""Payload for updating audience"""
type UpdateAudienceIsStandardPayload {
  """The audience after update"""
  audience: Audience
}

"""Update audience."""
input UpdateAudienceThumbnailInput {
  """The audience to update"""
  id: ID!

  """The thumbnail"""
  thumbnail: String!
}

"""Payload for updating audience"""
type UpdateAudienceThumbnailPayload {
  """The audience after update"""
  audience: Audience
}

"""Update audience."""
input UpdateAudienceTitleInput {
  """The audience to update"""
  id: ID!

  """The title to update"""
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Payload for updating audience"""
type UpdateAudienceTitlePayload {
  """The audience after update"""
  audience: Audience
}

"""Update category."""
input UpdateCategoryThumbnailInput {
  """The category to update"""
  id: ID!

  """The thumbnail"""
  thumbnail: String!
}

"""Payload for updating category"""
type UpdateCategoryThumbnailPayload {
  """The category after update"""
  category: Category
}

"""Update category."""
input UpdateCategoryTitleInput {
  """The category to update"""
  id: ID!

  """The title to update"""
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Payload for updating category"""
type UpdateCategoryTitlePayload {
  """The category after update"""
  category: Category
}

"""Update character."""
input UpdateCharacterNameInput {
  """The character to update"""
  id: ID!

  """The name to update"""
  name: String!

  """The localization for this name"""
  locale: BCP47!
}

"""Payload for updating character"""
type UpdateCharacterNamePayload {
  """The character after update"""
  character: Character
}

"""Update character."""
input UpdateCharacterThumbnailInput {
  """The character to update"""
  id: ID!

  """The thumbnail"""
  thumbnail: String!
}

"""Payload for updating character"""
type UpdateCharacterThumbnailPayload {
  """The character after update"""
  character: Character
}

"""Update club name."""
input UpdateClubNameInput {
  """The club to update"""
  id: ID!

  """The chosen name for the club."""
  name: String!
}

"""Payload for updating the name"""
type UpdateClubNamePayload {
  """The club after update"""
  club: Club
}

"""Update club thumbnail."""
input UpdateClubThumbnailInput {
  """The club to update"""
  id: ID!

  """The thumbnail for the club."""
  thumbnail: String!
}

"""Payload for updating the thumbnail"""
type UpdateClubThumbnailPayload {
  """The club after update"""
  club: Club
}

"""Update curation profile audience."""
input UpdateCurationProfileAudienceInput {
  """The audiences that were selected"""
  audienceIds: [ID!]!

  """Whether or not this section was skipped"""
  skipped: Boolean!
}

"""Payload for updating profile audience"""
type UpdateCurationProfileAudiencePayload {
  """The updated profile."""
  curationProfile: CurationProfile
}

"""Update curation profile category."""
input UpdateCurationProfileCategoryInput {
  """The categories that were selected"""
  categoryIds: [ID!]!

  """Whether or not this section was skipped"""
  skipped: Boolean!
}

"""Payload for updating profile category"""
type UpdateCurationProfileCategoryPayload {
  """The updated profile."""
  curationProfile: CurationProfile
}

"""Update curation profile date of birth."""
input UpdateCurationProfileDateOfBirthInput {
  """The date of birth that was selected"""
  dateOfBirth: Time

  """Whether or not this section was skipped"""
  skipped: Boolean!
}

"""Payload for updating profile date of birth"""
type UpdateCurationProfileDateOfBirthPayload {
  """The updated profile."""
  curationProfile: CurationProfile
}

"""Input for updating the current language"""
input UpdateLanguageInput {
  """The locale to update the language to"""
  locale: BCP47!
}

"""Payload of the language update"""
type UpdateLanguagePayload {
  """The new language that is now set"""
  language: Language
}

"""Update post audience."""
input UpdatePostAudienceInput {
  """The post to update"""
  id: ID!

  """The audience that this post belongs to"""
  audienceId: ID!
}

"""Payload for updating a post"""
type UpdatePostAudiencePayload {
  """The post after the update"""
  post: Post
}

"""Update post audience."""
input UpdatePostCategoriesInput {
  """The post to update"""
  id: ID!

  """Category IDs for this post"""
  categoryIds: [ID!]!
}

"""Payload for updating a post"""
type UpdatePostCategoriesPayload {
  """The post after the update"""
  post: Post
}

"""Update post characters."""
input UpdatePostCharactersInput {
  """The post to update"""
  id: ID!

  """Ids for all the characters"""
  characterIds: [ID!]!
}

"""Payload for updating a post"""
type UpdatePostCharactersPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostClubPayload {
  """The post after the update"""
  post: Post
}

"""Update post content order."""
input UpdatePostContentOrderInput {
  """The post to update"""
  id: ID!

  """Content IDs for the content"""
  contentIds: [ID!]!
}

"""Payload for updating a post"""
type UpdatePostContentOrderPayload {
  """The post after the update"""
  post: Post
}

"""Update post report reason."""
input UpdateRuleDeprecatedInput {
  """The rule to update."""
  ruleId: ID!

  """The deprecated status."""
  deprecated: Boolean!
}

"""Updated rule."""
type UpdateRuleDeprecatedPayload {
  """The updated rule."""
  rule: Rule
}

"""Update rule."""
input UpdateRuleDescriptionInput {
  """The rule to update."""
  ruleId: ID!

  """The description to update"""
  description: String!

  """The localization for this description."""
  locale: BCP47!
}

"""Updated rule."""
type UpdateRuleDescriptionPayload {
  """The updated rule."""
  rule: Rule
}

"""Update post report reason."""
input UpdateRuleInfractionInput {
  """The rule to update."""
  ruleId: ID!

  """The infraction status."""
  infraction: Boolean!
}

"""Updated rule."""
type UpdateRuleInfractionPayload {
  """The updated rule."""
  rule: Rule
}

"""Update rule."""
input UpdateRuleTitleInput {
  """The rule to update."""
  ruleId: ID!

  """The title to update"""
  title: String!

  """The localization for this title."""
  locale: BCP47!
}

"""Updated rule."""
type UpdateRuleTitlePayload {
  """The updated rule."""
  rule: Rule
}

"""Update series."""
input UpdateSeriesThumbnailInput {
  """The series to update"""
  id: ID!

  """The thumbnail"""
  thumbnail: String!
}

"""Payload for updating series"""
type UpdateSeriesThumbnailPayload {
  """The category after update"""
  series: Series
}

"""Update series."""
input UpdateSeriesTitleInput {
  """The series to update"""
  id: ID!

  """The title to update"""
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Payload for updating series"""
type UpdateSeriesTitlePayload {
  """The series after update"""
  series: Series
}

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

"""Input for verifying authentication token"""
input VerifyAuthenticationTokenInput {
  """The original token"""
  token: String!

  """Secret (get it from the email)"""
  secret: String!
}

"""Payload for verifying the authentication token"""
type VerifyAuthenticationTokenPayload {
  """Validation options"""
  validation: VerifyAuthenticationTokenValidation

  """The authentication token"""
  authenticationToken: AuthenticationToken
}

"""Validation for granting account access"""
enum VerifyAuthenticationTokenValidation {
  TOKEN_INVALID
}

"""Withdraw club membership."""
input WithdrawClubMembershipInput {
  """The chosen club ID."""
  clubId: ID!
}

"""Payload for withdrawing club membership"""
type WithdrawClubMembershipPayload {
  """The club membership that was removed"""
  clubMemberId: ID!
}
