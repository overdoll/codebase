type Account implements Node {
  """ID representing the account"""
  id: ID!

  """The ID that the account can be referenced by"""
  reference: String!

  """A URL pointing to the accounts's public avatar."""
  avatar(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """The username of the account."""
  username: String!

  """Whether or not this account is a staff member"""
  isStaff: Boolean!

  """Whether or not this account is part of the moderation team"""
  isModerator: Boolean!

  """Whether or not this account is an artist"""
  isArtist: Boolean!

  """The details of the account lock"""
  lock: AccountLock

  """Usernames for account (history)"""
  usernames(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountUsernameConnection!

  """
  Emails for account (multiple emails per account)

  Only queryable if the currently logged-in account belongs to the requested account
  """
  emails(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountEmailConnection!

  """
  Sessions linked to this account

  Only queryable if the currently logged-in account belongs to the requested account
  """
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountSessionConnection!

  """
  Multi factor account settings

  Only queryable if the currently logged-in account belongs to the requested account
  """
  multiFactorSettings: AccountMultiFactorSettings!

  """
  MFA Recovery codes belonging to this account

  Only queryable if the currently logged-in account belongs to the requested account
  """
  recoveryCodes: [AccountMultiFactorRecoveryCode!]!

  """Artist status for this account"""
  artist: Artist

  """Posts queue specific to this account (when moderator)"""
  moderatorPostsQueue(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """Posts specific to this account"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """Contributions specific to this account"""
  contributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """
  Post Audit Logs linked to this account

  Viewable by either the currently logged-in account or staff+
  """
  moderatorPostAuditLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostAuditLogConnection!

  """
  Infraction history for this account

  Viewable by the currently authenticated account or staff+
  """
  infractions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): AccountInfractionHistoryConnection!

  """
  Moderator settings and status for this account

  Viewable by the currently authenticated account or staff+
  """
  moderator: Moderator

  """Contributor settings and status"""
  contributor: Contributor
}

"""Connection of the account"""
type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the account"""
type AccountEdge {
  node: Account!
  cursor: String!
}

"""Email belonging to a specific account"""
type AccountEmail implements Node {
  """ID of the account email"""
  id: ID!

  """The account email"""
  email: String!

  """The current status of the account email"""
  status: AccountEmailStatus!

  """The account that this email belongs to"""
  account: Account!
}

"""Connection of the account email"""
type AccountEmailConnection {
  pageInfo: PageInfo!
  edges: [AccountEmailEdge!]!
}

"""Edge of the account email"""
type AccountEmailEdge {
  cursor: String!
  node: AccountEmail!
}

enum AccountEmailStatus {
  CONFIRMED
  UNCONFIRMED
  PRIMARY
}

"""Infraction history belonging to an account"""
type AccountInfractionHistory implements Node {
  """ID of the infraction history"""
  id: ID!

  """The reason for this infraction"""
  reason: String!
}

"""Connection of the infraction history"""
type AccountInfractionHistoryConnection {
  edges: [AccountInfractionHistoryEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the infraction history"""
type AccountInfractionHistoryEdge {
  node: AccountInfractionHistory!
  cursor: String!
}

type AccountLock {
  expires: Int!
  reason: AccountLockReason!
}

enum AccountLockReason {
  PostInfraction
}

"""The multi-factor recovery code belonging to the account"""
type AccountMultiFactorRecoveryCode {
  """The multi factor recovery code"""
  code: String!
}

type AccountMultiFactorSettings {
  """
  Have recovery codes been generated? Required in order to configure TOTP
  """
  recoveryCodesGenerated: Boolean!

  """Is multi factor enabled - can be toggled off if they want to"""
  multiFactorEnabled: Boolean!

  """Privileged users cannot disable MFA (moderators, staff)"""
  canDisableMultiFactor: Boolean!

  """
  Has TOTP been configured? Recovery codes must be generated before configuring
  """
  multiFactorTotpConfigured: Boolean!
}

"""Session belonging to a specific account"""
type AccountSession implements Node {
  """ID of the session"""
  id: ID!

  """The user agent who first created the sesssion"""
  userAgent: String!

  """The IP of who first created the session"""
  ip: String!

  """When the session was created"""
  created: String!

  """If the session belongs to the currently authenticated account"""
  current: Boolean!
}

"""Edge of the account session"""
type AccountSessionConnection {
  pageInfo: PageInfo!
  edges: [AccountSessionEdge!]!
}

"""Edge of the account session"""
type AccountSessionEdge {
  cursor: String!
  node: AccountSession!
}

"""Username belonging to a specific account"""
type AccountUsername implements Node {
  """ID of the account username"""
  id: ID!

  """The account username"""
  username: String!

  """The account that this username belongs to"""
  account: Account!
}

"""Connection of the account username"""
type AccountUsernameConnection {
  pageInfo: PageInfo!
  edges: [AccountUsernameEdge!]!
}

"""Edge of the account username"""
type AccountUsernameEdge {
  cursor: String!
  node: AccountUsername!
}

"""Add an email to the account"""
input AddAccountEmailInput {
  """The email that should be added to this account"""
  email: String!
}

"""Email to add the account"""
type AddAccountEmailPayload {
  """The account email that was added to"""
  accountEmail: AccountEmail
}

type Artist implements Node {
  id: ID!
  doNotPostReason: String

  """The account linked to this artist"""
  account: Account!
}

type AuthenticationToken {
  sameSession: Boolean!
  verified: Boolean!
  session: String!
  email: String!
  accountStatus: AuthenticationTokenAccountStatus
}

type AuthenticationTokenAccountStatus {
  registered: Boolean!
  authenticated: Boolean!
  multiFactor: [MultiFactorType!]
}

type Category implements Node & Object {
  """An ID pointing to this category."""
  id: ID!

  """A URL pointing to the object's thumbnail."""
  thumbnail(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """A title for this category."""
  title: String!

  """Posts belonging to this category"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type Character implements Node & Object {
  """An ID pointing to this character."""
  id: ID!

  """A URL pointing to the object's thumbnail."""
  thumbnail(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """A name for this character."""
  name: String!

  """The media linked to this character."""
  media: Media!

  """Posts belonging to this character"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!
}

type CharacterConnection {
  edges: [CharacterEdge!]!
  pageInfo: PageInfo!
}

type CharacterEdge {
  cursor: String!
  node: Character!
}

input CharacterRequest {
  name: String!
  customMediaName: String
  existingMediaId: ID
}

type CharacterRequestType {
  name: String!
  media: String!
}

"""Input for confirming the account email"""
input ConfirmAccountEmailInput {
  """The ID that is sent for confirmation"""
  id: String!
}

"""Payload for confirming the account email"""
type ConfirmAccountEmailPayload {
  """The account email that was confirmed"""
  accountEmail: AccountEmail
}

type Content {
  url: URI!
}

type Contributor implements Node {
  """The ID of the contributor"""
  id: ID!

  """The account linked to this contributor"""
  account: Account!
}

"""Payload for a created pending post"""
input CreateAccountWithAuthenticationTokenInput {
  username: String!
}

"""Payload for creating an account"""
type CreateAccountWithAuthenticationTokenPayload {
  """The account that was created"""
  account: Account
}

"""Create pending post."""
input CreatePostInput {
  """Image IDs for the content"""
  content: [String!]!

  """Category IDs for this post"""
  categoryIds: [String!]!

  """Ids for all the characters"""
  characterIds: [String!]!

  """Requests (custom)"""
  mediaRequests: [String!]
  characterRequests: [CharacterRequest!]

  """Existing artist's ID"""
  existingArtist: ID

  """Custom Artist's username"""
  customArtistUsername: String

  """The author of this post is the artist, as well as contributor"""
  posterIsArtist: Boolean
}

"""Payload for a created pending post"""
type CreatePostPayload {
  """The pending post after the creation"""
  post: Post

  """If this pending post will be in review or not"""
  review: Boolean
}

"""Input for removing an email from an account"""
input DeleteAccountEmailInput {
  """The email that should be removed"""
  accountEmailId: ID!
}

"""Email to add the account"""
type DeleteAccountEmailPayload {
  """The ID of the account email that was removed"""
  accountEmailId: ID!
}

"""Payload for disabling account multi factor"""
type DisableAccountMultiFactorPayload {
  """TOTP that was removed from this account, if it was removed"""
  accountMultiFactorTOTPEnabled: Boolean
}

"""Input for enrolling the account into TOTP"""
input EnrollAccountMultiFactorTotpInput {
  """The code that the TOTP expects"""
  code: String!
}

"""Payload of the enrolled totp payload"""
type EnrollAccountMultiFactorTotpPayload {
  """TOTP that belongs to this account now"""
  accountMultiFactorTOTPEnabled: Boolean
}

"""Payload of the created account recovery codes"""
type GenerateAccountMultiFactorRecoveryCodesPayload {
  """The recovery codes that were created"""
  accountMultiFactorRecoveryCodes: [AccountMultiFactorRecoveryCode!]!
}

"""Payload of the generated TOTP token"""
type GenerateAccountMultiFactorTotpPayload {
  """TOTP pair that was generated"""
  multiFactorTOTP: MultiFactorTotp
}

"""
Payload for granting access to an account using the token and the recovery code
"""
input GrantAccountAccessWithAuthenticationTokenAndMultiFactorInput {
  recoveryCode: String
  code: String
}

"""
Payload for granting access to an account using the authentication token and Recovery Code
"""
type GrantAccountAccessWithAuthenticationTokenAndMultiFactorPayload {
  """The account that granted access to"""
  account: Account
}

"""Input for granting an authentication token"""
input GrantAuthenticationTokenInput {
  email: String!
}

"""Payload for starting an authentication"""
type GrantAuthenticationTokenPayload {
  """The authentication token after starting"""
  authenticationToken: AuthenticationToken
}

type Media implements Node & Object {
  """An ID pointing to this media."""
  id: ID!

  """A URL pointing to the object's thumbnail."""
  thumbnail(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """A title for this media."""
  title: String!

  """Posts belonging to this media"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!
}

type MediaConnection {
  edges: [MediaEdge!]!
  pageInfo: PageInfo!
}

type MediaEdge {
  cursor: String!
  node: Media!
}

"""Moderate the pending post input"""
input ModeratePostInput {
  """Pending post to take action against"""
  postId: ID!

  """If rejecting a pending post, put in the ID of a rejection reason"""
  postRejectionReasonId: ID

  """Any extra notes for the moderator"""
  notes: String!
}

"""Moderate the pending post payload"""
type ModeratePostPayload {
  """The audit log generated by the pending post"""
  postAuditLog: PostAuditLog
}

type Moderator implements Node {
  """The ID of the moderator"""
  id: ID!

  """The last time this moderator was selected for a post"""
  lastSelected: Time!

  """The account linked to this moderator"""
  account: Account!
}

"""TOTP secret + image combination"""
type MultiFactorTotp {
  """The TOTP secret"""
  secret: String!

  """
  Always html image compatible. Just set SRC tag to this and it will work!
  """
  imageSrc: String!
}

enum MultiFactorType {
  TOTP
}

type Mutation {
  """
  Unlock Account - account may be locked for any reason. Use this endpoint to unlock the account
  """
  unlockAccount: UnlockAccountPayload

  """Add an email to the account, will need to be confirmed"""
  addAccountEmail(input: AddAccountEmailInput!): AddAccountEmailPayload

  """
  Delete account email - email must belong to account and cannot be the primary email
  """
  deleteAccountEmail(input: DeleteAccountEmailInput!): DeleteAccountEmailPayload

  """
  Update the account username

  Will retain the old username
  """
  updateAccountUsernameAndRetainPrevious(input: UpdateAccountUsernameAndRetainPreviousInput!): UpdateAccountUsernameAndRetainPreviousPayload

  """Revoke a session for this account"""
  revokeAccountSession(input: RevokeAccountSessionInput!): RevokeAccountSessionPayload

  """
  Update the account email status to primary

  Cannot update if the email is not confirmed
  """
  updateAccountEmailStatusToPrimary(input: UpdateAccountEmailStatusToPrimaryInput!): UpdateAccountEmailStatusToPrimaryPayload

  """
  Generates a new set of recovery codes. The previous set (whatever it was) will be deleted!
  """
  generateAccountMultiFactorRecoveryCodes: GenerateAccountMultiFactorRecoveryCodesPayload

  """
  Generate a TOTP key for the current user. Recovery codes must be generated first.
  """
  generateAccountMultiFactorTotp: GenerateAccountMultiFactorTotpPayload

  """
  Enroll into TOTP.

  Must have called "generateAccountMultiFactorTOTP" first before enrolling, since this will
  generate a valid secret
  """
  enrollAccountMultiFactorTotp(input: EnrollAccountMultiFactorTotpInput!): EnrollAccountMultiFactorTotpPayload

  """
  Disable account multi factor

  Will delete all multi factor settings (if TOTP is set up, etc...)

  Priv. users cannot disable multi factor
  """
  disableAccountMultiFactor: DisableAccountMultiFactorPayload

  """Confirm account email, so it may be used"""
  confirmAccountEmail(input: ConfirmAccountEmailInput!): ConfirmAccountEmailPayload

  """
  Grant authentication token

  Authentication token can be used to login into a specific account, provided the token's value is first redeemed
  with the query

  Note: the actual authentication token is opaque (set & read from cookies)
  """
  grantAuthenticationToken(input: GrantAuthenticationTokenInput!): GrantAuthenticationTokenPayload

  """
  Revoke authentication token

  Creating accounts and completing authentication flows will not be possible once it's revoked

  Note: the actual authentication token is opaque (set & read from cookies)
  """
  revokeAuthenticationToken: RevokeAuthenticationTokenPayload

  """
  Create an account using the current authentication token

  Note: the actual authentication token is opaque (set & read from cookies)
  """
  createAccountWithAuthenticationToken(input: CreateAccountWithAuthenticationTokenInput!): CreateAccountWithAuthenticationTokenPayload

  """Logout the current account"""
  revokeAccountAccess: RevokeAccountAccessPayload

  """
  Re-issue an authentication token based on the current one

  Note: the actual authentication token is opaque (set & read from cookies)
  """
  reissueAuthenticationToken: ReissueAuthenticationTokenPayload

  """
  Grant account access using an authentication token and a multi factor option

  Set "code" when authenticating with a TOTP code
  Set "recoveryCode" when authenticating with a recovery code

  Note: the actual authentication token is opaque (set & read from cookies)
  """
  grantAccountAccessWithAuthenticationTokenAndMultiFactor(input: GrantAccountAccessWithAuthenticationTokenAndMultiFactorInput!): GrantAccountAccessWithAuthenticationTokenAndMultiFactorPayload

  """
  Will verify the authentication token.

  If token does not exist in the cookie, it will only verify

  If the token exists in the cookie, it will also attempt to grant access to the account associated
  to this token

  If no account exists,

  Note: the actual authentication token is opaque (set & read from cookies)
  """
  verifyAuthenticationTokenAndAttemptAccountAccessGrant(input: VerifyAuthenticationTokenAndAttemptAccountAccessGrantInput!): VerifyAuthenticationTokenAndAttemptAccountAccessGrantPayload

  """Create a new pending post"""
  createPost(input: CreatePostInput!): CreatePostPayload

  """
  Moderate a specific pending post
  Pending post must belong to the moderator

  If rejecting, must input a rejection reason and additional notes
  """
  moderatePost(input: ModeratePostInput!): ModeratePostPayload

  """
  Revert an audit log, in case it was done incorrectly

  Will delete an infraction if there was one, but the rest of the audit log will generally stay intact
  """
  revertPostAuditLog(data: RevertPostAuditLogInput!): RevertPostAuditLogPayload

  """
  Toggle moderator status

  Will remove or add the moderator from the queue

  Current status can be queried from moderatorSettings of the account
  """
  toggleModeratorSettingsInQueue: ToggleModeratorSettingsInQueuePayload
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  id: ID!
}

"""Represents an account"""
interface Object {
  """A URL pointing to the object's thumbnail."""
  thumbnail(
    """The size of the resulting square image."""
    size: Int
  ): URI!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!

  """
  The reference of this post. Should always be used to reference this post.
  """
  reference: String!

  """The state of the post"""
  state: PostState!

  """Represents the account that this post belongs to"""
  artist: Account!

  """The moderator to whom this pending post was assigned"""
  moderator: Account!

  """The contributor who contributed this post"""
  contributor: Account!

  """Content belonging to this post"""
  content: [Content!]!

  """The media that was requested."""
  mediaRequests: [String!]

  """The characters that were requested"""
  characterRequests: [CharacterRequestType!]

  """The date and time of when this post was created"""
  postedAt: Time!

  """The date at which this pending post will be reassigned"""
  reassignmentAt: Time!

  """Categories that belong to this post"""
  categories: [Category!]!

  """Characters that belong to this post"""
  characters: [Character!]!

  """Audit logs belonging to this pending post"""
  auditLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostAuditLogConnection!
}

"""
Post audit log

Audit log is created when a moderator takes an action against a pending post
"""
type PostAuditLog implements Node {
  """ID of the audit log"""
  id: ID!

  """The contributor that the audit log belongs to"""
  contributor: Account!

  """The moderator that this log belongs to"""
  moderator: Account!

  """The status or the action that was taken against the pending post"""
  action: PostAuditLogAction!

  """The reason the action was taken"""
  reason: String!

  """Additional notes by the moderator"""
  notes: String!

  """If this audit log was reverted"""
  reverted: Boolean!

  """The time until which this audit log will be revertable"""
  reversibleUntil: Time!

  """
  The infraction that is linked to this audit log, mainly kept here as a reference so reverting will be easier
  """
  infractionId: ID

  """The post linked to this audit log"""
  post: Post!
}

enum PostAuditLogAction {
  Approved
  Denied
}

"""Connection of the audit log"""
type PostAuditLogConnection {
  edges: [PostAuditLogEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the audit log"""
type PostAuditLogEdge {
  node: PostAuditLog!
  cursor: String!
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type PostEdge {
  cursor: String!
  node: Post!
}

"""Infraction history belonging to an account"""
type PostRejectionReason implements Node {
  """ID of the rejection reason"""
  id: ID!

  """The reason for this rejection"""
  reason: String!

  """
  If the rejection reason will count against an infraction on the account
  """
  infraction: Boolean!
}

"""Connection of the pending post rejection reason"""
type PostRejectionReasonConnection {
  edges: [PostRejectionReasonEdge!]!
  pageInfo: PageInfo!
}

"""Edge of the pending post rejection reason"""
type PostRejectionReasonEdge {
  node: PostRejectionReason!
  cursor: String!
}

enum PostState {
  Publishing
  Review
  Published
  Discarding
  Discarded
  Rejected
  Processing
}

type Query {
  """Get the currently-authenticated account"""
  viewer: Account

  """Look up a single account"""
  account(
    """Look up a post by a username"""
    username: String!
  ): Account

  """Look up or search multiple accounts"""
  accounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the account username."""
    username: String

    """Filter whether or not this account is an artist."""
    isArtist: Boolean = false
  ): AccountConnection!

  """
  Get the status of the authentication token - whether or not it is redeemed, account status, etc..

  Note: the actual authentication token is opaque (set & read from cookies)
  """
  viewAuthenticationToken: AuthenticationToken
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    name: String
  ): CategoryConnection!
  medias(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    title: String
  ): MediaConnection!
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    name: String
    mediaTitle: String
  ): CharacterConnection!

  """Look up a single post"""
  post(
    """Look up a post by a reference #"""
    reference: String!
  ): Post

  """Search multiple posts"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category Ids."""
    categoryIds: [ID!]

    """Search by charcter Ids."""
    characterIds: [ID!]

    """Search by media Ids."""
    mediaIds: [ID!]
  ): PostConnection!

  """
  Get rejection reasons that can be used for pending posts

  Only viewable by moderators+
  """
  postRejectionReasons(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostRejectionReasonConnection!
  node(id: ID!): Node
}

"""Payload re-sending authentication email"""
type ReissueAuthenticationTokenPayload {
  """The authentication token"""
  authenticationToken: AuthenticationToken
}

"""Revert the pending post audit log input"""
input RevertPostAuditLogInput {
  """The audit log to revert"""
  postAuditLogId: ID!
}

"""Revert the pending post audit log payload"""
type RevertPostAuditLogPayload {
  """The new state of the audit log"""
  postAuditLog: PostAuditLog
}

"""Payload for revoking the current viewer"""
type RevokeAccountAccessPayload {
  """The account that was revoked"""
  revokedAccountId: ID!
}

"""Input for updating an account's username"""
input RevokeAccountSessionInput {
  """Session ID that should be revoked"""
  accountSessionId: ID!
}

"""Payload of the revoked account session"""
type RevokeAccountSessionPayload {
  """The ID of the session that was revoked"""
  accountSessionId: ID!
}

"""Payload for revoking the authentication token"""
type RevokeAuthenticationTokenPayload {
  """The authentication token that was removed"""
  revokedAuthenticationTokenId: ID!
}

scalar Time

"""Toggle whether or not the moderator will be part of the queue"""
type ToggleModeratorSettingsInQueuePayload {
  """The new status of the moderator in queue"""
  moderatorSettingsInQueue: Boolean
}

"""Input for unlocking an account"""
input UnlockAccountInput {
  accountID: ID!
}

"""Payload for the unlocked account"""
type UnlockAccountPayload {
  """Account that was unlocked"""
  account: Account
}

"""Input for updating the account status to primary"""
input UpdateAccountEmailStatusToPrimaryInput {
  """The email that should be updated"""
  accountEmailId: ID!
}

"""Payload of the updated account email"""
type UpdateAccountEmailStatusToPrimaryPayload {
  """The account email that was updated"""
  accountEmail: AccountEmail
}

"""Input for updating an account's username"""
input UpdateAccountUsernameAndRetainPreviousInput {
  """The username that the account should be updated to"""
  username: String!
}

"""Payload of the updated username"""
type UpdateAccountUsernameAndRetainPreviousPayload {
  """The account username that was added"""
  accountUsername: AccountUsername
}

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

"""Input for verifying and attempting access grant to an account"""
input VerifyAuthenticationTokenAndAttemptAccountAccessGrantInput {
  authenticationTokenId: String!
}

"""Payload for verifying the authentication token"""
type VerifyAuthenticationTokenAndAttemptAccountAccessGrantPayload {
  """The account that granted access to"""
  account: Account

  """The authentication token"""
  authenticationToken: AuthenticationToken
}
