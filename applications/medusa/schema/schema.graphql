type Artist {
  id: String!
  avatar: String!
  username: String!
}

type AuditUser {
  id: String!
  username: String!
}

type Authentication {
  cookie: Cookie
  user: User
}

input AuthenticationInput {
  email: String!
}

type Category {
  id: String!
  thumbnail: String!
  title: String!
}

type Character {
  id: String!
  thumbnail: String!
  name: String!
  media: Media!
}

input CharacterRequest {
  name: String!
  media: String!
}

type CharacterRequestType {
  name: String!
  media: String!
}

input ConnectionInput {
  after: String
  before: String
  first: Int
  last: Int
}

type Contributor {
  id: String!
  username: String!
  avatar: String!
}

type Cookie {
  sameSession: Boolean!
  registered: Boolean!
  redeemed: Boolean!
  session: String!
  email: String!
  invalid: Boolean!
}

type Media {
  id: String!
  thumbnail: String!
  title: String!
}

type ModeratePost {
  auditLog: PendingPostAuditLog
  validation: Validation
}

input ModeratePostInput {
  pendingPostId: String!
  rejectionReasonId: String
  notes: String!
}

type Mutation {
  authenticate(data: AuthenticationInput): Boolean!
  register(data: RegisterInput): Boolean!
  logout: Boolean!
  authEmail: Boolean!
  post(data: PostInput): PostResponse!
  updatePost(id: String!, data: PostInput): PostUpdateResponse!
  moderatePost(data: ModeratePostInput!): ModeratePost!
  revertPendingPostAuditLog(data: RevertPostInput!): ModeratePost!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PendingPost {
  id: String!
  state: String!
  moderator: String!
  contributor: Contributor!
  content: [String!]!
  categories: [Category!]!
  characters: [Character!]!
  mediaRequests: [String!]
  characterRequests: [CharacterRequestType!]
  artistId: String
  artistUsername: String!
}

type PendingPostAuditLog {
  id: String!
  postId: String!
  contributor: AuditUser!
  moderator: AuditUser!
  infractionId: String
  status: String!
  reason: String!
  notes: String!
  reverted: Boolean!
  canRevert: Boolean!
}

type PendingPostAuditLogConnection {
  edges: [PendingPostAuditLogEdge!]!
}

type PendingPostAuditLogEdge {
  node: PendingPostAuditLog!
}

input PendingPostAuditLogFilters {
  moderatorId: String
  contributorId: String
  postId: String
  dateRange: [Int!]
}

input PendingPostAuditLogInput {
  moderatorId: String!
}

type PendingPostConnection {
  edges: [PendingPostEdge!]!
  pageInfo: PageInfo!
}

type PendingPostEdge {
  cursor: String!
  node: PendingPost!
}

input PendingPostFilters {
  moderatorId: String
  contributorId: String
  artistId: String
  id: String
}

type PendingPostRejectionReason {
  id: String!
  reason: String!
  infraction: Boolean!
}

input PostInput {
  content: [String!]!
  categories: [String!]!
  characters: [String!]!
  mediaRequests: [String!]
  characterRequests: [CharacterRequest!]
  artistId: String
  artistUsername: String!
}

type PostResponse {
  id: String!
  review: Boolean!
  validation: Validation
}

type PostUpdateResponse {
  validation: Validation
}

type Query {
  redeemCookie(cookie: String!): Cookie!
  authentication: Authentication
  pendingPosts(input: ConnectionInput!, filter: PendingPostFilters!): PendingPostConnection!
  pendingPost(id: String!): PendingPost!
  characters(data: SearchInput!): [Character!]!
  categories(data: SearchInput!): [Category!]!
  artists(data: SearchInput!): [Artist!]!
  media(data: SearchInput!): [Media!]!
  pendingPostAuditLogs(filter: PendingPostAuditLogFilters!): PendingPostAuditLogConnection!
  rejectionReasons: [PendingPostRejectionReason!]!
}

input RegisterInput {
  username: String!
}

input RevertPostInput {
  auditLogId: String!
}

input SearchInput {
  search: String!
}

type User {
  id: String!
  username: String!
  pendingPosts: [PendingPost!]
  infractionHistory: [UsersInfractionHistory!]
}

type UsersInfractionHistory {
  id: String!
  reason: String!
}

type Validation {
  code: String!
}
