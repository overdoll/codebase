load("@io_bazel_rules_docker//container:container.bzl", "container_push")
load("@npm//@bazel/typescript:index.bzl", "ts_library")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")

package(default_visibility = ["//visibility:public"])

_DEPS = [
    "@npm//@apollo/gateway",
    "@npm//apollo-server",
    "@npm//apollo-server-express",
    "@npm//express",
    "@npm//graphql",
    "@npm//body-parser",
]

_DATA = [
    "schema/schema.graphql",
]

_SRCS = [
    "apollo-gateway.ts",
]

ts_library(
    name = "internal_lib",
    srcs = _SRCS,
    data = _DATA,
    module_name = "orca",
    deps = _DEPS,
)

nodejs_binary(
    name = "internal",
    data = [
        ":internal_lib",
    ],
    entry_point = ":apollo-server.ts",
)

nodejs_image(
    name = "local-image",
    binary = ":internal",
    data = [".env"],
    include_node_repo_args = False,
    node_repository_name = "nodejs_linux_amd64",
)

nodejs_image(
    name = "image",
    binary = ":internal",
    include_node_repo_args = False,
    node_repository_name = "nodejs_linux_amd64",
)

container_push(
    name = "publish-testing",
    format = "Docker",
    image = ":image",
    registry = "$(CONTAINER_REGISTRY)",
    repository = "sting/dev",
    tag = "$(CONTAINER_TAG)",
)

container_push(
    name = "publish",
    format = "Docker",
    image = ":image",
    registry = "$(CONTAINER_REGISTRY)",
    repository = "sting",
    skip_unchanged_digest = True,
    tag = "$(CONTAINER_TAG)",
)
