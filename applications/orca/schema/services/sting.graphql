type Audience implements Node @key(fields: "id") {
  """An ID pointing to this audience."""
  id: ID!

  """An ID that can be used to uniquely-identify this audience. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching."""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A title for this audience.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  title(locale: BCP47): String! @goField(forceResolver: true)

  """If this audience is standard or not."""
  standard: Boolean!

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!
}

type AudienceEdge {
  cursor: String!
  node: Audience!
}

type AudienceConnection {
  edges: [AudienceEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which audience connections can be sorted."""
enum AudiencesSort {
  """Audience by newest first"""
  NEW

  """Audience by top likes"""
  TOP

  """Audience by most posts"""
  POPULAR
}

extend type Query {
  """Search all audiences."""
  audiences(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    slugs: [String!]

    """Search by title of the audience."""
    title: String

    """Sorting options for audiences."""
    sortBy: AudiencesSort! = POPULAR
  ): AudienceConnection!

  """Get a single audience."""
  audience(
    """Search by slug of the audience."""
    slug: String!
  ): Audience
}

extend type Post {
  """Represents the audience that this post belongs to"""
  audience: Audience @goField(forceResolver: true)
}

"""Create a new audience."""
input CreateAudienceInput {
  """
  The chosen slug for the audience.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen title for the audience.

  Validation: Max 25 characters.
  """
  title: String!

  """If the audience is standard or not."""
  standard: Boolean!
}

"""Payload for a new audience"""
type CreateAudiencePayload {
  """The audience after creation"""
  audience: Audience

  """Validation for creating a new audience"""
  validation: CreateAudienceValidation
}

"""Validation for creating a new audience"""
enum CreateAudienceValidation {
  SLUG_TAKEN
}

"""Update audience."""
input UpdateAudienceTitleInput {
  """The audience to update"""
  id: ID!

  """
  The title to update.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update audience."""
input UpdateAudienceBannerInput {
  """The audience to update"""
  id: ID!

  """The banner"""
  banner: String!
}

"""Update audience."""
input UpdateAudienceIsStandardInput {
  """The audience to update"""
  id: ID!

  """Standard"""
  standard: Boolean!
}

"""Payload for updating audience"""
type UpdateAudienceTitlePayload {
  """The audience after update"""
  audience: Audience
}

"""Payload for updating audience"""
type UpdateAudienceBannerPayload {
  """The audience after update"""
  audience: Audience
}

"""Payload for updating audience"""
type UpdateAudienceIsStandardPayload {
  """The audience after update"""
  audience: Audience
}

extend type Mutation {
  """
  Create a new audience
  """
  createAudience(input: CreateAudienceInput!): CreateAudiencePayload

  """
  Update audience title
  """
  updateAudienceTitle(input: UpdateAudienceTitleInput!): UpdateAudienceTitlePayload

  """
  Update audience banner
  """
  updateAudienceBanner(input: UpdateAudienceBannerInput!): UpdateAudienceBannerPayload

  """
  Update audience standard
  """
  updateAudienceIsStandard(input: UpdateAudienceIsStandardInput!): UpdateAudienceIsStandardPayload
}

type Category implements Node @key(fields: "id") {
  """An ID pointing to this category."""
  id: ID!

  """An ID that can be used to uniquely-identify this category. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A title for this category.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  title(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Alternative titles for this category."""
  alternativeTitles: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """The topic linked this category. If no topic is linked, field is null."""
  topic: Topic @goField(forceResolver: true)
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which categories connections can be sorted."""
enum CategoriesSort {
  """Categories by newest first"""
  NEW

  """Categories by top likes"""
  TOP

  """Categories by most posts"""
  POPULAR
}

type Query {
  """Search all categories."""
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    slugs: [String!]

    """Filter by the title of the category."""
    title: String

    """Exclude empty categories (categories that have 0 posts)."""
    excludeEmpty: Boolean! = false

    """Sorting options for categories."""
    sortBy: CategoriesSort! = POPULAR
  ): CategoryConnection!

  """Get a single category."""
  category(
    """Search by slug of the category."""
    slug: String!
  ): Category
}

extend type Post {
  """Categories that belong to this post"""
  categories: [Category!]! @goField(forceResolver: true)
}

"""Create a new category."""
input CreateCategoryInput {
  """
  The chosen slug for the category.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen title for the category.

  Validation: Max 25 characters.
  """
  title: String!

  """
  Optionally assign a topic to this category.
  """
  topicId: ID
}

"""Payload for a new category"""
type CreateCategoryPayload {
  """The category after creation"""
  category: Category

  """Validation for creating a new category"""
  validation: CreateCategoryValidation
}

"""Validation for creating a new category"""
enum CreateCategoryValidation {
  SLUG_TAKEN
}

"""Update category."""
input UpdateCategoryTitleInput {
  """The category to update"""
  id: ID!

  """
  The title to update.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update category."""
input AddCategoryAlternativeTitleInput {
  """The category to update"""
  id: ID!

  """
  The title to add.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update category."""
input RemoveCategoryAlternativeTitleInput {
  """The category to update"""
  id: ID!

  """
  The title to remove.
  """
  title: String!
}

"""Update category topic."""
input UpdateCategoryTopicInput {
  """The category to update"""
  id: ID!

  """
  The topic to assign to this category.
  """
  topicId: ID!
}

"""Payload for updating category"""
type UpdateCategoryTopicPayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type AddCategoryAlternativeTitlePayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type RemoveCategoryAlternativeTitlePayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type UpdateCategoryTitlePayload {
  """The category after update"""
  category: Category
}

type Mutation {
  """
  Create a new category
  """
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload

  """
  Update category title
  """
  updateCategoryTitle(input: UpdateCategoryTitleInput!): UpdateCategoryTitlePayload

  """
  Update the category topic
  """
  updateCategoryTopic(input: UpdateCategoryTopicInput!): UpdateCategoryTopicPayload

  """
  Add an alternative title to the category.
  """
  addCategoryAlternativeTitle(input: AddCategoryAlternativeTitleInput!): AddCategoryAlternativeTitlePayload

  """
  Remove an alternative title from the category.
  """
  removeCategoryAlternativeTitle(input: RemoveCategoryAlternativeTitleInput!): RemoveCategoryAlternativeTitlePayload
}

type CharacterRequest {
  """An ID pointing to this character request."""
  id: ID!

  """
  A name of this character request.
  """
  name: String!
}

type Character implements Node @key(fields: "id") {
  """An ID pointing to this character."""
  id: ID!

  """An ID that can be used to uniquely-identify this character. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A name for this character.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  name(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this name."""
  nameTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """The series linked to this character, if it's a series character."""
  series: Series

  """The club linked to this character, if it was created by a club."""
  club: Club @goField(forceResolver: true)
}

type CharacterEdge {
  cursor: String!
  node: Character!
}

type CharacterConnection {
  edges: [CharacterEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which character connections can be sorted."""
enum CharactersSort {
  """Characters by newest first"""
  NEW

  """Characters by top likes"""
  TOP

  """Characters by most posts"""
  POPULAR
}

extend type Series {
  """Get or search all characters for this series."""
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by character slugs."""
    slugs: [String!]

    """Filter by the name of the character."""
    name: String

    """Sorting options for characters."""
    sortBy: CharactersSort! = POPULAR
  ): CharacterConnection! @goField(forceResolver: true)
}

extend type Club {
  """Get or search all characters for this club."""
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by character slugs."""
    slugs: [String!]

    """Filter by the name of the character."""
    name: String

    """Sorting options for characters."""
    sortBy: CharactersSort! = POPULAR
  ): CharacterConnection! @goField(forceResolver: true)
}

extend type Query {
  """Get or search all characters"""
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Whether or not to show characters that were created by a club.

    By default, shows all characters.

    Otherwise, if true, shows all characters that were created by a club. If false, shows only series characters.
    """
    clubCharacters: Boolean

    """Search by character slugs."""
    slugs: [String!]

    """
    When searching for a character by slug, you need to include the series' slug since slugs are unique-per-series.

    Only one slug is allowed for now since you don't want inaccurate results.
    """
    seriesSlug: String

    """
    When searching for a character by slug, you need to include the club' slug since slugs are unique-per-series.

    Only one slug is allowed for now since you don't want inaccurate results.
    """
    clubSlug: String

    """Filter by the name of the character."""
    name: String

    """Exclude empty characters (characters that have 0 posts)."""
    excludeEmpty: Boolean! = false

    """Sorting options for characters."""
    sortBy: CharactersSort! = POPULAR
  ): CharacterConnection!

  """Get a single character."""
  character(
    """Search by slug of the character."""
    slug: String!

    """A series slug is required since character slugs are unique-per-series. Must enter either a series slug, or a club slug."""
    seriesSlug: String

    """A club slug is required since character slugs are unique-per-series. Must enter either a series slug, or a club slug."""
    clubSlug: String
  ): Character
}

extend type Post {
  """Characters that belong to this post"""
  characters: [Character!]! @goField(forceResolver: true)

  """Character requests that belong to this post"""
  characterRequests: [CharacterRequest!]!
}

"""Create a new character."""
input CreateCharacterInput {
  """The chosen series for the character."""
  seriesId: ID

  """The chosen club for the character."""
  clubId: ID

  """
  The chosen slug for the character.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen name for the character.

  Validation: Max 25 characters.
  """
  name: String!
}

"""Payload for a new character"""
type CreateCharacterPayload {
  """The character after creation"""
  character: Character

  """Validation for creating a new character"""
  validation: CreateCharacterValidation
}

"""Validation for creating a new character"""
enum CreateCharacterValidation {
  SLUG_TAKEN
}

"""Update character."""
input UpdateCharacterNameInput {
  """The character to update"""
  id: ID!

  """
  The name to update.

  Validation: Max 25 characters.
  """
  name: String!

  """
  The localization for this name.

  Validation: Must be one of the languages from the languages query.
  """
  locale: BCP47!
}

"""Payload for updating character"""
type UpdateCharacterNamePayload {
  """The character after update"""
  character: Character
}

extend type Mutation {
  """
  Create a new character.

  Must either enter a seriesId for a series character or a clubId for a club character.

  If entering a SeriesId, the authorization is Staff+ only.
  If entering a ClubId, you must be the owner of the club.
  """
  createCharacter(input: CreateCharacterInput!): CreateCharacterPayload

  """
  Update character title
  """
  updateCharacterName(input: UpdateCharacterNameInput!): UpdateCharacterNamePayload
}

enum ClubPostsView {
  GALLERY
  CARD
}

type ClubLink {
  """A link."""
  url: URI!
}

type Club implements Node @key(fields: "id") {
  """An ID pointing to this club."""
  id: ID!

  """An internal reference, uniquely identifying the club."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """How the posts are displayed for this club."""
  postsView: ClubPostsView! @goField(forceResolver: true)

  """
  Maximum amount of slug aliases that can be created for this club.
  """
  slugAliasesLimit: Int!

  """
  The total number of posts for this club.
  """
  totalPosts: Int!

  """
  The total number of likes for this club.
  """
  totalLikes: Int!

  """An alias list of slugs. These are valid, as in, you can find the club using the slug. However, it should always be replaced by the default slug."""
  slugAliases: [ClubSlugAlias!]!

  """A list of links for this club."""
  links: [ClubLink!]!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's thumbnail."""
  thumbnailMedia: Media

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """A name for this club."""
  name: String!

  """The account that owns this club."""
  owner: Account!

  """
  Whether or not this club is terminated.
  """
  termination: ClubTermination

  """
  Whether or not this club is suspended.
  """
  suspension: ClubSuspension

  """
  Tags used by this club.
  """
  tags(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TagConnection! @goField(forceResolver: true)

  """
  Club Suspension Logs.

  Can see who a club was suspended by, the reason and who unsuspended a particular club.
  """
  suspensionLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ClubSuspensionLogConnection! @goField(forceResolver: true)

  """
  Whether or not the viewer is the owner of the club.
  """
  viewerIsOwner: Boolean!

  """
  Whether creating supporter-only posts is enabled or disabled for this club.

  When this is true, a club owner cannot mark individual content in a post as "supporter-only".

  Additionally, if a club owner attempts to submit a post with supporter-only content already present, they will not be able to.
  """
  canCreateSupporterOnlyPosts: Boolean!

  """
  Whether or not you can become a supporter of this club.
  """
  canSupport: Boolean!

  """
  When the owner of the club needs to post the next supporter post.

  Usually 30 days after the next post.

  Nil if no supporter-only posts have been created.
  """
  nextSupporterPostTime: Time

  """Whether or not the viewer is a member of this club."""
  viewerMember: ClubMember @goField(forceResolver: true)

  """The total amount of members in this club, who are supporters."""
  membersIsSupporterCount: Int! @goField(forceResolver: true)

  """The total amount of members in this club."""
  membersCount: Int!

  """Club members."""
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by whether or not this is a supporter."""
    supporter: Boolean! = false

    """sorting options for club members."""
    sortBy: ClubMembersSort! = NEWEST
  ): ClubMemberConnection! @goField(forceResolver: true)

  """Whether or not characters are enabled for this club."""
  charactersEnabled: Boolean!

  """The amount of characters that this club can create."""
  charactersLimit: Int!

  """The total amount of characters that this club has created."""
  charactersCount: Int! @goField(forceResolver: true)
}

type ClubSuspension {
  """When the suspension expires. Can call UnSuspendClub when time = now."""
  expires: Time!
}

type ClubTermination {
  """The account that terminated the club."""
  account: Account!
}

"""The club slug alias"""
type ClubSlugAlias {
  """The slug alias"""
  slug: String!
}

type ClubEdge {
  cursor: String!
  node: Club!
}

type ClubConnection {
  edges: [ClubEdge!]!
  pageInfo: PageInfo!
}

type ClubMemberEdge {
  cursor: String!
  node: ClubMember!
}

type ClubMemberConnection {
  edges: [ClubMemberEdge!]!
  pageInfo: PageInfo!
}

"""Reasons a club suspension was created."""
enum ClubSuspensionReason {
  """Suspension was issued from a post moderation queue."""
  POST_MODERATION_QUEUE

  """Suspension was issued from a post removal."""
  POST_REMOVAL

  """Suspension was issued manually."""
  MANUAL
}

type ClubIssuedSuspensionLog {
  """
  The ID linked to this suspension log.
  """
  id: ID!

  """
  The account that created this suspension.

  If nil, the suspension was created automatically
  """
  account: Account

  """
  The reason this suspension was issued.
  """
  reason: ClubSuspensionReason!

  """
  How long the club was suspended until.
  """
  suspendedUntil: Time!
}

type ClubRemovedSuspensionLog {
  """
  The ID linked to this suspension log.
  """
  id: ID!

  """
  The account that removed this suspension.
  """
  account: Account!
}

union ClubSuspensionLog = ClubIssuedSuspensionLog | ClubRemovedSuspensionLog

type ClubSuspensionLogEdge {
  cursor: String!
  node: ClubSuspensionLog!
}

type ClubSuspensionLogConnection {
  edges: [ClubSuspensionLogEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which club member connections can be sorted."""
enum ClubMembersSort {
  """By oldest members"""
  NEWEST
}

type ClubMember implements Node @key(fields: "id") {
  """An ID pointing to this club member."""
  id: ID!

  """When the membership was created (when the account originally joined)."""
  joinedAt: Time!

  """The club that this membership belongs to."""
  club: Club! @goField(forceResolver: true)

  """The account that belongs to this membership."""
  account: Account!

  """Whether or not this member is a supporter."""
  isSupporter: Boolean!

  """If is a supporter, when they became a supporter."""
  supporterSince: Time
}

"""Add alias slug."""
input AddClubSlugAliasInput {
  """The club to update"""
  id: ID!

  """
  The chosen slug for the club.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!
}

"""Remove alias slug."""
input RemoveClubSlugAliasInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Create club."""
input CreateClubInput {
  """
  The chosen slug for the club.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen name for the club.

  Validation: Max 25 characters.
  """
  name: String!
}

"""Join a club input."""
input JoinClubInput {
  """The chosen club ID."""
  clubId: ID!
}

"""Leave a club."""
input LeaveClubInput {
  """The chosen club ID."""
  clubId: ID!
}

"""Update club name."""
input UpdateClubNameInput {
  """The club to update"""
  id: ID!

  """
  The chosen name for the club.

  Validation: Max 25 characters.
  """
  name: String!
}

"""Update club thumbnail."""
input UpdateClubThumbnailInput {
  """The club to update"""
  id: ID!

  """The thumbnail for the club."""
  thumbnail: String!
}

"""Update alias slug to default."""
input PromoteClubSlugAliasToDefaultInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Validation for creating a new club"""
enum CreateClubValidation {
  SLUG_TAKEN
}

"""Payload for a new club"""
type CreateClubPayload {
  """The club after creation"""
  club: Club

  """Validation for creating a new club"""
  validation: CreateClubValidation
}

"""Payload for a new club member"""
type JoinClubPayload {
  """The membership after creation"""
  clubMember: ClubMember
}

"""Payload for leaving a club"""
type LeaveClubPayload {
  """The club membership that was removed"""
  clubMemberId: ID!
}

"""Validation for adding a new slug to a club"""
enum AddClubSlugAliasValidation {
  SLUG_TAKEN
}

"""Payload for a new alt slug"""
type AddClubSlugAliasPayload {
  """The club after update"""
  club: Club

  """Validation for adding a new club"""
  validation: AddClubSlugAliasValidation
}

"""Payload for a new alt slug"""
type RemoveClubSlugAliasPayload {
  """The club after update"""
  club: Club
}

"""Payload for a new alt slug"""
type PromoteClubSlugAliasToDefaultPayload {
  """The club after update"""
  club: Club
}

"""Payload for updating the name"""
type UpdateClubNamePayload {
  """The club after update"""
  club: Club
}

"""Payload for updating the thumbnail"""
type UpdateClubThumbnailPayload {
  """The club after update"""
  club: Club
}

"""Properties by which club connections can be sorted."""
enum ClubsSort {
  """Clubs by popularity"""
  POPULAR
}

"""Un-Suspend the club."""
input UnSuspendClubInput {
  """The club to un-suspend."""
  clubId: ID!
}

"""Suspend the club."""
input SuspendClubInput {
  """The club to suspend."""
  clubId: ID!

  """When the suspension should end."""
  endTime: Time!
}

"""Terminate the club."""
input TerminateClubInput {
  """The club to terminate."""
  clubId: ID!
}

"""Un-Terminate the club."""
input UnTerminateClubInput {
  """The club to un-terminate."""
  clubId: ID!
}

"""Enable club supporter-only posts."""
input EnableClubSupporterOnlyPostsInput {
  """The club to enable supporter-only posts for."""
  clubId: ID!
}

"""Enable club characters."""
input EnableClubCharactersInput {
  """The club to enable club characters for."""
  clubId: ID!

  """
  The amount of characters the club will be able to create.

  Validation: Limit to 200.
  """
  charactersLimit: Int!
}

"""Disable club characters."""
input DisableClubCharactersInput {
  """The club to disable characters for."""
  clubId: ID!
}

"""Update club characters limit."""
input UpdateClubCharactersLimitInput {
  """The club to update club characters limit for."""
  clubId: ID!

  """
  The amount of characters the club will be able to create.

  Validation: Limit to 200.
  """
  charactersLimit: Int!
}

"""Disable club supporter-only posts."""
input DisableClubSupporterOnlyPostsInput {
  """The club to disable supporter-only posts for."""
  clubId: ID!
}

"""Transfer club ownership input."""
input TransferClubOwnershipInput {
  """The club to transfer ownership for."""
  clubId: ID!

  """The new account that should be the owner of the club."""
  accountId: ID!
}

"""Disable club supporter-only posts payload."""
type DisableClubSupporterOnlyPostsPayload {
  """The new club after supporter-only posts are disabled."""
  club: Club
}

"""Enable club supporter-only posts payload."""
type EnableClubSupporterOnlyPostsPayload {
  """The new club after supporter-only posts are enabled."""
  club: Club
}

"""Enable club characters payload."""
type EnableClubCharactersPayload {
  """The new club after enabling club characters."""
  club: Club
}

"""Disable club characters payload."""
type DisableClubCharactersPayload {
  """The new club after disabling club characters."""
  club: Club
}

"""Update club characters limit payload."""
type UpdateClubCharactersLimitPayload {
  """The club after updating the characters limit."""
  club: Club
}

"""Un terminate club payload."""
type UnTerminateClubPayload {
  """The new club after it's not terminated anymore."""
  club: Club
}

"""Un suspend club payload."""
type UnSuspendClubPayload {
  """The new club after it's not suspended anymore."""
  club: Club
}

"""Suspend club payload."""
type SuspendClubPayload {
  """The new club after it's suspended."""
  club: Club
}

"""Terminate club payload."""
type TerminateClubPayload {
  """The new club after it's terminated."""
  club: Club
}

"""Transfer club ownership."""
type TransferClubOwnershipPayload {
  """The new club after ownership has been transferred."""
  club: Club
}

extend type Mutation {
  """
  Join the club, becoming a member.
  """
  joinClub(input: JoinClubInput!): JoinClubPayload

  """
  Leave the club.

  If you are the owner of the club, you cannot leave the club.
  """
  leaveClub(input: LeaveClubInput!): LeaveClubPayload

  """
  Create a new club
  """
  createClub(input: CreateClubInput!): CreateClubPayload

  """
  Add an alternative slug to the club
  """
  addClubSlugAlias(input: AddClubSlugAliasInput!): AddClubSlugAliasPayload

  """
  Remove an alternative slug from the club
  """
  removeClubSlugAlias(input: RemoveClubSlugAliasInput!): RemoveClubSlugAliasPayload

  """
  Make the alias slug the default, swapping out the old slug into the alias list.
  """
  promoteClubSlugAliasToDefault(input: PromoteClubSlugAliasToDefaultInput!): PromoteClubSlugAliasToDefaultPayload

  """
  Update the club's name (english-only for now).
  """
  updateClubName(input: UpdateClubNameInput!): UpdateClubNamePayload

  """
  Update the club thumbnail
  """
  updateClubThumbnail(input: UpdateClubThumbnailInput!): UpdateClubThumbnailPayload

  """
  Suspend the club.

  Staff+ only.
  """
  suspendClub(input: SuspendClubInput!): SuspendClubPayload

  """
  Un-Suspend the club. Suspension must be expired.

  Staff+ may un-suspend even if suspension hasn't expired yet.
  """
  unSuspendClub(input: UnSuspendClubInput!): UnSuspendClubPayload

  """
  Terminate the club.

  Terminating a club will remove it from public visibility. Subscriptions will not be cancelled.

  Staff+ only.
  """
  terminateClub(input: TerminateClubInput!): TerminateClubPayload

  """
  Un-Terminate the club.

  Un-terminating will allow the club to be viewed publicly again, but all subscriptions will remain cancelled.

  Staff+ only.
  """
  unTerminateClub(input: UnTerminateClubInput!): UnTerminateClubPayload

  """
  Enable club supporter-only posts, if previously disabled.

  Staff+ only.
  """
  enableClubSupporterOnlyPosts(input: EnableClubSupporterOnlyPostsInput!): EnableClubSupporterOnlyPostsPayload

  """
  Disable club supporter-only posts.

  When this mutation is ran, the club will no longer be able to create supporter-only posts, and their supporter timer will reset, as well as removing the ability to collect subscriptions.

  In order to be able to collect subscriptions again, the enableClubSupporterOnlyPosts mutation should be ran, and the club owner should create a post with supporter-only content.

  Staff+ only.
  """
  disableClubSupporterOnlyPosts(input: DisableClubSupporterOnlyPostsInput!): DisableClubSupporterOnlyPostsPayload

  """
  Disable club characters.

  Will disable character creation for the club.

  Staff+ only.
  """
  disableClubCharacters(input: DisableClubCharactersInput!): DisableClubCharactersPayload

  """
  Enable club characters.

  Will enable club characters. Requires a limit to be set as well.

  Staff+ only.
  """
  enableClubCharacters(input: EnableClubCharactersInput!): EnableClubCharactersPayload

  """
  Set the amount of characters that a club can create.

  Staff+ only.
  """
  updateClubCharactersLimit(input: UpdateClubCharactersLimitInput!): UpdateClubCharactersLimitPayload

  """
  Transfer club ownership from one account to another.

  Staff+ only.
  """
  transferClubOwnership(input: TransferClubOwnershipInput!): TransferClubOwnershipPayload
}

extend type Query {
  """Club discovery endpoint."""
  discoverClubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ClubConnection!

  """Search multiple clubs."""
  clubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by club slugs."""
    slugs: [String!]

    """Filter by the name of the club."""
    name: String

    """
    Filter by all the clubs that are suspended.

    By default, will show all clubs that are suspended and terminated.

    False to show all clubs that are not suspended and True to show only clubs that are suspended.
    """
    suspended: Boolean

    """
    Filter by whether or not you can support the clubs.

    Useful for getting a list of all clubs that can be supported.
    """
    canSupport: Boolean

    """
    Filter by all the clubs that are terminated.

    By default, will show all terminated clubs.

    False to show all clubs that are not terminated and True to show only clubs that are terminated.
    """
    terminated: Boolean

    """Exclude empty clubs (clubs that have 0 posts)."""
    excludeEmpty: Boolean! = false

    """Sorting options for clubs."""
    sortBy: ClubsSort! = POPULAR
  ): ClubConnection!

  """Get a single club."""
  club(
    """Search by slug of the club."""
    slug: String!
  ): Club
}

extend type Account {

  """
  Whether or not this account has at least 1 club supporter subscription.
  """
  hasClubSupporterSubscription: Boolean! @goField(forceResolver: true)

  """
  Maximum amount of clubs that you can create.
  """
  clubsLimit: Int! @goField(forceResolver: true)

  """
  Current count of the amount of clubs that the account has created.
  """
  clubsCount: Int! @goField(forceResolver: true)

  """
  Whether or not this club has non-terminated clubs.

  Cannot delete account if this is true.
  """
  hasNonTerminatedClubs: Boolean! @goField(forceResolver: true)

  """Represents the clubs that the account has created."""
  clubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by club slugs."""
    slugs: [String!]

    """Filter by the name of the club."""
    name: String

    """Sorting options for clubs."""
    sortBy: ClubsSort! = POPULAR
  ): ClubConnection! @goField(forceResolver: true)

  """
  Maximum amount of clubs that you can join as an account.
  """
  clubMembershipsLimit: Int! @goField(forceResolver: true)

  """
  Current count of club memberships. Should be compared against the limit before joining a club.
  """
  clubMembershipsCount: Int! @goField(forceResolver: true)

  """Represents the club memberships that the account has."""
  clubMemberships(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by whether or not this is a supporter."""
    supporter: Boolean! = false

    """sorting options for club members."""
    sortBy: ClubMembersSort! = NEWEST
  ): ClubMemberConnection! @goField(forceResolver: true)
}

type DateOfBirthCurationProfile {
  """Whether or not the date of birth section was skipped."""
  skipped: Boolean!

  """Whether or not the date of birth section was completed."""
  completed: Boolean!

  """The date of birth set."""
  dateOfBirth: Time
}

type AudienceCurationProfile {
  """Whether or not the audience section was completed."""
  completed: Boolean!

  """Whether or not the audience section was skipped."""
  skipped: Boolean!

  """Audiences selected for this section."""
  audiences: [Audience!]! @goField(forceResolver: true)
}

type CategoryCurationProfile {
  """Whether or not the category section was completed."""
  completed: Boolean!

  """Whether or not the category section was skipped."""
  skipped: Boolean!

  """Categories selected for this section."""
  categories: [Category!]! @goField(forceResolver: true)
}

type CurationProfile {
  """An ID uniquely identifying this profile."""
  id: ID!

  """If the whole profile was completed or not."""
  completed: Boolean!

  """The date of birth profile."""
  dateOfBirth: DateOfBirthCurationProfile!

  """The audience profile."""
  audience: AudienceCurationProfile!

  """The category profile."""
  category: CategoryCurationProfile!
}

extend type Account {
  """The curation profile linked to this account."""
  curationProfile: CurationProfile! @goField(forceResolver: true)
}

"""Update curation profile audience."""
input UpdateCurationProfileAudienceInput {
  """The audiences that were selected"""
  audienceIds: [ID!]!

  """Whether or not this section was skipped"""
  skipped: Boolean!
}

"""Update curation profile category."""
input UpdateCurationProfileCategoryInput {
  """The categories that were selected"""
  categoryIds: [ID!]!

  """Whether or not this section was skipped"""
  skipped: Boolean!
}

"""Update curation profile date of birth."""
input UpdateCurationProfileDateOfBirthInput {
  """The date of birth that was selected"""
  dateOfBirth: Time

  """Whether or not this section was skipped"""
  skipped: Boolean!
}

"""Payload for updating profile audience"""
type UpdateCurationProfileAudiencePayload {
  """The updated profile."""
  curationProfile: CurationProfile
}

"""Payload for updating profile category"""
type UpdateCurationProfileCategoryPayload {
  """The updated profile."""
  curationProfile: CurationProfile
}

"""Payload for updating profile date of birth"""
type UpdateCurationProfileDateOfBirthPayload {
  """The updated profile."""
  curationProfile: CurationProfile
}

extend type Mutation {
  """
  Update the audience for the curation profile
  """
  updateCurationProfileAudience(input: UpdateCurationProfileAudienceInput!): UpdateCurationProfileAudiencePayload

  """
  Update the category for the curation profile
  """
  updateCurationProfileCategory(input: UpdateCurationProfileCategoryInput!): UpdateCurationProfileCategoryPayload

  """
  Update the date of birth for the curation profile
  """
  updateCurationProfileDateOfBirth(input: UpdateCurationProfileDateOfBirthInput!): UpdateCurationProfileDateOfBirthPayload
}


type CuratedPostsFeedData {
  """
  When the curated posts feed was generated. Null if the posts feed has not been generated.

  If the posts feed has not been generated, running the curatedPostsFeed query will generate the posts feed, and the query will only
  return once it's done generating.
  """
  generatedAt: Time

  """
  When the posts feed will be generated next. This will only update once the feed has started to generate a new one.
  """
  nextRegenerationTime: Time

  """
  When the curated posts feed is viewed, the duration in milliseconds it takes to generate a new one.
  """
  nextRegenerationTimeDuration: Int!

  """
  Whether or not the posts feed was viewed since it was generated.

  Null if it was never viewed.
  """
  viewedAt: Time
}

extend type Account {
  """
  Curated posts feed data.

  Will tell you when the posts feed is scheduled to be regenerated, and whether or not the curated posts feed was viewed.

  Can be used to show a "notification" to the user as well.
  """
  curatedPostsFeedData: CuratedPostsFeedData! @goField(forceResolver: true)

  """
  Curated posts feed.

  When this is viewed, the curated posts feed will be scheduled to regenerate in a set amount of hours.
  """
  curatedPostsFeedPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)
}

type GameSession {
  """An ID pointing to this game session."""
  id: ID!

  """An ID that can be used to uniquely-identify this game session."""
  reference: String!

  """Whether or not this game session is closed. A closed game session cannot be played anymore."""
  isClosed: Boolean!

  """Whether or not the current viewer is the player of the game. Only players can "play" the game."""
  viewerIsPlayer: Boolean!

  """The type of game this session belongs to."""
  gameType: GameType!

  """The seed used for this session."""
  seed: String!
}

"""The types of games available."""
enum GameType {
  ROULETTE
}

"""The status of the roulette game."""
type RouletteStatus {
  """The game session that this roulette belongs to."""
  gameSession: GameSession!

  """The current state of the roulette game. If no spins happened yet, this is nil. Should be used to resume the current roulette session."""
  gameState: RouletteGameState

  """How many rolls occurred. Note that this is 0 if the game session is not closed."""
  totalRolls: Int!

  """How many doubles occurred. Note that this is 0 if the game session is not closed."""
  totalDoubles: Int!

  """The total score. Note that this is 0 if the game session is not closed."""
  score: Int!
}

"""A roulette game state."""
type RouletteGameState {
  """An ID used to uniquely identify this game state."""
  id: ID!

  """The first dice that was created."""
  diceOne: Int!

  """The second dice that was created."""
  diceTwo: Int!

  """The third dice that was created."""
  diceThree: Int!

  """The post that was selected."""
  post: Post! @goField(forceResolver: true)
}

"""A union representing the status of various games."""
union GameSessionStatus = RouletteStatus

"""Create a new game session."""
input CreateGameSessionInput {
  """
  The game type to create the session for.
  """
  gameType: GameType!

  """
  Optionally pass a seed. If a seed is not passed in, one will be automatically generated.

  Validation: only alphanumeric characters, no spaces, and max 25 characters.
  """
  seed: String
}

"""Payload for a new game session"""
type CreateGameSessionPayload {
  """The game session after creation."""
  gameSession: GameSession
}

"""Spin roulette."""
input SpinRouletteInput {
  """The game session ID to use for the spin."""
  gameSessionId: ID!
}

"""Payload for spinning roulette."""
type SpinRoulettePayload {
  """The new roulette spin game state"""
  rouletteGameState: RouletteGameState
}

extend type Mutation {
  """
  Create a new game session.
  """
  createGameSession(input: CreateGameSessionInput!): CreateGameSessionPayload

  """
  Spin the roulette. Cannot spin if the game session is closed.
  """
  spinRoulette(input: SpinRouletteInput!): SpinRoulettePayload
}

extend type Query {
  """
  Get the status of a current game session using the reference of a game session.

  Returns nil if the game session does not exist.
  """
  gameSessionStatus(
    """Search game session status by reference."""
    reference: String!
  ): GameSessionStatus
}

"""Validation for a new creator lead"""
enum NewCreatorLeadValidation {
  """Creator already submitted a lead."""
  ALREADY_SUBMITTED
}

"""A new creator lead input."""
input NewCreatorLeadInput {
  """The username of the creator."""
  username: String!

  """The email of the creator."""
  email: String!

  """A link to the creator's portfolio."""
  portfolio: String!

  """Any additional details from the creator."""
  details: String!
}

"""A new creator lead input."""
type NewCreatorLeadPayload {
  """Any validation errors that may occur."""
  validation: NewCreatorLeadValidation
}

extend type Mutation {
  """
  Create a new creator lead.
  """
  newCreatorLead(input: NewCreatorLeadInput!): NewCreatorLeadPayload
}

type PostLike implements Node @key(fields: "id") {
  """An ID uniquely identifying this like."""
  id: ID!

  """The time and date at which the post was liked."""
  likedAt: Time!

  """The post this like belongs to."""
  post: Post!

  """The account this like belongs to"""
  account: Account!
}

"""Undo like on a post."""
input UndoLikePostInput {
  """The post ID that you want to unlike"""
  id: ID!
}

"""Like a post."""
input LikePostInput {
  """The post ID that you want to like"""
  id: ID!
}

"""Payload for the liked post"""
type LikePostPayload {
  """The new PostLike entry."""
  postLike: PostLike
}

"""Payload for undoing a post like"""
type UndoLikePostPayload {
  """The post like that was deleted."""
  postLikeId: ID
}

extend type Post {
  """The amount of likes on this post."""
  likes: Int!

  """The amount of times the post has been viewed on the platform."""
  views: Int!

  """Whether or not the viewer liked this post."""
  viewerLiked: PostLike @goField(forceResolver: true)
}

extend type Mutation {
  """
  Like a post
  """
  likePost(input: LikePostInput!): LikePostPayload

  """
  Undo a like on a post
  """
  undoLikePost(input: UndoLikePostInput!): UndoLikePostPayload
}

"""Represents content for a post."""
type PostContent {
  """The ID of this content."""
  id: ID!

  """The resource belonging to this content."""
  resource: Resource!

  """The media belonging to this content."""
  media: Media!

  """If "viewerCanViewSupporterOnlyContent" is false, will contain the duration of the video, if the media is a video."""
  supporterOnlyVideoMediaDuration: Int

  """If "viewerCanViewSupporterOnlyContent" is false, will say if the video has audio, if the media is a video."""
  supporterOnlyVideoMediaHasAudio: Boolean

  """
  The resource for the supporter-only content.

  If "viewerCanViewSupporterOnlyContent" is false, then this field will contain the original resource, with the URLs omitted. This allows you to use the details, such as the type (since the resource in the "resource" box will always be an image) or see the duration of the video.

  This field will be nil if "viewerCanViewSupporterOnlyContent" is true
  """
  supporterOnlyResource: Resource

  """Whether or not this content is supporter only."""
  isSupporterOnly: Boolean!

  """Whether or not the viewer is able to see this content."""
  viewerCanViewSupporterOnlyContent: Boolean!
}

type Post implements Node @key(fields: "id") {
  id: ID!

  """The reference of this post. Should always be used to reference this post."""
  reference: String!

  """The state of the post."""
  state: PostState!

  """The supporter-only status."""
  supporterOnlyStatus: SupporterOnlyStatus!

  """The contributor who contributed this post"""
  contributor: Account!

  """The club belonging to the post"""
  club: Club! @goField(forceResolver: true)

  """Content belonging to this post"""
  content: [PostContent!]!

  """
  A description for this post.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  description(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this description."""
  descriptionTranslations: [Translation!]!

  """The date and time of when this post was created"""
  createdAt: Time!

  """The date and time of when this post was posted"""
  postedAt: Time

  """Suggested posts for this post."""
  suggestedPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)
}

enum PostState {
  DRAFT
  REVIEW
  PUBLISHED
  DISCARDED
  REJECTED
  REMOVED
  ARCHIVED
  SUBMITTED
}

enum SupporterOnlyStatus {
  """None of the content requires supporting to view."""
  NONE

  """Some of the content requires supporting to view, at least 1 content piece is free."""
  PARTIAL

  """All of the content is supporter-only."""
  FULL
}

"""Create a new post. A club ID is required."""
input CreatePostInput {
  """The club ID that this post will belong to"""
  clubId: ID!
}

"""Update post audience."""
input UpdatePostAudienceInput {
  """The post to update"""
  id: ID!

  """The audience that this post belongs to"""
  audienceId: ID!
}

"""Add post content."""
input AddPostContentInput {
  """The post to update"""
  id: ID!

  """Image IDs for the content"""
  content: [String!]!
}

"""Remove post content."""
input RemovePostContentInput {
  """The post to update"""
  id: ID!

  """Content IDs for the content"""
  contentIds: [ID!]!
}

"""Update post content order."""
input UpdatePostContentOrderInput {
  """The post to update"""
  id: ID!

  """Content IDs for the content"""
  contentIds: [ID!]!
}

"""Update post content is supporter only."""
input UpdatePostContentIsSupporterOnlyInput {
  """The post to update"""
  id: ID!

  """Content IDs to update"""
  contentIds: [ID!]!

  """The change to make"""
  isSupporterOnly: Boolean!
}

"""Update post audience."""
input UpdatePostCategoriesInput {
  """The post to update"""
  id: ID!

  """Category IDs for this post"""
  categoryIds: [ID!]!
}

"""Update post characters."""
input UpdatePostCharactersInput {
  """The post to update"""
  id: ID!

  """Ids for all the characters"""
  characterIds: [ID!]!
}

"""Input for a character request."""
input CharacterRequestInput {
  """The name of the character."""
  name: String!
}

"""Update post characters."""
input UpdatePostCharacterRequestsInput {
  """The post to update"""
  id: ID!

  """All of the character requests."""
  characterRequests: [CharacterRequestInput!]!
}

"""Publish post."""
input SubmitPostInput {
  """The post to publish"""
  id: ID!
}

"""Delete post."""
input DeletePostInput {
  """The post to delete"""
  id: ID!
}

"""Archive post."""
input ArchivePostInput {
  """The post to archive"""
  id: ID!
}

"""Un-Archive post."""
input UnArchivePostInput {
  """The post to un-archive"""
  id: ID!
}

"""Payload for a created pending post"""
type CreatePostPayload {
  """The pending post after the creation"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostClubPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostAudiencePayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type AddPostContentPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type RemovePostContentPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostContentOrderPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostContentIsSupporterOnlyPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostCategoriesPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostCharactersPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostCharacterRequestsPayload {
  """The post after the update"""
  post: Post
}

"""Payload for submitting a post"""
type SubmitPostPayload {
  """The post after being submitted"""
  post: Post
}

"""Payload for deleting a post"""
type DeletePostPayload {
  """The deleted post."""
  postId: ID
}

"""Payload for archiving a post"""
type ArchivePostPayload {
  """The archived post."""
  post: Post
}

"""Payload for un-archiving a post"""
type UnArchivePostPayload {
  """The un-archived post."""
  post: Post
}

"""Update post."""
input UpdatePostDescriptionInput {
  """The post to update"""
  id: ID!

  """
  The description to update.

  Validation: Max 280 characters. No links allowed.
  """
  description: String!

  """
  The localization for this description.

  Locale must be one from the languages query, or else the locale won't be accepted.
  """
  locale: BCP47!
}

"""Payload for updating a post description"""
type UpdatePostDescriptionPayload {
  """The post after the update"""
  post: Post
}

type PostEdge {
  cursor: String!
  node: Post!
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which posts connections can be sorted."""
enum PostsSort {
  """Posts by newest first"""
  NEW

  """Posts by top likes"""
  TOP

  """Posts by algorithm sort"""
  ALGORITHM
}

union Tag = Category | Character | Series

type TagEdge {
  cursor: String!
  node: Search!
}

type TagConnection {
  edges: [TagEdge!]!
  pageInfo: PageInfo!
}

union Search = Category | Character | Series | Club

type SearchEdge {
  cursor: String!
  node: Search!
}

type SearchConnection {
  edges: [SearchEdge!]!
  pageInfo: PageInfo!
}

extend type Account {
  """Posts feed for the clubs that the account currently is a member of."""
  clubMembersPostsFeed(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)

  """Contributions specific to this account"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by club slugs. When searching by a club character, this needs to be filled out."""
    clubCharacterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)

  """All posts liked by this account, sorted by most recent."""
  likedPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)
}

extend type Mutation {
  """
  Create a new post
  """
  createPost(input: CreatePostInput!): CreatePostPayload

  """
  Update a post in draft status - audience
  """
  updatePostAudience(input: UpdatePostAudienceInput!): UpdatePostAudiencePayload

  """
  Update a post in draft status - add content
  """
  addPostContent(input: AddPostContentInput!): AddPostContentPayload

  """
  Update a post in draft status - remove content
  """
  removePostContent(input: RemovePostContentInput!): RemovePostContentPayload

  """
  Update a post in draft status - update post content order - need to send exact same IDs
  """
  updatePostContentOrder(input: UpdatePostContentOrderInput!): UpdatePostContentOrderPayload

  """
  Update a post content - whether or not it is supporter only.

  If updating to true, the club must be able to post supporter-only content through "canCreateSupporterOnlyPosts"

  Can update to false even if "canCreateSupporterOnlyPosts" is false.
  """
  updatePostContentIsSupporterOnly(input: UpdatePostContentIsSupporterOnlyInput!): UpdatePostContentIsSupporterOnlyPayload

  """
  Update a post in draft status - characters
  """
  updatePostCharacters(input: UpdatePostCharactersInput!): UpdatePostCharactersPayload

  """
  Update a post in draft status - character requests
  """
  updatePostCharacterRequests(input: UpdatePostCharacterRequestsInput!): UpdatePostCharacterRequestsPayload

  """
  Update a post in draft status - categories
  """
  updatePostCategories(input: UpdatePostCategoriesInput!): UpdatePostCategoriesPayload

  """
  Update a post in draft status - description
  """
  updatePostDescription(input: UpdatePostDescriptionInput!): UpdatePostDescriptionPayload

  """
  Submit a post.
  """
  submitPost(input: SubmitPostInput!): SubmitPostPayload

  """
  Delete a post. Can only be deleted if the post is in Draft, Archived, Removed, Discarded or Rejected state.
  """
  deletePost(input: DeletePostInput!): DeletePostPayload

  """
  Archive a post, removing it from public visibility.
  """
  archivePost(input: ArchivePostInput!): ArchivePostPayload

  """
  Un-archive a post, putting it back in public view.
  """
  unArchivePost(input: UnArchivePostInput!): UnArchivePostPayload
}

extend type Query {
  """Top tags to perform a search against, grabbing the most popular tags on the platform."""
  tags(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TagConnection!

  """Perform a search across multiple types."""
  search(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """What you want to search."""
    query: String!
  ): SearchConnection!

  """
  Post recommendations.

  Post recommendations always generate recommended posts.

  For logged-in users, recommendations will be based on the user's preferences.

  For non logged-in users, recommendations will be based off of global recommendations.
  """
  postsRecommendations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """Posts feed. The default."""
  postsFeed(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The seed to use for posts feed randomizer. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String
  ): PostConnection!

  """Look up a single post"""
  post(
    """Look up a post by a reference #"""
    reference: String!
  ): Post

  """Search multiple posts"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by club slugs. When searching by a club character, this needs to be filled out."""
    clubCharacterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!
}

extend type Category {
  """Posts belonging to this category"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by club slugs. When searching by a club character, this needs to be filled out."""
    clubCharacterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Character {
  """Posts belonging to this character"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Series {
  """Posts belonging to this series"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Club {
  """Posts belonging to this club"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by club slugs. When searching by a club character, this needs to be filled out."""
    clubCharacterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Audience {
  """Posts belonging to this audience"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by club slugs. When searching by a club character, this needs to be filled out."""
    clubCharacterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Account @key(fields: "id")  {
  id: ID! @external
}

type Series implements Node @key(fields: "id") {
  """An ID pointing to this series."""
  id: ID!

  """An ID that can be used to uniquely-identify this series. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A title for this series.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  title(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!
}

type SeriesEdge {
  cursor: String!
  node: Series!
}

type SeriesConnection {
  edges: [SeriesEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which series connections can be sorted."""
enum SeriesSort {
  """Series by newest first"""
  NEW

  """Series by top likes"""
  TOP

  """Series by most posts"""
  POPULAR
}

extend type Query {
  """Get or search all series"""
  series(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by series slugs."""
    slugs: [String!]

    """Filter by the title of the series."""
    title: String

    """Exclude empty series (series that have 0 posts)."""
    excludeEmpty: Boolean! = false

    """Sorting options for series."""
    sortBy: SeriesSort! = POPULAR
  ): SeriesConnection!

  """Get a single serial."""
  serial(
    """Search by slug of the serial."""
    slug: String!
  ): Series
}

"""Create a new series."""
input CreateSeriesInput {
  """
  The chosen slug for the series.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen title for the series.

  Validation: Max 25 characters.
  """
  title: String!
}

"""Payload for a new series"""
type CreateSeriesPayload {
  """The series after creation"""
  series: Series

  """Validation for creating a new series"""
  validation: CreateSeriesValidation
}

"""Validation for creating a new series"""
enum CreateSeriesValidation {
  SLUG_TAKEN
}

"""Update series."""
input UpdateSeriesTitleInput {
  """The series to update"""
  id: ID!

  """
  The title to update.

  Validation: Max 25 characters.
  """
  title: String!

  """
  The localization for this title.

  Locale must be one from the languages query, or else the locale won't be accepted.
  """
  locale: BCP47!
}

"""Payload for updating series"""
type UpdateSeriesTitlePayload {
  """The series after update"""
  series: Series
}

extend type Mutation {
  """
  Create a new series
  """
  createSeries(input: CreateSeriesInput!): CreateSeriesPayload

  """
  Update series title
  """
  updateSeriesTitle(input: UpdateSeriesTitleInput!): UpdateSeriesTitlePayload
}

"""Track posts observations."""
input ObservePostsInput {
  """The post ids."""
  postIds: [ID!]!
}

"""Tracking posts observations."""
type ObservePostsPayload {
  """The posts that were observed."""
  posts: [Post!]!
}

extend type Mutation {
  """
  Track posts observations - this should be tracked whenever a post is "viewed" on the site - either through the list or viewing the post individually.
  """
  observePosts(input: ObservePostsInput!): ObservePostsPayload
}

type Topic implements Node @key(fields: "id") {
  """An ID pointing to this topic."""
  id: ID!

  """An ID that can be used to uniquely-identify this category. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A title for this topic.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  title(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """
  A description for this topic.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  description(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this topic."""
  descriptionTranslations: [Translation!]!

  """The weight of this topic."""
  weight: Int!

  """All categories linked to this topic."""
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    slugs: [String!]

    """Filter by the title of the category."""
    title: String

    """Sorting options for categories."""
    sortBy: CategoriesSort! = POPULAR
  ): CategoryConnection! @goField(forceResolver: true)
}

type TopicEdge {
  cursor: String!
  node: Topic!
}

type TopicConnection {
  edges: [TopicEdge!]!
  pageInfo: PageInfo!
}

extend type Query {
  """
  Search all topics.

  Topics are sorted by the "weight" field. Higher weights are displayed at the top, in descending order.
  """
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TopicConnection!

  """Get a single topic."""
  topic(
    """Search by slug of the topic."""
    slug: String!
  ): Topic
}

"""Create a new topic."""
input CreateTopicInput {
  """
  The chosen slug for the topic.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen title for the topic.

  Validation: Max 25 characters.
  """
  title: String!

  """
  The chosen description for the topic.

  Validation: Markdown allowed.
  """
  description: String!

  """
  The assigned weight for this topic.
  """
  weight: Int!
}

"""Payload for a new topic"""
type CreateTopicPayload {
  """The topic after creation"""
  topic: Topic

  """Validation for creating a new topic"""
  validation: CreateTopicValidation
}

"""Validation for creating a new topic"""
enum CreateTopicValidation {
  SLUG_TAKEN
}

"""Update topic."""
input UpdateTopicTitleInput {
  """The topic to update"""
  id: ID!

  """
  The title to update.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update topic."""
input UpdateTopicWeightInput {
  """The topic to update"""
  id: ID!

  """
  The weight to update to.
  """
  weight: Int!
}

"""Update topic."""
input UpdateTopicDescriptionInput {
  """The topic to update"""
  id: ID!

  """
  The description to update.

  Validation: Markdown allowed.
  """
  description: String!

  """The localization for this description"""
  locale: BCP47!
}

"""Update topic."""
input UpdateTopicBannerInput {
  """The category to update"""
  id: ID!

  """The banner"""
  banner: String!
}

"""Payload for updating topic"""
type UpdateTopicTitlePayload {
  """The topic after update"""
  topic: Topic
}

"""Payload for updating topic"""
type UpdateTopicDescriptionPayload {
  """The topic after update"""
  topic: Topic
}

"""Payload for updating topic"""
type UpdateTopicWeightPayload {
  """The topic after update"""
  topic: Topic
}

"""Payload for updating topic"""
type UpdateTopicBannerPayload {
  """The topic after update"""
  topic: Topic
}

extend type Mutation {
  """
  Create a new topic
  """
  createTopic(input: CreateTopicInput!): CreateTopicPayload

  """
  Update topic title
  """
  updateTopicTitle(input: UpdateTopicTitleInput!): UpdateTopicTitlePayload

  """
  Update topic description
  """
  updateTopicDescription(input: UpdateTopicDescriptionInput!): UpdateTopicDescriptionPayload

  """
  Update topic weight
  """
  updateTopicWeight(input: UpdateTopicWeightInput!): UpdateTopicWeightPayload

  """
  Update topic banner
  """
  updateTopicBanner(input: UpdateTopicBannerInput!): UpdateTopicBannerPayload
}

scalar Time

scalar Date

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

directive @goField(forceResolver: Boolean) on INPUT_FIELD_DEFINITION
  | FIELD_DEFINITION

directive @entityResolver(multi: Boolean) on OBJECT

"""Localization formatted in BCP47."""
scalar BCP47

type Language {
  """
  BCP47 locale
  """
  locale: BCP47!

  """
  Fully qualified name
  """
  name: String!
}

type Translation {
  """The language linked to this translation."""
  language: Language!

  """The translation text."""
  text: String!
}

enum Currency {
  USD
  CAD
  AUD
  JPY
  GBP
  EUR
}

"""Identifies the type of resource"""
enum ResourceType {
  IMAGE
  VIDEO
}

"""A type representing a url to the resource and the mimetype"""
type ResourceUrl {
  url: URI!
  mimeType: String!
}

extend type ResourceProgress @key(fields: "id") {
  """An ID identifying this progress."""
  id: ID! @external
}

"""
A resource represents an image or a video format that contains an ID to uniquely identify it,
and urls to access the resources. We have many urls in order to provide a fallback for older browsers

We also identify the type of resource (image or video) to make it easy to distinguish them
"""
type Resource {
  """An ID uniquely identifying this resource."""
  id: ID!

  """The type of resource - either an image or a video."""
  type: ResourceType!

  """Whether or not the resource is processed. Can be used for additional permission checks."""
  processed: Boolean!

  """URLs to access the resource."""
  urls: [ResourceUrl!]!

  """The width."""
  width: Int!

  """The height."""
  height: Int!

  """Duration, if video."""
  videoDuration: Int!

  """Video thumbnail, if video."""
  videoThumbnail: ResourceUrl

  """Whether or not the video has audio."""
  videoNoAudio: Boolean!

  """A hex-code color of the resource that can be used in-place while the resource is loading."""
  preview: String!

  """
  This field identifies the progress for the resource.

  If the resource is not yet processed, this will not be nil.

  If we have some sort of state information available about the progress, this will not be nil.
  """
  progress: ResourceProgress

  """
  Whether or not this resource failed to process.

  A failure can happen if:
  - The supplied image is an unsupported format. This can happen if for example, someone submits a JPEG (unsupported) that was renamed to a PNG (supported)
  - The supplied image is corrupted.
  - The supplied video is invalid or corrupted.

  """
  failed: Boolean!
}

"""Type used to access a specific image."""
type ImageMediaAccess {
  """The width of the image."""
  width: Int!

  """The height of the image."""
  height: Int!

  """The URL used to access the image."""
  url: URI!
}

"""
All variants available for an image.
"""
type ImageMediaVariants {
  """100x100 crop of an image. Suitable for mini icons."""
  mini: ImageMediaAccess!
  """200x200 crop of an image. Suitable for icons."""
  icon: ImageMediaAccess!
  """300x300 crop of an image. Suitable for small previews."""
  thumbnail: ImageMediaAccess!
  """400x400 crop of an image. Suitable for small previews."""
  avatar: ImageMediaAccess!
  """720px width or height resize."""
  small: ImageMediaAccess!
  """1200px width or height resize."""
  medium: ImageMediaAccess!
  """2048px width or height resize."""
  large: ImageMediaAccess!
  """4096px width or height resize."""
  hd: ImageMediaAccess!
  """720px width or height resize."""
  banner: ImageMediaAccess!
  """360px width or height resize."""
  smallBanner: ImageMediaAccess!
}

type ColorPalette {
  percent: Float!
  red: Int!
  green: Int!
  blue: Int!
}

extend type MediaProgress @key(fields: "id") {
  """An ID identifying this progress."""
  id: ID! @external
}

"""
RawMedia represents an unprocessed media object.

While a media object is RawMedia, it is still in the process of processing.
"""
type RawMedia {
  """An ID uniquely identifying this media."""
  id: ID!

  """The name of the original file, when it was uploaded."""
  originalFileName: String!

  """Whether or not the media failed processing."""
  failed: Boolean!

  """The current progress of the media processing."""
  progress: MediaProgress
}

type ImageMedia {
  """An ID uniquely identifying this media."""
  id: ID!

  """All available variants for this media."""
  variants: ImageMediaVariants!

  """Color palettes for this image."""
  colorPalettes: [ColorPalette!]!
}

"""Data about the aspect ratio."""
type AspectRatio {
  """The width."""
  width: Int!
  """The height."""
  height: Int!
}

"""A video/mp4 video container."""
type MP4VideoContainer {
  """The URL used to access the container."""
  url: URI!

  """The bitrate of the video."""
  bitrate: Int!

  """The width of the video."""
  width: Int!

  """The height of the video."""
  height: Int!
}

enum MediaDeviceType {
  MOBILE
  DESKTOP
  UNIVERSAL
}

"""An application/x-mpegURL video container."""
type HLSVideoContainer {
  """The URL used to access the container."""
  url: URI!

  """The target device for this HLS container."""
  targetDevice: MediaDeviceType!
}

"""A container used to access the video."""
union VideoContainer = HLSVideoContainer | MP4VideoContainer

type VideoMedia {
  """An ID uniquely identifying this media."""
  id: ID!

  """The cover for this image media."""
  cover: ImageMedia!

  """The aspect ratio of the media."""
  aspectRatio: AspectRatio!

  """
  The container for videos.

  A video can have multiple containers, for example, an HLS video for general playback, and an .mp4 video as fallback.
  """
  containers: [VideoContainer!]!

  """The video duration, in milliseconds."""
  duration: Int!

  """Whether or not the video has audio."""
  hasAudio: Boolean!
}

union Media = VideoMedia | ImageMedia | RawMedia

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface Node {
  id: ID!
}