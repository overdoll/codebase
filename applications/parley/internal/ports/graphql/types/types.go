// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"overdoll/libraries/graphql/relay"
	"strconv"
	"time"
)

type Account struct {
	// Post Audit Logs linked to this account
	//
	// Viewable by either the currently logged-in account or staff+
	ModeratorPostAuditLogs *PostAuditLogConnection `json:"moderatorPostAuditLogs"`
	// Infraction history for this account
	//
	// Viewable by the currently authenticated account or staff+
	Infractions *AccountInfractionHistoryConnection `json:"infractions"`
	// Moderator settings and status for this account
	//
	// Viewable by the currently authenticated account or staff+
	Moderator *Moderator `json:"moderator"`
	ID        relay.ID   `json:"id"`
}

func (Account) IsEntity() {}

// Infraction history belonging to an account
type AccountInfractionHistory struct {
	// ID of the infraction history
	ID relay.ID `json:"id"`
	// The reason for this infraction, as a post rejection reason
	PostRejectionReason *PostRejectionReason `json:"postRejectionReason"`
}

func (AccountInfractionHistory) IsNode()   {}
func (AccountInfractionHistory) IsEntity() {}

// Connection of the infraction history
type AccountInfractionHistoryConnection struct {
	Edges    []*AccountInfractionHistoryEdge `json:"edges"`
	PageInfo *relay.PageInfo                 `json:"pageInfo"`
}

// Edge of the infraction history
type AccountInfractionHistoryEdge struct {
	Node   *AccountInfractionHistory `json:"node"`
	Cursor string                    `json:"cursor"`
}

// Approve the pending post input
type ApprovePostInput struct {
	// Pending post to take action against
	PostID relay.ID `json:"postId"`
}

// Approve the pending post payload
type ApprovePostPayload struct {
	// The audit log generated by the pending post
	PostAuditLog *PostAuditLog `json:"postAuditLog"`
}

type Moderator struct {
	// The ID of the moderator
	ID relay.ID `json:"id"`
	// The last time this moderator was selected for a post
	LastSelected time.Time `json:"lastSelected"`
}

func (Moderator) IsNode()   {}
func (Moderator) IsEntity() {}

type Post struct {
	// Audit logs belonging to this pending post
	AuditLogs *PostAuditLogConnection `json:"auditLogs"`
	// Whether or not the post was reported by the viewer.
	ViewerReport *PostReport `json:"viewerReport"`
	// Reports belonging to a post
	Reports *PostReportConnection `json:"reports"`
	ID      relay.ID              `json:"id"`
}

func (Post) IsEntity() {}

// Post audit log
//
// Audit log is created when a moderator takes an action against a pending post
type PostAuditLog struct {
	// ID of the audit log
	ID relay.ID `json:"id"`
	// The contributor that the audit log belongs to
	Contributor *Account `json:"contributor"`
	// The moderator that this log belongs to
	Moderator *Account `json:"moderator"`
	// The status or the action that was taken against the pending post
	Action PostAuditLogAction `json:"action"`
	// The reason the action was taken
	PostRejectionReason *PostRejectionReason `json:"postRejectionReason"`
	// Additional notes by the moderator
	Notes *string `json:"notes"`
	// If this audit log was reverted
	Reverted bool `json:"reverted"`
	// The time until which this audit log will be revertable
	ReversibleUntil time.Time `json:"reversibleUntil"`
	// The post linked to this audit log
	Post *Post `json:"post"`
}

func (PostAuditLog) IsNode()   {}
func (PostAuditLog) IsEntity() {}

// Connection of the audit log
type PostAuditLogConnection struct {
	Edges    []*PostAuditLogEdge `json:"edges"`
	PageInfo *relay.PageInfo     `json:"pageInfo"`
}

// Date range for audit logs
type PostAuditLogDateRange struct {
	From time.Time `json:"from"`
	To   time.Time `json:"to"`
}

// Edge of the audit log
type PostAuditLogEdge struct {
	Node   *PostAuditLog `json:"node"`
	Cursor string        `json:"cursor"`
}

// Infraction history belonging to an account
type PostRejectionReason struct {
	// ID of the rejection reason
	ID relay.ID `json:"id"`
	// The reason for this rejection
	Reason string `json:"reason"`
	// If the rejection reason will count against an infraction on the account
	Infraction bool `json:"infraction"`
}

func (PostRejectionReason) IsNode()   {}
func (PostRejectionReason) IsEntity() {}

// Connection of the pending post rejection reason
type PostRejectionReasonConnection struct {
	Edges    []*PostRejectionReasonEdge `json:"edges"`
	PageInfo *relay.PageInfo            `json:"pageInfo"`
}

// Edge of the pending post rejection reason
type PostRejectionReasonEdge struct {
	Node   *PostRejectionReason `json:"node"`
	Cursor string               `json:"cursor"`
}

// Post report
type PostReport struct {
	// ID of the report
	ID relay.ID `json:"id"`
	// The account that initiated this report
	Account *Account `json:"account"`
	// The reason for this report
	PostReportReason *PostReportReason `json:"postReportReason"`
}

func (PostReport) IsNode()   {}
func (PostReport) IsEntity() {}

// Connection of the post report
type PostReportConnection struct {
	Edges    []*PostReportEdge `json:"edges"`
	PageInfo *relay.PageInfo   `json:"pageInfo"`
}

// Date range for post reports
type PostReportDateRange struct {
	// The starting date range
	From time.Time `json:"from"`
	// The ending date range
	To time.Time `json:"to"`
}

// Edge of the post report
type PostReportEdge struct {
	Node   *PostReport `json:"node"`
	Cursor string      `json:"cursor"`
}

// Post report reason
type PostReportReason struct {
	// ID of the report reason
	ID relay.ID `json:"id"`
	// The reason for this report
	Reason string `json:"reason"`
}

func (PostReportReason) IsNode()   {}
func (PostReportReason) IsEntity() {}

// Connection of the pending post rejection reason
type PostReportReasonConnection struct {
	Edges    []*PostReportReasonEdge `json:"edges"`
	PageInfo *relay.PageInfo         `json:"pageInfo"`
}

// Edge of the pending post rejection reason
type PostReportReasonEdge struct {
	Node   *PostReportReason `json:"node"`
	Cursor string            `json:"cursor"`
}

// Moderate the pending post input
type RejectPostInput struct {
	// Pending post to take action against
	PostID relay.ID `json:"postId"`
	// Required to enter a rejection reason ID
	PostRejectionReasonID relay.ID `json:"postRejectionReasonId"`
	// Any extra notes for the moderator
	Notes *string `json:"notes"`
}

// Reject the pending post payload
type RejectPostPayload struct {
	// The audit log generated by the pending post
	PostAuditLog *PostAuditLog `json:"postAuditLog"`
}

// Moderate the pending post input
type RemovePostInput struct {
	// Pending post to take action against
	PostID relay.ID `json:"postId"`
	// Required to enter a rejection reason ID
	PostRejectionReasonID relay.ID `json:"postRejectionReasonId"`
	// Any extra notes for the staff member
	Notes *string `json:"notes"`
}

// Remove the pending post payload
type RemovePostPayload struct {
	// The audit log generated by the pending post
	PostAuditLog *PostAuditLog `json:"postAuditLog"`
}

// Report the post input
type ReportPostInput struct {
	// The post to report
	PostID relay.ID `json:"postId"`
	// The post report reason ID
	PostReportReason relay.ID `json:"postReportReason"`
}

// Report the post payload
type ReportPostPayload struct {
	// The post report that was generated
	PostReport *PostReport `json:"postReport"`
}

// Revert the pending post audit log input
type RevertPostAuditLogInput struct {
	// The audit log to revert
	PostAuditLogID relay.ID `json:"postAuditLogId"`
}

// Revert the pending post audit log payload
type RevertPostAuditLogPayload struct {
	// The new state of the audit log
	PostAuditLog *PostAuditLog `json:"postAuditLog"`
}

// Toggle whether or not the moderator will be part of the queue
type ToggleModeratorSettingsInQueuePayload struct {
	// The new status of the moderator in queue
	ModeratorSettingsInQueue *bool `json:"moderatorSettingsInQueue"`
}

type PostAuditLogAction string

const (
	PostAuditLogActionApproved PostAuditLogAction = "Approved"
	PostAuditLogActionDenied   PostAuditLogAction = "Denied"
	PostAuditLogActionRemoved  PostAuditLogAction = "Removed"
)

var AllPostAuditLogAction = []PostAuditLogAction{
	PostAuditLogActionApproved,
	PostAuditLogActionDenied,
	PostAuditLogActionRemoved,
}

func (e PostAuditLogAction) IsValid() bool {
	switch e {
	case PostAuditLogActionApproved, PostAuditLogActionDenied, PostAuditLogActionRemoved:
		return true
	}
	return false
}

func (e PostAuditLogAction) String() string {
	return string(e)
}

func (e *PostAuditLogAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostAuditLogAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostAuditLogAction", str)
	}
	return nil
}

func (e PostAuditLogAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
