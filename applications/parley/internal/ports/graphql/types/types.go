// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"overdoll/libraries/graphql/relay"
	"strconv"
	"time"
)

type Account struct {
	// Post Audit Logs linked to this account
	//
	// Viewable by either the currently logged-in account or staff+
	PostAuditLogs *PostAuditLogConnection `json:"postAuditLogs"`
	// Moderator settings and status for this account
	//
	// Viewable by the currently authenticated account or staff+
	ModeratorSettings *ModeratorSettings `json:"moderatorSettings"`
	ID                relay.ID           `json:"id"`
}

func (Account) IsEntity() {}

// Add moderator to posts queue.
type AddModeratorToPostQueueInput struct {
	// The moderator account to take the action on
	AccountID relay.ID `json:"accountId"`
}

// Remove moderator from posts queue.
type AddModeratorToPostQueuePayload struct {
	// The account that was updated
	Account *Account `json:"account"`
}

// Approve the pending post input
type ApprovePostInput struct {
	// Pending post to take action against
	PostID relay.ID `json:"postId"`
}

// Approve the pending post payload
type ApprovePostPayload struct {
	// The audit log generated by the pending post
	PostAuditLog *PostAuditLog `json:"postAuditLog"`
}

type Club struct {
	// Infraction history for this club
	//
	// Viewable by the currently authenticated account or staff+
	InfractionHistory *ClubInfractionHistoryConnection `json:"infractionHistory"`
	ID                relay.ID                         `json:"id"`
}

func (Club) IsEntity() {}

// Infraction history belonging to a club
type ClubInfractionHistory struct {
	// ID of the infraction history
	ID relay.ID `json:"id"`
	// The club belonging to this history object.
	Club *Club `json:"club"`
	// The account that issued this infraction.
	IssuerAccount *Account `json:"issuerAccount"`
	// The club infraction reason.
	InfractionReason *ClubInfractionReason `json:"infractionReason"`
	// The source for this infraction.
	Source ClubInfractionHistorySource `json:"source"`
	// When this infraction was issued.
	IssuedAt time.Time `json:"issuedAt"`
	// When this infraction expires (no longer considered when issuing future infractions).
	ExpiresAt time.Time `json:"expiresAt"`
}

func (ClubInfractionHistory) IsNode()   {}
func (ClubInfractionHistory) IsEntity() {}

// Connection of the infraction history
type ClubInfractionHistoryConnection struct {
	Edges    []*ClubInfractionHistoryEdge `json:"edges"`
	PageInfo *relay.PageInfo              `json:"pageInfo"`
}

// Edge of the infraction history
type ClubInfractionHistoryEdge struct {
	Node   *ClubInfractionHistory `json:"node"`
	Cursor string                 `json:"cursor"`
}

// Club infraction reason.
type ClubInfractionReason struct {
	// ID of the infraction reason.
	ID relay.ID `json:"id"`
	// The reason.
	Reason string `json:"reason"`
	// All translations for this reason.
	ReasonTranslations []*Translation `json:"reasonTranslations"`
	// If this reason is deprecated.
	Deprecated bool `json:"deprecated"`
}

func (ClubInfractionReason) IsNode()   {}
func (ClubInfractionReason) IsEntity() {}

// Connection of the club infraction reason
type ClubInfractionReasonConnection struct {
	Edges    []*ClubInfractionReasonEdge `json:"edges"`
	PageInfo *relay.PageInfo             `json:"pageInfo"`
}

// Edge of the club infraction reason
type ClubInfractionReasonEdge struct {
	Node   *ClubInfractionReason `json:"node"`
	Cursor string                `json:"cursor"`
}

// Create a new club infraction reason input.
type CreateClubInfractionReasonInput struct {
	// The reason text.
	Reason string `json:"reason"`
}

// Create a new club infraction reason payload.
type CreateClubInfractionReasonPayload struct {
	// The club infraction reason.
	ClubInfractionReason *ClubInfractionReason `json:"clubInfractionReason"`
}

// Create a new post rejection reason input.
type CreatePostRejectionReasonInput struct {
	// The reason text.
	Reason string `json:"reason"`
	// The club infraction reason to use. Optional.
	ClubInfractionReason *relay.ID `json:"clubInfractionReason"`
}

// Create post rejection reason.
type CreatePostRejectionReasonPayload struct {
	// The post rejection reason.
	PostRejectionReason *PostRejectionReason `json:"postRejectionReason"`
}

// Issue a club infraction.
type IssueClubInfractionInput struct {
	// The club to issue the infraction to.
	ClubID relay.ID `json:"clubId"`
	// The club infraction to use.
	InfractionReasonID relay.ID `json:"infractionReasonId"`
	// Pass a custom end time. If none is passed, will use sliding scale based on previous infractions.
	CustomEndTime *time.Time `json:"customEndTime"`
}

// Issue a new club infraction payload.
type IssueClubInfractionPayload struct {
	// The new club infraction history item.
	ClubInfractionHistory *ClubInfractionHistory `json:"clubInfractionHistory"`
}

type Language struct {
	// BCP47 locale
	Locale string `json:"locale"`
	// Fully qualified name
	Name string `json:"name"`
}

// General moderator settings.
type ModeratorSettings struct {
	// If this moderator is in queue.
	IsInModeratorQueue bool `json:"isInModeratorQueue"`
	// The last time this moderator was selected for a post. Null if moderator not in queue
	LastSelected *time.Time `json:"lastSelected"`
}

type Post struct {
	// Audit logs belonging to this pending post
	AuditLogs *PostAuditLogConnection `json:"auditLogs"`
	// Whether or not the post was reported by the viewer.
	ViewerReport *PostReport `json:"viewerReport"`
	// Reports belonging to a post
	Reports *PostReportConnection `json:"reports"`
	ID      relay.ID              `json:"id"`
}

func (Post) IsEntity() {}

// Post audit log
//
// Audit log is created when a moderator takes an action against a pending post
type PostAuditLog struct {
	// ID of the audit log
	ID relay.ID `json:"id"`
	// The moderator that this log belongs to
	Moderator *Account `json:"moderator"`
	// The status or the action that was taken against the pending post
	Action PostAuditLogAction `json:"action"`
	// The reason the action was taken
	PostRejectionReason *PostRejectionReason `json:"postRejectionReason"`
	// Additional notes by the moderator
	Notes *string `json:"notes"`
	// The post linked to this audit log
	Post *Post `json:"post"`
}

func (PostAuditLog) IsNode()   {}
func (PostAuditLog) IsEntity() {}

// Connection of the audit log
type PostAuditLogConnection struct {
	Edges    []*PostAuditLogEdge `json:"edges"`
	PageInfo *relay.PageInfo     `json:"pageInfo"`
}

// Date range for audit logs
type PostAuditLogDateRange struct {
	From time.Time `json:"from"`
	To   time.Time `json:"to"`
}

// Edge of the audit log
type PostAuditLogEdge struct {
	Node   *PostAuditLog `json:"node"`
	Cursor string        `json:"cursor"`
}

// Infraction history belonging to an account
type PostRejectionReason struct {
	// ID of the rejection reason
	ID relay.ID `json:"id"`
	// The reason for this rejection
	Reason string `json:"reason"`
	// All translations for this reason.
	ReasonTranslations []*Translation `json:"reasonTranslations"`
	// The club infraction reason, linked to this rejection reason.
	ClubInfractionReason *ClubInfractionReason `json:"clubInfractionReason"`
	// If this reason is deprecated.
	Deprecated bool `json:"deprecated"`
}

func (PostRejectionReason) IsNode()   {}
func (PostRejectionReason) IsEntity() {}

// Connection of the pending post rejection reason
type PostRejectionReasonConnection struct {
	Edges    []*PostRejectionReasonEdge `json:"edges"`
	PageInfo *relay.PageInfo            `json:"pageInfo"`
}

// Edge of the pending post rejection reason
type PostRejectionReasonEdge struct {
	Node   *PostRejectionReason `json:"node"`
	Cursor string               `json:"cursor"`
}

// Post report
type PostReport struct {
	// ID of the report
	ID relay.ID `json:"id"`
	// The account that initiated this report
	Account *Account `json:"account"`
	// The reason for this report
	PostReportReason *PostReportReason `json:"postReportReason"`
}

func (PostReport) IsNode()   {}
func (PostReport) IsEntity() {}

// Connection of the post report
type PostReportConnection struct {
	Edges    []*PostReportEdge `json:"edges"`
	PageInfo *relay.PageInfo   `json:"pageInfo"`
}

// Date range for post reports
type PostReportDateRange struct {
	// The starting date range
	From time.Time `json:"from"`
	// The ending date range
	To time.Time `json:"to"`
}

// Edge of the post report
type PostReportEdge struct {
	Node   *PostReport `json:"node"`
	Cursor string      `json:"cursor"`
}

// Post report reason
type PostReportReason struct {
	// ID of the report reason
	ID relay.ID `json:"id"`
	// The reason for this report
	Reason string `json:"reason"`
}

func (PostReportReason) IsNode()   {}
func (PostReportReason) IsEntity() {}

// Connection of the pending post rejection reason
type PostReportReasonConnection struct {
	Edges    []*PostReportReasonEdge `json:"edges"`
	PageInfo *relay.PageInfo         `json:"pageInfo"`
}

// Edge of the pending post rejection reason
type PostReportReasonEdge struct {
	Node   *PostReportReason `json:"node"`
	Cursor string            `json:"cursor"`
}

// Moderate the pending post input
type RejectPostInput struct {
	// Pending post to take action against
	PostID relay.ID `json:"postId"`
	// Required to enter a rejection reason ID
	PostRejectionReasonID relay.ID `json:"postRejectionReasonId"`
	// Any extra notes for the moderator
	Notes *string `json:"notes"`
}

// Reject the pending post payload
type RejectPostPayload struct {
	// The audit log generated by the pending post
	PostAuditLog *PostAuditLog `json:"postAuditLog"`
}

// Remove a club infraction.
type RemoveClubInfractionHistoryInput struct {
	// The history item to remove.
	ClubInfractionHistoryID relay.ID `json:"clubInfractionHistoryId"`
}

// Remove club infraction history.
type RemoveClubInfractionHistoryPayload struct {
	// The removed infraction history Id.
	ClubInfractionHistoryID relay.ID `json:"clubInfractionHistoryId"`
}

// Remove moderator from posts queue.
type RemoveModeratorFromPostQueueInput struct {
	// The moderator account to take the action on
	AccountID relay.ID `json:"accountId"`
}

// Remove moderator from posts queue.
type RemoveModeratorFromPostQueuePayload struct {
	// The account that was updated
	Account *Account `json:"account"`
}

// Moderate the pending post input
type RemovePostInput struct {
	// Pending post to take action against
	PostID relay.ID `json:"postId"`
	// Required to enter a rejection reason ID
	PostRejectionReasonID relay.ID `json:"postRejectionReasonId"`
	// Any extra notes for the staff member
	Notes *string `json:"notes"`
}

// Remove the pending post payload
type RemovePostPayload struct {
	// The audit log generated by the pending post
	PostAuditLog *PostAuditLog `json:"postAuditLog"`
}

// Report the post input
type ReportPostInput struct {
	// The post to report
	PostID relay.ID `json:"postId"`
	// The post report reason ID
	PostReportReason relay.ID `json:"postReportReason"`
}

// Report the post payload
type ReportPostPayload struct {
	// The post report that was generated
	PostReport *PostReport `json:"postReport"`
}

type Translation struct {
	// The language linked to this translation.
	Language *Language `json:"language"`
	// The translation text.
	Text string `json:"text"`
}

// Update club infraction reason.
type UpdateClubInfractionReasonDeprecatedInput struct {
	// The club infraction to take action against.
	ReasonID relay.ID `json:"reasonId"`
	// Whether or not this club infraction reason should be deprecated.
	Deprecated bool `json:"deprecated"`
}

// Update club infraction reason payload.
type UpdateClubInfractionReasonDeprecatedUpload struct {
	// The club infraction reason.
	ClubInfractionReason *ClubInfractionReason `json:"clubInfractionReason"`
}

// Update club infraction reason.
type UpdateClubInfractionReasonTextInput struct {
	// The club infraction to take action against.
	ReasonID relay.ID `json:"reasonId"`
	// The reason to update
	Reason string `json:"reason"`
	// The localization for this reason
	Locale string `json:"locale"`
}

// Create a new club infraction reason payload.
type UpdateClubInfractionReasonTextPayload struct {
	// The club infraction reason.
	ClubInfractionReason *ClubInfractionReason `json:"clubInfractionReason"`
}

// Update post rejection reason club infraction reason.
type UpdatePostRejectionReasonClubInfractionReasonInput struct {
	// The post rejection reason against.
	RejectionReasonID relay.ID `json:"rejectionReasonId"`
	// The club infraction reason to use. Pass nil if removing
	ClubInfractionReason *relay.ID `json:"clubInfractionReason"`
}

// Update post rejection reason.
type UpdatePostRejectionReasonClubInfractionReasonPayload struct {
	// The post rejection reason.
	PostRejectionReason *PostRejectionReason `json:"postRejectionReason"`
}

// Update post rejection reason.
type UpdatePostRejectionReasonDeprecatedInput struct {
	// The post rejection reason to take action against.
	RejectionReasonID relay.ID `json:"rejectionReasonId"`
	// Whether or not this post rejection reason should be deprecated.
	Deprecated bool `json:"deprecated"`
}

// Update post rejection reason.
type UpdatePostRejectionReasonDeprecatedPayload struct {
	// The post rejection reason.
	PostRejectionReason *PostRejectionReason `json:"postRejectionReason"`
}

// Update post rejection reason reason.
type UpdatePostRejectionReasonTextInput struct {
	// The post rejection reason against.
	RejectionReasonID relay.ID `json:"rejectionReasonId"`
	// The reason to update
	Reason string `json:"reason"`
	// The localization for this reason
	Locale string `json:"locale"`
}

// Update post rejection reason.
type UpdatePostRejectionReasonTextPayload struct {
	// The post rejection reason.
	PostRejectionReason *PostRejectionReason `json:"postRejectionReason"`
}

type ClubInfractionHistorySource string

const (
	ClubInfractionHistorySourceManual                  ClubInfractionHistorySource = "MANUAL"
	ClubInfractionHistorySourcePostModerationRejection ClubInfractionHistorySource = "POST_MODERATION_REJECTION"
	ClubInfractionHistorySourcePostManualRemoval       ClubInfractionHistorySource = "POST_MANUAL_REMOVAL"
)

var AllClubInfractionHistorySource = []ClubInfractionHistorySource{
	ClubInfractionHistorySourceManual,
	ClubInfractionHistorySourcePostModerationRejection,
	ClubInfractionHistorySourcePostManualRemoval,
}

func (e ClubInfractionHistorySource) IsValid() bool {
	switch e {
	case ClubInfractionHistorySourceManual, ClubInfractionHistorySourcePostModerationRejection, ClubInfractionHistorySourcePostManualRemoval:
		return true
	}
	return false
}

func (e ClubInfractionHistorySource) String() string {
	return string(e)
}

func (e *ClubInfractionHistorySource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ClubInfractionHistorySource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ClubInfractionHistorySource", str)
	}
	return nil
}

func (e ClubInfractionHistorySource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostAuditLogAction string

const (
	PostAuditLogActionApproved PostAuditLogAction = "APPROVED"
	PostAuditLogActionDenied   PostAuditLogAction = "DENIED"
	PostAuditLogActionRemoved  PostAuditLogAction = "REMOVED"
)

var AllPostAuditLogAction = []PostAuditLogAction{
	PostAuditLogActionApproved,
	PostAuditLogActionDenied,
	PostAuditLogActionRemoved,
}

func (e PostAuditLogAction) IsValid() bool {
	switch e {
	case PostAuditLogActionApproved, PostAuditLogActionDenied, PostAuditLogActionRemoved:
		return true
	}
	return false
}

func (e PostAuditLogAction) String() string {
	return string(e)
}

func (e *PostAuditLogAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostAuditLogAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostAuditLogAction", str)
	}
	return nil
}

func (e PostAuditLogAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
