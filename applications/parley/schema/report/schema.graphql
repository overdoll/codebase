"""Date range for post reports"""
input PostReportDateRange {
  """The starting date range"""
  from: Time!

  """The ending date range"""
  to: Time!
}

"""Post report"""
type PostReport implements Node @key(fields: "id") {
  """ID of the report"""
  id: ID!

  """The account that initiated this report"""
  account: Account!

  """The rule that was cited for this report."""
  rule: Rule! @goField(forceResolver: true)

  """The post linked to this report."""
  post: Post!
}

"""Edge of the post report"""
type PostReportEdge {
  node: PostReport!
  cursor: String!
}

"""Connection of the post report"""
type PostReportConnection {
  edges: [PostReportEdge!]!
  pageInfo: PageInfo!
}

extend type Query {
  """All post reports."""
  postReports(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The date range for post reports. Required."""
    dateRange: PostReportDateRange!
  ): PostReportConnection! @goField(forceResolver: true)
}

extend type Post {
  """Whether or not the post was reported by the viewer."""
  viewerReport: PostReport @goField(forceResolver: true)

  """Reports belonging to a post"""
  reports(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The date range for post reports. Required."""
    dateRange: PostReportDateRange!
  ): PostReportConnection! @goField(forceResolver: true)
}

"""Report the post input"""
input ReportPostInput {
  """The post to report"""
  postId: ID!

  """The rule to report this post for."""
  ruleId: ID!
}

"""Report the post payload"""
type ReportPostPayload {
  """The post report that was generated"""
  postReport: PostReport
}

extend type Mutation {
  """
  Report a specific post
  """
  reportPost(input: ReportPostInput!): ReportPostPayload
}
