"""Post report reason"""
type PostReportReason implements Node @key(fields: "id") {
  """ID of the report reason"""
  id: ID!

  """The reason for this report"""
  reason: String!
}

"""Edge of the pending post rejection reason"""
type PostReportReasonEdge {
  node: PostReportReason!
  cursor: String!
}

"""Connection of the pending post rejection reason"""
type PostReportReasonConnection {
  edges: [PostReportReasonEdge!]!
  pageInfo: PageInfo!
}

extend type Query {
  """
  Get rejection reasons that can be used for pending posts

  Viewable by everyone who is authenticated
  """
  postReportReasons(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostReportReasonConnection! @goField(forceResolver: true)
}

"""Post report"""
type PostReport implements Node @key(fields: "id") {
  """ID of the report"""
  id: ID!

  """The account that initiated this report"""
  account: Account!

  """The reason for this report"""
  postReportReason: PostReportReason!
}

"""Edge of the post report"""
type PostReportEdge {
  node: PostReport!
  cursor: String!
}

"""Connection of the post report"""
type PostReportConnection {
  edges: [PostReportEdge!]!
  pageInfo: PageInfo!
}

extend type Post @key(fields: "id") {
  """Whether or not the post was reported by the viewer."""
  viewerReport: PostReport @goField(forceResolver: true)

  """Reports belonging to a post"""
  reports(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostReportConnection! @goField(forceResolver: true)
}

"""Report the post input"""
input ReportPostInput {
  """The post to report"""
  postId: ID!

  """The post report reason ID"""
  postReportReason: ID!
}

"""Report the post payload"""
type ReportPostPayload {
  """The post report that was generated"""
  postReport: PostReport
}

extend type Mutation {
  """
  Report a specific post
  """
  reportPost(input: ReportPostInput!): ReportPostPayload
}