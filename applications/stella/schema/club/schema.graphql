type Club implements Node @key(fields: "id") {
  """An ID pointing to this club."""
  id: ID!

  """An internal reference, uniquely identifying the club."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """
  Maximum amount of slug aliases that can be created for this club.
  """
  slugAliasesLimit: Int! @goField(forceResolver: true)

  """An alias list of slugs. These are valid, as in, you can find the club using the slug. However, it should always be replaced by the default slug."""
  slugAliases: [ClubSlugAlias!]!

  """A URL pointing to the object's thumbnail."""
  thumbnail(size: Int): Resource @goField(forceResolver: true)

  """A name for this club."""
  name: String!

  """The account that owns this club."""
  owner: Account!

  """
  Whether or not this club is suspended.
  """
  suspension: ClubSuspension

  """Whether or not the viewer is a member of this club."""
  viewerMember: ClubMember @goField(forceResolver: true)

  """The total amount of members in this club."""
  membersCount: Int!

  """Club members."""
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """sorting options for club members."""
    sortBy: ClubMembersSort! = NEWEST
  ): ClubMemberConnection! @goField(forceResolver: true)
}

type ClubSuspension {
  """When the suspension expires. Can call UnSuspendClub when time = now."""
  expires: Time!
}

"""The club slug alias"""
type ClubSlugAlias {
  """The slug alias"""
  slug: String!
}

type ClubEdge {
  cursor: String!
  node: Club!
}

type ClubConnection {
  edges: [ClubEdge!]!
  pageInfo: PageInfo!
}

type ClubMemberEdge {
  cursor: String!
  node: ClubMember!
}

type ClubMemberConnection {
  edges: [ClubMemberEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which club member connections can be sorted."""
enum ClubMembersSort {
  """By oldest members"""
  NEWEST
}

type ClubMember implements Node @key(fields: "id") {
  """An ID pointing to this club member."""
  id: ID!

  """When the membership was created (when the account originally joined)."""
  joinedAt: Time!

  """The club that this membership belongs to."""
  club: Club!

  """The account that belongs to this membership."""
  account: Account!
}

"""Add alias slug."""
input AddClubSlugAliasInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Remove alias slug."""
input RemoveClubSlugAliasInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Create club."""
input CreateClubInput {
  """The chosen slug for the club."""
  slug: String!

  """The chosen name for the club."""
  name: String!
}

"""Become a club member."""
input BecomeClubMemberInput {
  """The chosen club ID."""
  clubId: ID!
}

"""Withdraw club membership."""
input WithdrawClubMembershipInput {
  """The chosen club ID."""
  clubId: ID!
}

"""Update club name."""
input UpdateClubNameInput {
  """The club to update"""
  id: ID!

  """The chosen name for the club."""
  name: String!
}

"""Update club thumbnail."""
input UpdateClubThumbnailInput {
  """The club to update"""
  id: ID!

  """The thumbnail for the club."""
  thumbnail: String!
}

"""Update alias slug to default."""
input PromoteClubSlugAliasToDefaultInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Validation for creating a new club"""
enum CreateClubValidation {
  SLUG_TAKEN
}

"""Payload for a new club"""
type CreateClubPayload {
  """The club after creation"""
  club: Club

  """Validation for creating a new club"""
  validation: CreateClubValidation
}

"""Payload for a new club member"""
type BecomeClubMemberPayload {
  """The membership after creation"""
  clubMember: ClubMember
}

"""Payload for withdrawing club membership"""
type WithdrawClubMembershipPayload {
  """The club membership that was removed"""
  clubMemberId: ID!
}

"""Validation for adding a new slug to a club"""
enum AddClubSlugAliasValidation {
  SLUG_TAKEN
}

"""Payload for a new alt slug"""
type AddClubSlugAliasPayload {
  """The club after update"""
  club: Club

  """Validation for adding a new club"""
  validation: AddClubSlugAliasValidation
}

"""Payload for a new alt slug"""
type RemoveClubSlugAliasPayload {
  """The club after update"""
  club: Club
}

"""Payload for a new alt slug"""
type PromoteClubSlugAliasToDefaultPayload {
  """The club after update"""
  club: Club
}

"""Payload for updating the name"""
type UpdateClubNamePayload {
  """The club after update"""
  club: Club
}

"""Payload for updating the thumbnail"""
type UpdateClubThumbnailPayload {
  """The club after update"""
  club: Club
}

"""Properties by which club connections can be sorted."""
enum ClubsSort {
  """Clubs by popularity"""
  POPULAR
}

"""Un-Suspend the club."""
input UnSuspendClubInput {
  """The club to un-suspend."""
  clubId: ID!
}

"""Un suspend club payload."""
type UnSuspendClubPayload {
  """The new club after it's not suspended anymore."""
  club: Club
}

extend type Mutation {
  """
  Become a member of a club
  """
  becomeClubMember(input: BecomeClubMemberInput!): BecomeClubMemberPayload

  """
  Withdraw membership from a club
  """
  withdrawClubMembership(input: WithdrawClubMembershipInput!): WithdrawClubMembershipPayload

  """
  Create a new club
  """
  createClub(input: CreateClubInput!): CreateClubPayload

  """
  Add an alternative slug to the club
  """
  addClubSlugAlias(input: AddClubSlugAliasInput!): AddClubSlugAliasPayload

  """
  Remove an alternative slug from the club
  """
  removeClubSlugAlias(input: RemoveClubSlugAliasInput!): RemoveClubSlugAliasPayload

  """
  Make the alias slug the default, swapping out the old slug into the alias list.
  """
  promoteClubSlugAliasToDefault(input: PromoteClubSlugAliasToDefaultInput!): PromoteClubSlugAliasToDefaultPayload

  """
  Update the club's name (english-only for now)
  """
  updateClubName(input: UpdateClubNameInput!): UpdateClubNamePayload

  """
  Update the club thumbnail
  """
  updateClubThumbnail(input: UpdateClubThumbnailInput!): UpdateClubThumbnailPayload

  """
  Un-Suspend the club. Suspension must be expired.

  Staff+ may un-suspend even if suspension hasn't expired yet.
  """
  unSuspendClub(input: UnSuspendClubInput!): UnSuspendClubPayload
}

extend type Query {
  """Search multiple clubs."""
  clubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by club slugs."""
    slugs: [String!]

    """Filter by the name of the club."""
    name: String

    """Also view clubs that are currently suspended."""
    suspended: Boolean! = false

    """Sorting options for clubs."""
    sortBy: ClubsSort! = POPULAR
  ): ClubConnection!

  """Get a single club."""
  club(
    """Search by slug of the club."""
    slug: String!

    """Show club even if it's suspended. Can only view if staff+ or club owner."""
    suspended: Boolean! = false
  ): Club
}

extend type Account {

  """
  Maximum amount of clubs that you can create.
  """
  clubsLimit: Int! @goField(forceResolver: true)

  """
  Current count of the amount of clubs that the account has created.
  """
  clubsCount: Int! @goField(forceResolver: true)

  """Represents the clubs that the account has created."""
  clubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by club slugs."""
    slugs: [String!]

    """Filter by the name of the club."""
    name: String

    """Also view clubs that are currently suspended."""
    suspended: Boolean! = true

    """Sorting options for clubs."""
    sortBy: ClubsSort! = POPULAR
  ): ClubConnection! @goField(forceResolver: true)

  """
  Maximum amount of clubs that you can join as an account.
  """
  clubMembershipsLimit: Int! @goField(forceResolver: true)

  """
  Current count of club memberships. Should be compared against the limit before joining a club.
  """
  clubMembershipsCount: Int! @goField(forceResolver: true)

  """Represents the club memberships that the account has."""
  clubMemberships(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """sorting options for club members."""
    sortBy: ClubMembersSort! = NEWEST
  ): ClubMemberConnection! @goField(forceResolver: true)
}
