// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"overdoll/applications/sting/internal/ports/graphql/types"
	graphql1 "overdoll/libraries/graphql"
	"overdoll/libraries/graphql/relay"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Account() AccountResolver
	Audience() AudienceResolver
	AudienceCurationProfile() AudienceCurationProfileResolver
	Category() CategoryResolver
	CategoryCurationProfile() CategoryCurationProfileResolver
	Character() CharacterResolver
	Club() ClubResolver
	ClubMember() ClubMemberResolver
	Entity() EntityResolver
	Mutation() MutationResolver
	Post() PostResolver
	Query() QueryResolver
	RouletteGameState() RouletteGameStateResolver
	Series() SeriesResolver
	Topic() TopicResolver
}

type DirectiveRoot struct {
	EntityResolver func(ctx context.Context, obj interface{}, next graphql.Resolver, multi *bool) (res interface{}, err error)
}

type ComplexityRoot struct {
	Account struct {
		ClubMembersPostsFeed  func(childComplexity int, after *string, before *string, first *int, last *int) int
		ClubMemberships       func(childComplexity int, after *string, before *string, first *int, last *int, supporter bool, sortBy types.ClubMembersSort) int
		ClubMembershipsCount  func(childComplexity int) int
		ClubMembershipsLimit  func(childComplexity int) int
		Clubs                 func(childComplexity int, after *string, before *string, first *int, last *int, slugs []string, name *string, sortBy types.ClubsSort) int
		ClubsCount            func(childComplexity int) int
		ClubsLimit            func(childComplexity int) int
		CurationProfile       func(childComplexity int) int
		HasNonTerminatedClubs func(childComplexity int) int
		ID                    func(childComplexity int) int
		LikedPosts            func(childComplexity int, after *string, before *string, first *int, last *int) int
		Posts                 func(childComplexity int, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) int
	}

	AddCategoryAlternativeTitlePayload struct {
		Category func(childComplexity int) int
	}

	AddClubSlugAliasPayload struct {
		Club       func(childComplexity int) int
		Validation func(childComplexity int) int
	}

	AddPostContentPayload struct {
		Post func(childComplexity int) int
	}

	ArchivePostPayload struct {
		Post func(childComplexity int) int
	}

	AspectRatio struct {
		Height func(childComplexity int) int
		Width  func(childComplexity int) int
	}

	Audience struct {
		Banner            func(childComplexity int) int
		BannerMedia       func(childComplexity int) int
		ID                func(childComplexity int) int
		Posts             func(childComplexity int, after *string, before *string, first *int, last *int, categorySlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) int
		Reference         func(childComplexity int) int
		Slug              func(childComplexity int) int
		Standard          func(childComplexity int) int
		Thumbnail         func(childComplexity int) int
		Title             func(childComplexity int, locale *string) int
		TitleTranslations func(childComplexity int) int
		TotalLikes        func(childComplexity int) int
		TotalPosts        func(childComplexity int) int
	}

	AudienceConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AudienceCurationProfile struct {
		Audiences func(childComplexity int) int
		Completed func(childComplexity int) int
		Skipped   func(childComplexity int) int
	}

	AudienceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Category struct {
		AlternativeTitles func(childComplexity int) int
		Banner            func(childComplexity int) int
		BannerMedia       func(childComplexity int) int
		ID                func(childComplexity int) int
		Posts             func(childComplexity int, after *string, before *string, first *int, last *int, audienceSlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) int
		Reference         func(childComplexity int) int
		Slug              func(childComplexity int) int
		Thumbnail         func(childComplexity int) int
		Title             func(childComplexity int, locale *string) int
		TitleTranslations func(childComplexity int) int
		Topic             func(childComplexity int) int
		TotalLikes        func(childComplexity int) int
		TotalPosts        func(childComplexity int) int
	}

	CategoryConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CategoryCurationProfile struct {
		Categories func(childComplexity int) int
		Completed  func(childComplexity int) int
		Skipped    func(childComplexity int) int
	}

	CategoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Character struct {
		Banner           func(childComplexity int) int
		BannerMedia      func(childComplexity int) int
		Club             func(childComplexity int) int
		ID               func(childComplexity int) int
		Name             func(childComplexity int, locale *string) int
		NameTranslations func(childComplexity int) int
		Posts            func(childComplexity int, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) int
		Reference        func(childComplexity int) int
		Series           func(childComplexity int) int
		Slug             func(childComplexity int) int
		Thumbnail        func(childComplexity int) int
		TotalLikes       func(childComplexity int) int
		TotalPosts       func(childComplexity int) int
	}

	CharacterConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CharacterEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Club struct {
		Banner                      func(childComplexity int) int
		BannerMedia                 func(childComplexity int) int
		CanCreateSupporterOnlyPosts func(childComplexity int) int
		CanSupport                  func(childComplexity int) int
		Characters                  func(childComplexity int, after *string, before *string, first *int, last *int, slugs []string, name *string, sortBy types.CharactersSort) int
		CharactersCount             func(childComplexity int) int
		CharactersEnabled           func(childComplexity int) int
		CharactersLimit             func(childComplexity int) int
		ID                          func(childComplexity int) int
		Links                       func(childComplexity int) int
		Members                     func(childComplexity int, after *string, before *string, first *int, last *int, supporter bool, sortBy types.ClubMembersSort) int
		MembersCount                func(childComplexity int) int
		MembersIsSupporterCount     func(childComplexity int) int
		Name                        func(childComplexity int) int
		NextSupporterPostTime       func(childComplexity int) int
		Owner                       func(childComplexity int) int
		Posts                       func(childComplexity int, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) int
		Reference                   func(childComplexity int) int
		Slug                        func(childComplexity int) int
		SlugAliases                 func(childComplexity int) int
		SlugAliasesLimit            func(childComplexity int) int
		Suspension                  func(childComplexity int) int
		SuspensionLogs              func(childComplexity int, after *string, before *string, first *int, last *int) int
		Termination                 func(childComplexity int) int
		Thumbnail                   func(childComplexity int) int
		ThumbnailMedia              func(childComplexity int) int
		TotalLikes                  func(childComplexity int) int
		TotalPosts                  func(childComplexity int) int
		ViewerIsOwner               func(childComplexity int) int
		ViewerMember                func(childComplexity int) int
	}

	ClubConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ClubEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ClubIssuedSuspensionLog struct {
		Account        func(childComplexity int) int
		ID             func(childComplexity int) int
		Reason         func(childComplexity int) int
		SuspendedUntil func(childComplexity int) int
	}

	ClubLink struct {
		URL func(childComplexity int) int
	}

	ClubMember struct {
		Account        func(childComplexity int) int
		Club           func(childComplexity int) int
		ID             func(childComplexity int) int
		IsSupporter    func(childComplexity int) int
		JoinedAt       func(childComplexity int) int
		SupporterSince func(childComplexity int) int
	}

	ClubMemberConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ClubMemberEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ClubRemovedSuspensionLog struct {
		Account func(childComplexity int) int
		ID      func(childComplexity int) int
	}

	ClubSlugAlias struct {
		Slug func(childComplexity int) int
	}

	ClubSuspension struct {
		Expires func(childComplexity int) int
	}

	ClubSuspensionLogConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ClubSuspensionLogEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ClubTermination struct {
		Account func(childComplexity int) int
	}

	ColorPalette struct {
		Blue    func(childComplexity int) int
		Green   func(childComplexity int) int
		Percent func(childComplexity int) int
		Red     func(childComplexity int) int
	}

	CreateAudiencePayload struct {
		Audience   func(childComplexity int) int
		Validation func(childComplexity int) int
	}

	CreateCategoryPayload struct {
		Category   func(childComplexity int) int
		Validation func(childComplexity int) int
	}

	CreateCharacterPayload struct {
		Character  func(childComplexity int) int
		Validation func(childComplexity int) int
	}

	CreateClubPayload struct {
		Club       func(childComplexity int) int
		Validation func(childComplexity int) int
	}

	CreateGameSessionPayload struct {
		GameSession func(childComplexity int) int
	}

	CreatePostPayload struct {
		Post func(childComplexity int) int
	}

	CreateSeriesPayload struct {
		Series     func(childComplexity int) int
		Validation func(childComplexity int) int
	}

	CreateTopicPayload struct {
		Topic      func(childComplexity int) int
		Validation func(childComplexity int) int
	}

	CurationProfile struct {
		Audience    func(childComplexity int) int
		Category    func(childComplexity int) int
		Completed   func(childComplexity int) int
		DateOfBirth func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	DateOfBirthCurationProfile struct {
		Completed   func(childComplexity int) int
		DateOfBirth func(childComplexity int) int
		Skipped     func(childComplexity int) int
	}

	DeletePostPayload struct {
		PostID func(childComplexity int) int
	}

	DisableClubCharactersPayload struct {
		Club func(childComplexity int) int
	}

	DisableClubSupporterOnlyPostsPayload struct {
		Club func(childComplexity int) int
	}

	EnableClubCharactersPayload struct {
		Club func(childComplexity int) int
	}

	EnableClubSupporterOnlyPostsPayload struct {
		Club func(childComplexity int) int
	}

	Entity struct {
		FindAccountByID    func(childComplexity int, id relay.ID) int
		FindAudienceByID   func(childComplexity int, id relay.ID) int
		FindCategoryByID   func(childComplexity int, id relay.ID) int
		FindCharacterByID  func(childComplexity int, id relay.ID) int
		FindClubByID       func(childComplexity int, id relay.ID) int
		FindClubMemberByID func(childComplexity int, id relay.ID) int
		FindPostByID       func(childComplexity int, id relay.ID) int
		FindPostLikeByID   func(childComplexity int, id relay.ID) int
		FindSeriesByID     func(childComplexity int, id relay.ID) int
		FindTopicByID      func(childComplexity int, id relay.ID) int
	}

	GameSession struct {
		GameType       func(childComplexity int) int
		ID             func(childComplexity int) int
		IsClosed       func(childComplexity int) int
		Reference      func(childComplexity int) int
		Seed           func(childComplexity int) int
		ViewerIsPlayer func(childComplexity int) int
	}

	HLSVideoContainer struct {
		TargetDevice func(childComplexity int) int
		URL          func(childComplexity int) int
	}

	ImageMedia struct {
		ColorPalettes func(childComplexity int) int
		ID            func(childComplexity int) int
		Variants      func(childComplexity int) int
	}

	ImageMediaAccess struct {
		Height func(childComplexity int) int
		URL    func(childComplexity int) int
		Width  func(childComplexity int) int
	}

	ImageMediaVariants struct {
		Banner      func(childComplexity int) int
		Hd          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Large       func(childComplexity int) int
		Medium      func(childComplexity int) int
		Mini        func(childComplexity int) int
		Small       func(childComplexity int) int
		SmallBanner func(childComplexity int) int
		Thumbnail   func(childComplexity int) int
	}

	JoinClubPayload struct {
		ClubMember func(childComplexity int) int
	}

	Language struct {
		Locale func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	LeaveClubPayload struct {
		ClubMemberID func(childComplexity int) int
	}

	LikePostPayload struct {
		PostLike func(childComplexity int) int
	}

	MP4VideoContainer struct {
		Bitrate func(childComplexity int) int
		Height  func(childComplexity int) int
		URL     func(childComplexity int) int
		Width   func(childComplexity int) int
	}

	MediaProgress struct {
		ID func(childComplexity int) int
	}

	Mutation struct {
		AddCategoryAlternativeTitle      func(childComplexity int, input types.AddCategoryAlternativeTitleInput) int
		AddClubSlugAlias                 func(childComplexity int, input types.AddClubSlugAliasInput) int
		AddPostContent                   func(childComplexity int, input types.AddPostContentInput) int
		ArchivePost                      func(childComplexity int, input types.ArchivePostInput) int
		CreateAudience                   func(childComplexity int, input types.CreateAudienceInput) int
		CreateCategory                   func(childComplexity int, input types.CreateCategoryInput) int
		CreateCharacter                  func(childComplexity int, input types.CreateCharacterInput) int
		CreateClub                       func(childComplexity int, input types.CreateClubInput) int
		CreateGameSession                func(childComplexity int, input types.CreateGameSessionInput) int
		CreatePost                       func(childComplexity int, input types.CreatePostInput) int
		CreateSeries                     func(childComplexity int, input types.CreateSeriesInput) int
		CreateTopic                      func(childComplexity int, input types.CreateTopicInput) int
		DeletePost                       func(childComplexity int, input types.DeletePostInput) int
		DisableClubCharacters            func(childComplexity int, input types.DisableClubCharactersInput) int
		DisableClubSupporterOnlyPosts    func(childComplexity int, input types.DisableClubSupporterOnlyPostsInput) int
		EnableClubCharacters             func(childComplexity int, input types.EnableClubCharactersInput) int
		EnableClubSupporterOnlyPosts     func(childComplexity int, input types.EnableClubSupporterOnlyPostsInput) int
		JoinClub                         func(childComplexity int, input types.JoinClubInput) int
		LeaveClub                        func(childComplexity int, input types.LeaveClubInput) int
		LikePost                         func(childComplexity int, input types.LikePostInput) int
		PromoteClubSlugAliasToDefault    func(childComplexity int, input types.PromoteClubSlugAliasToDefaultInput) int
		RemoveCategoryAlternativeTitle   func(childComplexity int, input types.RemoveCategoryAlternativeTitleInput) int
		RemoveClubSlugAlias              func(childComplexity int, input types.RemoveClubSlugAliasInput) int
		RemovePostContent                func(childComplexity int, input types.RemovePostContentInput) int
		SpinRoulette                     func(childComplexity int, input types.SpinRouletteInput) int
		SubmitPost                       func(childComplexity int, input types.SubmitPostInput) int
		SuspendClub                      func(childComplexity int, input types.SuspendClubInput) int
		TerminateClub                    func(childComplexity int, input types.TerminateClubInput) int
		TransferClubOwnership            func(childComplexity int, input types.TransferClubOwnershipInput) int
		UnArchivePost                    func(childComplexity int, input types.UnArchivePostInput) int
		UnSuspendClub                    func(childComplexity int, input types.UnSuspendClubInput) int
		UnTerminateClub                  func(childComplexity int, input types.UnTerminateClubInput) int
		UndoLikePost                     func(childComplexity int, input types.UndoLikePostInput) int
		UpdateAudienceBanner             func(childComplexity int, input types.UpdateAudienceBannerInput) int
		UpdateAudienceIsStandard         func(childComplexity int, input types.UpdateAudienceIsStandardInput) int
		UpdateAudienceTitle              func(childComplexity int, input types.UpdateAudienceTitleInput) int
		UpdateCategoryTitle              func(childComplexity int, input types.UpdateCategoryTitleInput) int
		UpdateCategoryTopic              func(childComplexity int, input types.UpdateCategoryTopicInput) int
		UpdateCharacterName              func(childComplexity int, input types.UpdateCharacterNameInput) int
		UpdateClubCharactersLimit        func(childComplexity int, input types.UpdateClubCharactersLimitInput) int
		UpdateClubName                   func(childComplexity int, input types.UpdateClubNameInput) int
		UpdateClubThumbnail              func(childComplexity int, input types.UpdateClubThumbnailInput) int
		UpdateCurationProfileAudience    func(childComplexity int, input types.UpdateCurationProfileAudienceInput) int
		UpdateCurationProfileCategory    func(childComplexity int, input types.UpdateCurationProfileCategoryInput) int
		UpdateCurationProfileDateOfBirth func(childComplexity int, input types.UpdateCurationProfileDateOfBirthInput) int
		UpdatePostAudience               func(childComplexity int, input types.UpdatePostAudienceInput) int
		UpdatePostCategories             func(childComplexity int, input types.UpdatePostCategoriesInput) int
		UpdatePostCharacters             func(childComplexity int, input types.UpdatePostCharactersInput) int
		UpdatePostContentIsSupporterOnly func(childComplexity int, input types.UpdatePostContentIsSupporterOnlyInput) int
		UpdatePostContentOrder           func(childComplexity int, input types.UpdatePostContentOrderInput) int
		UpdatePostDescription            func(childComplexity int, input types.UpdatePostDescriptionInput) int
		UpdateSeriesTitle                func(childComplexity int, input types.UpdateSeriesTitleInput) int
		UpdateTopicBanner                func(childComplexity int, input types.UpdateTopicBannerInput) int
		UpdateTopicDescription           func(childComplexity int, input types.UpdateTopicDescriptionInput) int
		UpdateTopicTitle                 func(childComplexity int, input types.UpdateTopicTitleInput) int
		UpdateTopicWeight                func(childComplexity int, input types.UpdateTopicWeightInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Post struct {
		Audience                func(childComplexity int) int
		Categories              func(childComplexity int) int
		Characters              func(childComplexity int) int
		Club                    func(childComplexity int) int
		Content                 func(childComplexity int) int
		Contributor             func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		Description             func(childComplexity int, locale *string) int
		DescriptionTranslations func(childComplexity int) int
		ID                      func(childComplexity int) int
		Likes                   func(childComplexity int) int
		PostedAt                func(childComplexity int) int
		Reference               func(childComplexity int) int
		State                   func(childComplexity int) int
		SuggestedPosts          func(childComplexity int, after *string, before *string, first *int, last *int) int
		SupporterOnlyStatus     func(childComplexity int) int
		ViewerLiked             func(childComplexity int) int
	}

	PostConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	PostContent struct {
		ID                                func(childComplexity int) int
		IsSupporterOnly                   func(childComplexity int) int
		Media                             func(childComplexity int) int
		Resource                          func(childComplexity int) int
		SupporterOnlyResource             func(childComplexity int) int
		SupporterOnlyVideoMediaDuration   func(childComplexity int) int
		SupporterOnlyVideoMediaHasAudio   func(childComplexity int) int
		ViewerCanViewSupporterOnlyContent func(childComplexity int) int
	}

	PostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostLike struct {
		Account func(childComplexity int) int
		ID      func(childComplexity int) int
		LikedAt func(childComplexity int) int
		Post    func(childComplexity int) int
	}

	PromoteClubSlugAliasToDefaultPayload struct {
		Club func(childComplexity int) int
	}

	Query struct {
		Audience           func(childComplexity int, slug string) int
		Audiences          func(childComplexity int, after *string, before *string, first *int, last *int, slugs []string, title *string, sortBy types.AudiencesSort) int
		Categories         func(childComplexity int, after *string, before *string, first *int, last *int, slugs []string, title *string, excludeEmpty bool, sortBy types.CategoriesSort) int
		Category           func(childComplexity int, slug string) int
		Character          func(childComplexity int, slug string, seriesSlug *string, clubSlug *string) int
		Characters         func(childComplexity int, after *string, before *string, first *int, last *int, clubCharacters *bool, slugs []string, seriesSlug *string, clubSlug *string, name *string, excludeEmpty bool, sortBy types.CharactersSort) int
		Club               func(childComplexity int, slug string) int
		Clubs              func(childComplexity int, after *string, before *string, first *int, last *int, slugs []string, name *string, suspended *bool, terminated *bool, excludeEmpty bool, sortBy types.ClubsSort) int
		DiscoverClubs      func(childComplexity int, after *string, before *string, first *int, last *int) int
		GameSessionStatus  func(childComplexity int, reference string) int
		Post               func(childComplexity int, reference string) int
		Posts              func(childComplexity int, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) int
		PostsFeed          func(childComplexity int, after *string, before *string, first *int, last *int, seed *string) int
		Search             func(childComplexity int, after *string, before *string, first *int, last *int, query string) int
		Serial             func(childComplexity int, slug string) int
		Series             func(childComplexity int, after *string, before *string, first *int, last *int, slugs []string, title *string, excludeEmpty bool, sortBy types.SeriesSort) int
		Topic              func(childComplexity int, slug string) int
		Topics             func(childComplexity int, after *string, before *string, first *int, last *int) int
		__resolve__service func(childComplexity int) int
		__resolve_entities func(childComplexity int, representations []map[string]interface{}) int
	}

	RawMedia struct {
		Failed           func(childComplexity int) int
		ID               func(childComplexity int) int
		OriginalFileName func(childComplexity int) int
		Progress         func(childComplexity int) int
	}

	RemoveCategoryAlternativeTitlePayload struct {
		Category func(childComplexity int) int
	}

	RemoveClubSlugAliasPayload struct {
		Club func(childComplexity int) int
	}

	RemovePostContentPayload struct {
		Post func(childComplexity int) int
	}

	Resource struct {
		Failed         func(childComplexity int) int
		Height         func(childComplexity int) int
		ID             func(childComplexity int) int
		Preview        func(childComplexity int) int
		Processed      func(childComplexity int) int
		Progress       func(childComplexity int) int
		Type           func(childComplexity int) int
		Urls           func(childComplexity int) int
		VideoDuration  func(childComplexity int) int
		VideoNoAudio   func(childComplexity int) int
		VideoThumbnail func(childComplexity int) int
		Width          func(childComplexity int) int
	}

	ResourceProgress struct {
		ID func(childComplexity int) int
	}

	ResourceUrl struct {
		MimeType func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	RouletteGameState struct {
		DiceOne   func(childComplexity int) int
		DiceThree func(childComplexity int) int
		DiceTwo   func(childComplexity int) int
		ID        func(childComplexity int) int
		Post      func(childComplexity int) int
	}

	RouletteStatus struct {
		GameSession  func(childComplexity int) int
		GameState    func(childComplexity int) int
		Score        func(childComplexity int) int
		TotalDoubles func(childComplexity int) int
		TotalRolls   func(childComplexity int) int
	}

	SearchConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SearchEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Series struct {
		Banner            func(childComplexity int) int
		BannerMedia       func(childComplexity int) int
		Characters        func(childComplexity int, after *string, before *string, first *int, last *int, slugs []string, name *string, sortBy types.CharactersSort) int
		ID                func(childComplexity int) int
		Posts             func(childComplexity int, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, characterSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) int
		Reference         func(childComplexity int) int
		Slug              func(childComplexity int) int
		Thumbnail         func(childComplexity int) int
		Title             func(childComplexity int, locale *string) int
		TitleTranslations func(childComplexity int) int
		TotalLikes        func(childComplexity int) int
		TotalPosts        func(childComplexity int) int
	}

	SeriesConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SeriesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SpinRoulettePayload struct {
		RouletteGameState func(childComplexity int) int
	}

	SubmitPostPayload struct {
		Post func(childComplexity int) int
	}

	SuspendClubPayload struct {
		Club func(childComplexity int) int
	}

	TerminateClubPayload struct {
		Club func(childComplexity int) int
	}

	Topic struct {
		Banner                  func(childComplexity int) int
		BannerMedia             func(childComplexity int) int
		Categories              func(childComplexity int, after *string, before *string, first *int, last *int, slugs []string, title *string, sortBy types.CategoriesSort) int
		Description             func(childComplexity int, locale *string) int
		DescriptionTranslations func(childComplexity int) int
		ID                      func(childComplexity int) int
		Reference               func(childComplexity int) int
		Slug                    func(childComplexity int) int
		Title                   func(childComplexity int, locale *string) int
		TitleTranslations       func(childComplexity int) int
		Weight                  func(childComplexity int) int
	}

	TopicConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TopicEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TransferClubOwnershipPayload struct {
		Club func(childComplexity int) int
	}

	Translation struct {
		Language func(childComplexity int) int
		Text     func(childComplexity int) int
	}

	UnArchivePostPayload struct {
		Post func(childComplexity int) int
	}

	UnSuspendClubPayload struct {
		Club func(childComplexity int) int
	}

	UnTerminateClubPayload struct {
		Club func(childComplexity int) int
	}

	UndoLikePostPayload struct {
		PostLikeID func(childComplexity int) int
	}

	UpdateAudienceBannerPayload struct {
		Audience func(childComplexity int) int
	}

	UpdateAudienceIsStandardPayload struct {
		Audience func(childComplexity int) int
	}

	UpdateAudienceTitlePayload struct {
		Audience func(childComplexity int) int
	}

	UpdateCategoryTitlePayload struct {
		Category func(childComplexity int) int
	}

	UpdateCategoryTopicPayload struct {
		Category func(childComplexity int) int
	}

	UpdateCharacterNamePayload struct {
		Character func(childComplexity int) int
	}

	UpdateClubCharactersLimitPayload struct {
		Club func(childComplexity int) int
	}

	UpdateClubNamePayload struct {
		Club func(childComplexity int) int
	}

	UpdateClubThumbnailPayload struct {
		Club func(childComplexity int) int
	}

	UpdateCurationProfileAudiencePayload struct {
		CurationProfile func(childComplexity int) int
	}

	UpdateCurationProfileCategoryPayload struct {
		CurationProfile func(childComplexity int) int
	}

	UpdateCurationProfileDateOfBirthPayload struct {
		CurationProfile func(childComplexity int) int
	}

	UpdatePostAudiencePayload struct {
		Post func(childComplexity int) int
	}

	UpdatePostCategoriesPayload struct {
		Post func(childComplexity int) int
	}

	UpdatePostCharactersPayload struct {
		Post func(childComplexity int) int
	}

	UpdatePostClubPayload struct {
		Post func(childComplexity int) int
	}

	UpdatePostContentIsSupporterOnlyPayload struct {
		Post func(childComplexity int) int
	}

	UpdatePostContentOrderPayload struct {
		Post func(childComplexity int) int
	}

	UpdatePostDescriptionPayload struct {
		Post func(childComplexity int) int
	}

	UpdateSeriesTitlePayload struct {
		Series func(childComplexity int) int
	}

	UpdateTopicBannerPayload struct {
		Topic func(childComplexity int) int
	}

	UpdateTopicDescriptionPayload struct {
		Topic func(childComplexity int) int
	}

	UpdateTopicTitlePayload struct {
		Topic func(childComplexity int) int
	}

	UpdateTopicWeightPayload struct {
		Topic func(childComplexity int) int
	}

	VideoMedia struct {
		AspectRatio func(childComplexity int) int
		Containers  func(childComplexity int) int
		Cover       func(childComplexity int) int
		Duration    func(childComplexity int) int
		HasAudio    func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	_Service struct {
		SDL func(childComplexity int) int
	}
}

type AccountResolver interface {
	ClubsLimit(ctx context.Context, obj *types.Account) (int, error)
	ClubsCount(ctx context.Context, obj *types.Account) (int, error)
	HasNonTerminatedClubs(ctx context.Context, obj *types.Account) (bool, error)
	Clubs(ctx context.Context, obj *types.Account, after *string, before *string, first *int, last *int, slugs []string, name *string, sortBy types.ClubsSort) (*types.ClubConnection, error)
	ClubMembershipsLimit(ctx context.Context, obj *types.Account) (int, error)
	ClubMembershipsCount(ctx context.Context, obj *types.Account) (int, error)
	ClubMemberships(ctx context.Context, obj *types.Account, after *string, before *string, first *int, last *int, supporter bool, sortBy types.ClubMembersSort) (*types.ClubMemberConnection, error)
	CurationProfile(ctx context.Context, obj *types.Account) (*types.CurationProfile, error)
	ClubMembersPostsFeed(ctx context.Context, obj *types.Account, after *string, before *string, first *int, last *int) (*types.PostConnection, error)
	Posts(ctx context.Context, obj *types.Account, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) (*types.PostConnection, error)
	LikedPosts(ctx context.Context, obj *types.Account, after *string, before *string, first *int, last *int) (*types.PostConnection, error)
}
type AudienceResolver interface {
	Title(ctx context.Context, obj *types.Audience, locale *string) (string, error)

	Posts(ctx context.Context, obj *types.Audience, after *string, before *string, first *int, last *int, categorySlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) (*types.PostConnection, error)
}
type AudienceCurationProfileResolver interface {
	Audiences(ctx context.Context, obj *types.AudienceCurationProfile) ([]*types.Audience, error)
}
type CategoryResolver interface {
	Title(ctx context.Context, obj *types.Category, locale *string) (string, error)

	Topic(ctx context.Context, obj *types.Category) (*types.Topic, error)
	Posts(ctx context.Context, obj *types.Category, after *string, before *string, first *int, last *int, audienceSlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) (*types.PostConnection, error)
}
type CategoryCurationProfileResolver interface {
	Categories(ctx context.Context, obj *types.CategoryCurationProfile) ([]*types.Category, error)
}
type CharacterResolver interface {
	Name(ctx context.Context, obj *types.Character, locale *string) (string, error)

	Club(ctx context.Context, obj *types.Character) (*types.Club, error)
	Posts(ctx context.Context, obj *types.Character, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) (*types.PostConnection, error)
}
type ClubResolver interface {
	SuspensionLogs(ctx context.Context, obj *types.Club, after *string, before *string, first *int, last *int) (*types.ClubSuspensionLogConnection, error)

	ViewerMember(ctx context.Context, obj *types.Club) (*types.ClubMember, error)
	MembersIsSupporterCount(ctx context.Context, obj *types.Club) (int, error)

	Members(ctx context.Context, obj *types.Club, after *string, before *string, first *int, last *int, supporter bool, sortBy types.ClubMembersSort) (*types.ClubMemberConnection, error)

	CharactersCount(ctx context.Context, obj *types.Club) (int, error)
	Characters(ctx context.Context, obj *types.Club, after *string, before *string, first *int, last *int, slugs []string, name *string, sortBy types.CharactersSort) (*types.CharacterConnection, error)
	Posts(ctx context.Context, obj *types.Club, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) (*types.PostConnection, error)
}
type ClubMemberResolver interface {
	Club(ctx context.Context, obj *types.ClubMember) (*types.Club, error)
}
type EntityResolver interface {
	FindAccountByID(ctx context.Context, id relay.ID) (*types.Account, error)
	FindAudienceByID(ctx context.Context, id relay.ID) (*types.Audience, error)
	FindCategoryByID(ctx context.Context, id relay.ID) (*types.Category, error)
	FindCharacterByID(ctx context.Context, id relay.ID) (*types.Character, error)
	FindClubByID(ctx context.Context, id relay.ID) (*types.Club, error)
	FindClubMemberByID(ctx context.Context, id relay.ID) (*types.ClubMember, error)
	FindPostByID(ctx context.Context, id relay.ID) (*types.Post, error)
	FindPostLikeByID(ctx context.Context, id relay.ID) (*types.PostLike, error)
	FindSeriesByID(ctx context.Context, id relay.ID) (*types.Series, error)
	FindTopicByID(ctx context.Context, id relay.ID) (*types.Topic, error)
}
type MutationResolver interface {
	CreateCategory(ctx context.Context, input types.CreateCategoryInput) (*types.CreateCategoryPayload, error)
	UpdateCategoryTitle(ctx context.Context, input types.UpdateCategoryTitleInput) (*types.UpdateCategoryTitlePayload, error)
	UpdateCategoryTopic(ctx context.Context, input types.UpdateCategoryTopicInput) (*types.UpdateCategoryTopicPayload, error)
	AddCategoryAlternativeTitle(ctx context.Context, input types.AddCategoryAlternativeTitleInput) (*types.AddCategoryAlternativeTitlePayload, error)
	RemoveCategoryAlternativeTitle(ctx context.Context, input types.RemoveCategoryAlternativeTitleInput) (*types.RemoveCategoryAlternativeTitlePayload, error)
	CreateAudience(ctx context.Context, input types.CreateAudienceInput) (*types.CreateAudiencePayload, error)
	UpdateAudienceTitle(ctx context.Context, input types.UpdateAudienceTitleInput) (*types.UpdateAudienceTitlePayload, error)
	UpdateAudienceBanner(ctx context.Context, input types.UpdateAudienceBannerInput) (*types.UpdateAudienceBannerPayload, error)
	UpdateAudienceIsStandard(ctx context.Context, input types.UpdateAudienceIsStandardInput) (*types.UpdateAudienceIsStandardPayload, error)
	CreateCharacter(ctx context.Context, input types.CreateCharacterInput) (*types.CreateCharacterPayload, error)
	UpdateCharacterName(ctx context.Context, input types.UpdateCharacterNameInput) (*types.UpdateCharacterNamePayload, error)
	JoinClub(ctx context.Context, input types.JoinClubInput) (*types.JoinClubPayload, error)
	LeaveClub(ctx context.Context, input types.LeaveClubInput) (*types.LeaveClubPayload, error)
	CreateClub(ctx context.Context, input types.CreateClubInput) (*types.CreateClubPayload, error)
	AddClubSlugAlias(ctx context.Context, input types.AddClubSlugAliasInput) (*types.AddClubSlugAliasPayload, error)
	RemoveClubSlugAlias(ctx context.Context, input types.RemoveClubSlugAliasInput) (*types.RemoveClubSlugAliasPayload, error)
	PromoteClubSlugAliasToDefault(ctx context.Context, input types.PromoteClubSlugAliasToDefaultInput) (*types.PromoteClubSlugAliasToDefaultPayload, error)
	UpdateClubName(ctx context.Context, input types.UpdateClubNameInput) (*types.UpdateClubNamePayload, error)
	UpdateClubThumbnail(ctx context.Context, input types.UpdateClubThumbnailInput) (*types.UpdateClubThumbnailPayload, error)
	SuspendClub(ctx context.Context, input types.SuspendClubInput) (*types.SuspendClubPayload, error)
	UnSuspendClub(ctx context.Context, input types.UnSuspendClubInput) (*types.UnSuspendClubPayload, error)
	TerminateClub(ctx context.Context, input types.TerminateClubInput) (*types.TerminateClubPayload, error)
	UnTerminateClub(ctx context.Context, input types.UnTerminateClubInput) (*types.UnTerminateClubPayload, error)
	EnableClubSupporterOnlyPosts(ctx context.Context, input types.EnableClubSupporterOnlyPostsInput) (*types.EnableClubSupporterOnlyPostsPayload, error)
	DisableClubSupporterOnlyPosts(ctx context.Context, input types.DisableClubSupporterOnlyPostsInput) (*types.DisableClubSupporterOnlyPostsPayload, error)
	DisableClubCharacters(ctx context.Context, input types.DisableClubCharactersInput) (*types.DisableClubCharactersPayload, error)
	EnableClubCharacters(ctx context.Context, input types.EnableClubCharactersInput) (*types.EnableClubCharactersPayload, error)
	UpdateClubCharactersLimit(ctx context.Context, input types.UpdateClubCharactersLimitInput) (*types.UpdateClubCharactersLimitPayload, error)
	TransferClubOwnership(ctx context.Context, input types.TransferClubOwnershipInput) (*types.TransferClubOwnershipPayload, error)
	UpdateCurationProfileAudience(ctx context.Context, input types.UpdateCurationProfileAudienceInput) (*types.UpdateCurationProfileAudiencePayload, error)
	UpdateCurationProfileCategory(ctx context.Context, input types.UpdateCurationProfileCategoryInput) (*types.UpdateCurationProfileCategoryPayload, error)
	UpdateCurationProfileDateOfBirth(ctx context.Context, input types.UpdateCurationProfileDateOfBirthInput) (*types.UpdateCurationProfileDateOfBirthPayload, error)
	CreateGameSession(ctx context.Context, input types.CreateGameSessionInput) (*types.CreateGameSessionPayload, error)
	SpinRoulette(ctx context.Context, input types.SpinRouletteInput) (*types.SpinRoulettePayload, error)
	LikePost(ctx context.Context, input types.LikePostInput) (*types.LikePostPayload, error)
	UndoLikePost(ctx context.Context, input types.UndoLikePostInput) (*types.UndoLikePostPayload, error)
	CreatePost(ctx context.Context, input types.CreatePostInput) (*types.CreatePostPayload, error)
	UpdatePostAudience(ctx context.Context, input types.UpdatePostAudienceInput) (*types.UpdatePostAudiencePayload, error)
	AddPostContent(ctx context.Context, input types.AddPostContentInput) (*types.AddPostContentPayload, error)
	RemovePostContent(ctx context.Context, input types.RemovePostContentInput) (*types.RemovePostContentPayload, error)
	UpdatePostContentOrder(ctx context.Context, input types.UpdatePostContentOrderInput) (*types.UpdatePostContentOrderPayload, error)
	UpdatePostContentIsSupporterOnly(ctx context.Context, input types.UpdatePostContentIsSupporterOnlyInput) (*types.UpdatePostContentIsSupporterOnlyPayload, error)
	UpdatePostCharacters(ctx context.Context, input types.UpdatePostCharactersInput) (*types.UpdatePostCharactersPayload, error)
	UpdatePostCategories(ctx context.Context, input types.UpdatePostCategoriesInput) (*types.UpdatePostCategoriesPayload, error)
	UpdatePostDescription(ctx context.Context, input types.UpdatePostDescriptionInput) (*types.UpdatePostDescriptionPayload, error)
	SubmitPost(ctx context.Context, input types.SubmitPostInput) (*types.SubmitPostPayload, error)
	DeletePost(ctx context.Context, input types.DeletePostInput) (*types.DeletePostPayload, error)
	ArchivePost(ctx context.Context, input types.ArchivePostInput) (*types.ArchivePostPayload, error)
	UnArchivePost(ctx context.Context, input types.UnArchivePostInput) (*types.UnArchivePostPayload, error)
	CreateSeries(ctx context.Context, input types.CreateSeriesInput) (*types.CreateSeriesPayload, error)
	UpdateSeriesTitle(ctx context.Context, input types.UpdateSeriesTitleInput) (*types.UpdateSeriesTitlePayload, error)
	CreateTopic(ctx context.Context, input types.CreateTopicInput) (*types.CreateTopicPayload, error)
	UpdateTopicTitle(ctx context.Context, input types.UpdateTopicTitleInput) (*types.UpdateTopicTitlePayload, error)
	UpdateTopicDescription(ctx context.Context, input types.UpdateTopicDescriptionInput) (*types.UpdateTopicDescriptionPayload, error)
	UpdateTopicWeight(ctx context.Context, input types.UpdateTopicWeightInput) (*types.UpdateTopicWeightPayload, error)
	UpdateTopicBanner(ctx context.Context, input types.UpdateTopicBannerInput) (*types.UpdateTopicBannerPayload, error)
}
type PostResolver interface {
	Club(ctx context.Context, obj *types.Post) (*types.Club, error)

	Description(ctx context.Context, obj *types.Post, locale *string) (string, error)

	SuggestedPosts(ctx context.Context, obj *types.Post, after *string, before *string, first *int, last *int) (*types.PostConnection, error)
	Audience(ctx context.Context, obj *types.Post) (*types.Audience, error)
	Categories(ctx context.Context, obj *types.Post) ([]*types.Category, error)
	Characters(ctx context.Context, obj *types.Post) ([]*types.Character, error)

	ViewerLiked(ctx context.Context, obj *types.Post) (*types.PostLike, error)
}
type QueryResolver interface {
	Categories(ctx context.Context, after *string, before *string, first *int, last *int, slugs []string, title *string, excludeEmpty bool, sortBy types.CategoriesSort) (*types.CategoryConnection, error)
	Category(ctx context.Context, slug string) (*types.Category, error)
	Audiences(ctx context.Context, after *string, before *string, first *int, last *int, slugs []string, title *string, sortBy types.AudiencesSort) (*types.AudienceConnection, error)
	Audience(ctx context.Context, slug string) (*types.Audience, error)
	Characters(ctx context.Context, after *string, before *string, first *int, last *int, clubCharacters *bool, slugs []string, seriesSlug *string, clubSlug *string, name *string, excludeEmpty bool, sortBy types.CharactersSort) (*types.CharacterConnection, error)
	Character(ctx context.Context, slug string, seriesSlug *string, clubSlug *string) (*types.Character, error)
	DiscoverClubs(ctx context.Context, after *string, before *string, first *int, last *int) (*types.ClubConnection, error)
	Clubs(ctx context.Context, after *string, before *string, first *int, last *int, slugs []string, name *string, suspended *bool, terminated *bool, excludeEmpty bool, sortBy types.ClubsSort) (*types.ClubConnection, error)
	Club(ctx context.Context, slug string) (*types.Club, error)
	GameSessionStatus(ctx context.Context, reference string) (types.GameSessionStatus, error)
	Search(ctx context.Context, after *string, before *string, first *int, last *int, query string) (*types.SearchConnection, error)
	PostsFeed(ctx context.Context, after *string, before *string, first *int, last *int, seed *string) (*types.PostConnection, error)
	Post(ctx context.Context, reference string) (*types.Post, error)
	Posts(ctx context.Context, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, characterSlugs []string, seriesSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) (*types.PostConnection, error)
	Series(ctx context.Context, after *string, before *string, first *int, last *int, slugs []string, title *string, excludeEmpty bool, sortBy types.SeriesSort) (*types.SeriesConnection, error)
	Serial(ctx context.Context, slug string) (*types.Series, error)
	Topics(ctx context.Context, after *string, before *string, first *int, last *int) (*types.TopicConnection, error)
	Topic(ctx context.Context, slug string) (*types.Topic, error)
}
type RouletteGameStateResolver interface {
	Post(ctx context.Context, obj *types.RouletteGameState) (*types.Post, error)
}
type SeriesResolver interface {
	Title(ctx context.Context, obj *types.Series, locale *string) (string, error)

	Characters(ctx context.Context, obj *types.Series, after *string, before *string, first *int, last *int, slugs []string, name *string, sortBy types.CharactersSort) (*types.CharacterConnection, error)
	Posts(ctx context.Context, obj *types.Series, after *string, before *string, first *int, last *int, audienceSlugs []string, categorySlugs []string, characterSlugs []string, state *types.PostState, supporterOnlyStatus []types.SupporterOnlyStatus, seed *string, sortBy types.PostsSort) (*types.PostConnection, error)
}
type TopicResolver interface {
	Title(ctx context.Context, obj *types.Topic, locale *string) (string, error)

	Description(ctx context.Context, obj *types.Topic, locale *string) (string, error)

	Categories(ctx context.Context, obj *types.Topic, after *string, before *string, first *int, last *int, slugs []string, title *string, sortBy types.CategoriesSort) (*types.CategoryConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Account.clubMembersPostsFeed":
		if e.complexity.Account.ClubMembersPostsFeed == nil {
			break
		}

		args, err := ec.field_Account_clubMembersPostsFeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.ClubMembersPostsFeed(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Account.clubMemberships":
		if e.complexity.Account.ClubMemberships == nil {
			break
		}

		args, err := ec.field_Account_clubMemberships_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.ClubMemberships(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["supporter"].(bool), args["sortBy"].(types.ClubMembersSort)), true

	case "Account.clubMembershipsCount":
		if e.complexity.Account.ClubMembershipsCount == nil {
			break
		}

		return e.complexity.Account.ClubMembershipsCount(childComplexity), true

	case "Account.clubMembershipsLimit":
		if e.complexity.Account.ClubMembershipsLimit == nil {
			break
		}

		return e.complexity.Account.ClubMembershipsLimit(childComplexity), true

	case "Account.clubs":
		if e.complexity.Account.Clubs == nil {
			break
		}

		args, err := ec.field_Account_clubs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.Clubs(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["slugs"].([]string), args["name"].(*string), args["sortBy"].(types.ClubsSort)), true

	case "Account.clubsCount":
		if e.complexity.Account.ClubsCount == nil {
			break
		}

		return e.complexity.Account.ClubsCount(childComplexity), true

	case "Account.clubsLimit":
		if e.complexity.Account.ClubsLimit == nil {
			break
		}

		return e.complexity.Account.ClubsLimit(childComplexity), true

	case "Account.curationProfile":
		if e.complexity.Account.CurationProfile == nil {
			break
		}

		return e.complexity.Account.CurationProfile(childComplexity), true

	case "Account.hasNonTerminatedClubs":
		if e.complexity.Account.HasNonTerminatedClubs == nil {
			break
		}

		return e.complexity.Account.HasNonTerminatedClubs(childComplexity), true

	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.likedPosts":
		if e.complexity.Account.LikedPosts == nil {
			break
		}

		args, err := ec.field_Account_likedPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.LikedPosts(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Account.posts":
		if e.complexity.Account.Posts == nil {
			break
		}

		args, err := ec.field_Account_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.Posts(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["audienceSlugs"].([]string), args["categorySlugs"].([]string), args["characterSlugs"].([]string), args["seriesSlugs"].([]string), args["state"].(*types.PostState), args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), args["seed"].(*string), args["sortBy"].(types.PostsSort)), true

	case "AddCategoryAlternativeTitlePayload.category":
		if e.complexity.AddCategoryAlternativeTitlePayload.Category == nil {
			break
		}

		return e.complexity.AddCategoryAlternativeTitlePayload.Category(childComplexity), true

	case "AddClubSlugAliasPayload.club":
		if e.complexity.AddClubSlugAliasPayload.Club == nil {
			break
		}

		return e.complexity.AddClubSlugAliasPayload.Club(childComplexity), true

	case "AddClubSlugAliasPayload.validation":
		if e.complexity.AddClubSlugAliasPayload.Validation == nil {
			break
		}

		return e.complexity.AddClubSlugAliasPayload.Validation(childComplexity), true

	case "AddPostContentPayload.post":
		if e.complexity.AddPostContentPayload.Post == nil {
			break
		}

		return e.complexity.AddPostContentPayload.Post(childComplexity), true

	case "ArchivePostPayload.post":
		if e.complexity.ArchivePostPayload.Post == nil {
			break
		}

		return e.complexity.ArchivePostPayload.Post(childComplexity), true

	case "AspectRatio.height":
		if e.complexity.AspectRatio.Height == nil {
			break
		}

		return e.complexity.AspectRatio.Height(childComplexity), true

	case "AspectRatio.width":
		if e.complexity.AspectRatio.Width == nil {
			break
		}

		return e.complexity.AspectRatio.Width(childComplexity), true

	case "Audience.banner":
		if e.complexity.Audience.Banner == nil {
			break
		}

		return e.complexity.Audience.Banner(childComplexity), true

	case "Audience.bannerMedia":
		if e.complexity.Audience.BannerMedia == nil {
			break
		}

		return e.complexity.Audience.BannerMedia(childComplexity), true

	case "Audience.id":
		if e.complexity.Audience.ID == nil {
			break
		}

		return e.complexity.Audience.ID(childComplexity), true

	case "Audience.posts":
		if e.complexity.Audience.Posts == nil {
			break
		}

		args, err := ec.field_Audience_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Audience.Posts(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["categorySlugs"].([]string), args["characterSlugs"].([]string), args["seriesSlugs"].([]string), args["state"].(*types.PostState), args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), args["seed"].(*string), args["sortBy"].(types.PostsSort)), true

	case "Audience.reference":
		if e.complexity.Audience.Reference == nil {
			break
		}

		return e.complexity.Audience.Reference(childComplexity), true

	case "Audience.slug":
		if e.complexity.Audience.Slug == nil {
			break
		}

		return e.complexity.Audience.Slug(childComplexity), true

	case "Audience.standard":
		if e.complexity.Audience.Standard == nil {
			break
		}

		return e.complexity.Audience.Standard(childComplexity), true

	case "Audience.thumbnail":
		if e.complexity.Audience.Thumbnail == nil {
			break
		}

		return e.complexity.Audience.Thumbnail(childComplexity), true

	case "Audience.title":
		if e.complexity.Audience.Title == nil {
			break
		}

		args, err := ec.field_Audience_title_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Audience.Title(childComplexity, args["locale"].(*string)), true

	case "Audience.titleTranslations":
		if e.complexity.Audience.TitleTranslations == nil {
			break
		}

		return e.complexity.Audience.TitleTranslations(childComplexity), true

	case "Audience.totalLikes":
		if e.complexity.Audience.TotalLikes == nil {
			break
		}

		return e.complexity.Audience.TotalLikes(childComplexity), true

	case "Audience.totalPosts":
		if e.complexity.Audience.TotalPosts == nil {
			break
		}

		return e.complexity.Audience.TotalPosts(childComplexity), true

	case "AudienceConnection.edges":
		if e.complexity.AudienceConnection.Edges == nil {
			break
		}

		return e.complexity.AudienceConnection.Edges(childComplexity), true

	case "AudienceConnection.pageInfo":
		if e.complexity.AudienceConnection.PageInfo == nil {
			break
		}

		return e.complexity.AudienceConnection.PageInfo(childComplexity), true

	case "AudienceCurationProfile.audiences":
		if e.complexity.AudienceCurationProfile.Audiences == nil {
			break
		}

		return e.complexity.AudienceCurationProfile.Audiences(childComplexity), true

	case "AudienceCurationProfile.completed":
		if e.complexity.AudienceCurationProfile.Completed == nil {
			break
		}

		return e.complexity.AudienceCurationProfile.Completed(childComplexity), true

	case "AudienceCurationProfile.skipped":
		if e.complexity.AudienceCurationProfile.Skipped == nil {
			break
		}

		return e.complexity.AudienceCurationProfile.Skipped(childComplexity), true

	case "AudienceEdge.cursor":
		if e.complexity.AudienceEdge.Cursor == nil {
			break
		}

		return e.complexity.AudienceEdge.Cursor(childComplexity), true

	case "AudienceEdge.node":
		if e.complexity.AudienceEdge.Node == nil {
			break
		}

		return e.complexity.AudienceEdge.Node(childComplexity), true

	case "Category.alternativeTitles":
		if e.complexity.Category.AlternativeTitles == nil {
			break
		}

		return e.complexity.Category.AlternativeTitles(childComplexity), true

	case "Category.banner":
		if e.complexity.Category.Banner == nil {
			break
		}

		return e.complexity.Category.Banner(childComplexity), true

	case "Category.bannerMedia":
		if e.complexity.Category.BannerMedia == nil {
			break
		}

		return e.complexity.Category.BannerMedia(childComplexity), true

	case "Category.id":
		if e.complexity.Category.ID == nil {
			break
		}

		return e.complexity.Category.ID(childComplexity), true

	case "Category.posts":
		if e.complexity.Category.Posts == nil {
			break
		}

		args, err := ec.field_Category_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Category.Posts(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["audienceSlugs"].([]string), args["characterSlugs"].([]string), args["seriesSlugs"].([]string), args["state"].(*types.PostState), args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), args["seed"].(*string), args["sortBy"].(types.PostsSort)), true

	case "Category.reference":
		if e.complexity.Category.Reference == nil {
			break
		}

		return e.complexity.Category.Reference(childComplexity), true

	case "Category.slug":
		if e.complexity.Category.Slug == nil {
			break
		}

		return e.complexity.Category.Slug(childComplexity), true

	case "Category.thumbnail":
		if e.complexity.Category.Thumbnail == nil {
			break
		}

		return e.complexity.Category.Thumbnail(childComplexity), true

	case "Category.title":
		if e.complexity.Category.Title == nil {
			break
		}

		args, err := ec.field_Category_title_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Category.Title(childComplexity, args["locale"].(*string)), true

	case "Category.titleTranslations":
		if e.complexity.Category.TitleTranslations == nil {
			break
		}

		return e.complexity.Category.TitleTranslations(childComplexity), true

	case "Category.topic":
		if e.complexity.Category.Topic == nil {
			break
		}

		return e.complexity.Category.Topic(childComplexity), true

	case "Category.totalLikes":
		if e.complexity.Category.TotalLikes == nil {
			break
		}

		return e.complexity.Category.TotalLikes(childComplexity), true

	case "Category.totalPosts":
		if e.complexity.Category.TotalPosts == nil {
			break
		}

		return e.complexity.Category.TotalPosts(childComplexity), true

	case "CategoryConnection.edges":
		if e.complexity.CategoryConnection.Edges == nil {
			break
		}

		return e.complexity.CategoryConnection.Edges(childComplexity), true

	case "CategoryConnection.pageInfo":
		if e.complexity.CategoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.CategoryConnection.PageInfo(childComplexity), true

	case "CategoryCurationProfile.categories":
		if e.complexity.CategoryCurationProfile.Categories == nil {
			break
		}

		return e.complexity.CategoryCurationProfile.Categories(childComplexity), true

	case "CategoryCurationProfile.completed":
		if e.complexity.CategoryCurationProfile.Completed == nil {
			break
		}

		return e.complexity.CategoryCurationProfile.Completed(childComplexity), true

	case "CategoryCurationProfile.skipped":
		if e.complexity.CategoryCurationProfile.Skipped == nil {
			break
		}

		return e.complexity.CategoryCurationProfile.Skipped(childComplexity), true

	case "CategoryEdge.cursor":
		if e.complexity.CategoryEdge.Cursor == nil {
			break
		}

		return e.complexity.CategoryEdge.Cursor(childComplexity), true

	case "CategoryEdge.node":
		if e.complexity.CategoryEdge.Node == nil {
			break
		}

		return e.complexity.CategoryEdge.Node(childComplexity), true

	case "Character.banner":
		if e.complexity.Character.Banner == nil {
			break
		}

		return e.complexity.Character.Banner(childComplexity), true

	case "Character.bannerMedia":
		if e.complexity.Character.BannerMedia == nil {
			break
		}

		return e.complexity.Character.BannerMedia(childComplexity), true

	case "Character.club":
		if e.complexity.Character.Club == nil {
			break
		}

		return e.complexity.Character.Club(childComplexity), true

	case "Character.id":
		if e.complexity.Character.ID == nil {
			break
		}

		return e.complexity.Character.ID(childComplexity), true

	case "Character.name":
		if e.complexity.Character.Name == nil {
			break
		}

		args, err := ec.field_Character_name_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Character.Name(childComplexity, args["locale"].(*string)), true

	case "Character.nameTranslations":
		if e.complexity.Character.NameTranslations == nil {
			break
		}

		return e.complexity.Character.NameTranslations(childComplexity), true

	case "Character.posts":
		if e.complexity.Character.Posts == nil {
			break
		}

		args, err := ec.field_Character_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Character.Posts(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["audienceSlugs"].([]string), args["categorySlugs"].([]string), args["state"].(*types.PostState), args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), args["seed"].(*string), args["sortBy"].(types.PostsSort)), true

	case "Character.reference":
		if e.complexity.Character.Reference == nil {
			break
		}

		return e.complexity.Character.Reference(childComplexity), true

	case "Character.series":
		if e.complexity.Character.Series == nil {
			break
		}

		return e.complexity.Character.Series(childComplexity), true

	case "Character.slug":
		if e.complexity.Character.Slug == nil {
			break
		}

		return e.complexity.Character.Slug(childComplexity), true

	case "Character.thumbnail":
		if e.complexity.Character.Thumbnail == nil {
			break
		}

		return e.complexity.Character.Thumbnail(childComplexity), true

	case "Character.totalLikes":
		if e.complexity.Character.TotalLikes == nil {
			break
		}

		return e.complexity.Character.TotalLikes(childComplexity), true

	case "Character.totalPosts":
		if e.complexity.Character.TotalPosts == nil {
			break
		}

		return e.complexity.Character.TotalPosts(childComplexity), true

	case "CharacterConnection.edges":
		if e.complexity.CharacterConnection.Edges == nil {
			break
		}

		return e.complexity.CharacterConnection.Edges(childComplexity), true

	case "CharacterConnection.pageInfo":
		if e.complexity.CharacterConnection.PageInfo == nil {
			break
		}

		return e.complexity.CharacterConnection.PageInfo(childComplexity), true

	case "CharacterEdge.cursor":
		if e.complexity.CharacterEdge.Cursor == nil {
			break
		}

		return e.complexity.CharacterEdge.Cursor(childComplexity), true

	case "CharacterEdge.node":
		if e.complexity.CharacterEdge.Node == nil {
			break
		}

		return e.complexity.CharacterEdge.Node(childComplexity), true

	case "Club.banner":
		if e.complexity.Club.Banner == nil {
			break
		}

		return e.complexity.Club.Banner(childComplexity), true

	case "Club.bannerMedia":
		if e.complexity.Club.BannerMedia == nil {
			break
		}

		return e.complexity.Club.BannerMedia(childComplexity), true

	case "Club.canCreateSupporterOnlyPosts":
		if e.complexity.Club.CanCreateSupporterOnlyPosts == nil {
			break
		}

		return e.complexity.Club.CanCreateSupporterOnlyPosts(childComplexity), true

	case "Club.canSupport":
		if e.complexity.Club.CanSupport == nil {
			break
		}

		return e.complexity.Club.CanSupport(childComplexity), true

	case "Club.characters":
		if e.complexity.Club.Characters == nil {
			break
		}

		args, err := ec.field_Club_characters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Club.Characters(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["slugs"].([]string), args["name"].(*string), args["sortBy"].(types.CharactersSort)), true

	case "Club.charactersCount":
		if e.complexity.Club.CharactersCount == nil {
			break
		}

		return e.complexity.Club.CharactersCount(childComplexity), true

	case "Club.charactersEnabled":
		if e.complexity.Club.CharactersEnabled == nil {
			break
		}

		return e.complexity.Club.CharactersEnabled(childComplexity), true

	case "Club.charactersLimit":
		if e.complexity.Club.CharactersLimit == nil {
			break
		}

		return e.complexity.Club.CharactersLimit(childComplexity), true

	case "Club.id":
		if e.complexity.Club.ID == nil {
			break
		}

		return e.complexity.Club.ID(childComplexity), true

	case "Club.links":
		if e.complexity.Club.Links == nil {
			break
		}

		return e.complexity.Club.Links(childComplexity), true

	case "Club.members":
		if e.complexity.Club.Members == nil {
			break
		}

		args, err := ec.field_Club_members_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Club.Members(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["supporter"].(bool), args["sortBy"].(types.ClubMembersSort)), true

	case "Club.membersCount":
		if e.complexity.Club.MembersCount == nil {
			break
		}

		return e.complexity.Club.MembersCount(childComplexity), true

	case "Club.membersIsSupporterCount":
		if e.complexity.Club.MembersIsSupporterCount == nil {
			break
		}

		return e.complexity.Club.MembersIsSupporterCount(childComplexity), true

	case "Club.name":
		if e.complexity.Club.Name == nil {
			break
		}

		return e.complexity.Club.Name(childComplexity), true

	case "Club.nextSupporterPostTime":
		if e.complexity.Club.NextSupporterPostTime == nil {
			break
		}

		return e.complexity.Club.NextSupporterPostTime(childComplexity), true

	case "Club.owner":
		if e.complexity.Club.Owner == nil {
			break
		}

		return e.complexity.Club.Owner(childComplexity), true

	case "Club.posts":
		if e.complexity.Club.Posts == nil {
			break
		}

		args, err := ec.field_Club_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Club.Posts(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["audienceSlugs"].([]string), args["categorySlugs"].([]string), args["characterSlugs"].([]string), args["seriesSlugs"].([]string), args["state"].(*types.PostState), args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), args["seed"].(*string), args["sortBy"].(types.PostsSort)), true

	case "Club.reference":
		if e.complexity.Club.Reference == nil {
			break
		}

		return e.complexity.Club.Reference(childComplexity), true

	case "Club.slug":
		if e.complexity.Club.Slug == nil {
			break
		}

		return e.complexity.Club.Slug(childComplexity), true

	case "Club.slugAliases":
		if e.complexity.Club.SlugAliases == nil {
			break
		}

		return e.complexity.Club.SlugAliases(childComplexity), true

	case "Club.slugAliasesLimit":
		if e.complexity.Club.SlugAliasesLimit == nil {
			break
		}

		return e.complexity.Club.SlugAliasesLimit(childComplexity), true

	case "Club.suspension":
		if e.complexity.Club.Suspension == nil {
			break
		}

		return e.complexity.Club.Suspension(childComplexity), true

	case "Club.suspensionLogs":
		if e.complexity.Club.SuspensionLogs == nil {
			break
		}

		args, err := ec.field_Club_suspensionLogs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Club.SuspensionLogs(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Club.termination":
		if e.complexity.Club.Termination == nil {
			break
		}

		return e.complexity.Club.Termination(childComplexity), true

	case "Club.thumbnail":
		if e.complexity.Club.Thumbnail == nil {
			break
		}

		return e.complexity.Club.Thumbnail(childComplexity), true

	case "Club.thumbnailMedia":
		if e.complexity.Club.ThumbnailMedia == nil {
			break
		}

		return e.complexity.Club.ThumbnailMedia(childComplexity), true

	case "Club.totalLikes":
		if e.complexity.Club.TotalLikes == nil {
			break
		}

		return e.complexity.Club.TotalLikes(childComplexity), true

	case "Club.totalPosts":
		if e.complexity.Club.TotalPosts == nil {
			break
		}

		return e.complexity.Club.TotalPosts(childComplexity), true

	case "Club.viewerIsOwner":
		if e.complexity.Club.ViewerIsOwner == nil {
			break
		}

		return e.complexity.Club.ViewerIsOwner(childComplexity), true

	case "Club.viewerMember":
		if e.complexity.Club.ViewerMember == nil {
			break
		}

		return e.complexity.Club.ViewerMember(childComplexity), true

	case "ClubConnection.edges":
		if e.complexity.ClubConnection.Edges == nil {
			break
		}

		return e.complexity.ClubConnection.Edges(childComplexity), true

	case "ClubConnection.pageInfo":
		if e.complexity.ClubConnection.PageInfo == nil {
			break
		}

		return e.complexity.ClubConnection.PageInfo(childComplexity), true

	case "ClubEdge.cursor":
		if e.complexity.ClubEdge.Cursor == nil {
			break
		}

		return e.complexity.ClubEdge.Cursor(childComplexity), true

	case "ClubEdge.node":
		if e.complexity.ClubEdge.Node == nil {
			break
		}

		return e.complexity.ClubEdge.Node(childComplexity), true

	case "ClubIssuedSuspensionLog.account":
		if e.complexity.ClubIssuedSuspensionLog.Account == nil {
			break
		}

		return e.complexity.ClubIssuedSuspensionLog.Account(childComplexity), true

	case "ClubIssuedSuspensionLog.id":
		if e.complexity.ClubIssuedSuspensionLog.ID == nil {
			break
		}

		return e.complexity.ClubIssuedSuspensionLog.ID(childComplexity), true

	case "ClubIssuedSuspensionLog.reason":
		if e.complexity.ClubIssuedSuspensionLog.Reason == nil {
			break
		}

		return e.complexity.ClubIssuedSuspensionLog.Reason(childComplexity), true

	case "ClubIssuedSuspensionLog.suspendedUntil":
		if e.complexity.ClubIssuedSuspensionLog.SuspendedUntil == nil {
			break
		}

		return e.complexity.ClubIssuedSuspensionLog.SuspendedUntil(childComplexity), true

	case "ClubLink.url":
		if e.complexity.ClubLink.URL == nil {
			break
		}

		return e.complexity.ClubLink.URL(childComplexity), true

	case "ClubMember.account":
		if e.complexity.ClubMember.Account == nil {
			break
		}

		return e.complexity.ClubMember.Account(childComplexity), true

	case "ClubMember.club":
		if e.complexity.ClubMember.Club == nil {
			break
		}

		return e.complexity.ClubMember.Club(childComplexity), true

	case "ClubMember.id":
		if e.complexity.ClubMember.ID == nil {
			break
		}

		return e.complexity.ClubMember.ID(childComplexity), true

	case "ClubMember.isSupporter":
		if e.complexity.ClubMember.IsSupporter == nil {
			break
		}

		return e.complexity.ClubMember.IsSupporter(childComplexity), true

	case "ClubMember.joinedAt":
		if e.complexity.ClubMember.JoinedAt == nil {
			break
		}

		return e.complexity.ClubMember.JoinedAt(childComplexity), true

	case "ClubMember.supporterSince":
		if e.complexity.ClubMember.SupporterSince == nil {
			break
		}

		return e.complexity.ClubMember.SupporterSince(childComplexity), true

	case "ClubMemberConnection.edges":
		if e.complexity.ClubMemberConnection.Edges == nil {
			break
		}

		return e.complexity.ClubMemberConnection.Edges(childComplexity), true

	case "ClubMemberConnection.pageInfo":
		if e.complexity.ClubMemberConnection.PageInfo == nil {
			break
		}

		return e.complexity.ClubMemberConnection.PageInfo(childComplexity), true

	case "ClubMemberEdge.cursor":
		if e.complexity.ClubMemberEdge.Cursor == nil {
			break
		}

		return e.complexity.ClubMemberEdge.Cursor(childComplexity), true

	case "ClubMemberEdge.node":
		if e.complexity.ClubMemberEdge.Node == nil {
			break
		}

		return e.complexity.ClubMemberEdge.Node(childComplexity), true

	case "ClubRemovedSuspensionLog.account":
		if e.complexity.ClubRemovedSuspensionLog.Account == nil {
			break
		}

		return e.complexity.ClubRemovedSuspensionLog.Account(childComplexity), true

	case "ClubRemovedSuspensionLog.id":
		if e.complexity.ClubRemovedSuspensionLog.ID == nil {
			break
		}

		return e.complexity.ClubRemovedSuspensionLog.ID(childComplexity), true

	case "ClubSlugAlias.slug":
		if e.complexity.ClubSlugAlias.Slug == nil {
			break
		}

		return e.complexity.ClubSlugAlias.Slug(childComplexity), true

	case "ClubSuspension.expires":
		if e.complexity.ClubSuspension.Expires == nil {
			break
		}

		return e.complexity.ClubSuspension.Expires(childComplexity), true

	case "ClubSuspensionLogConnection.edges":
		if e.complexity.ClubSuspensionLogConnection.Edges == nil {
			break
		}

		return e.complexity.ClubSuspensionLogConnection.Edges(childComplexity), true

	case "ClubSuspensionLogConnection.pageInfo":
		if e.complexity.ClubSuspensionLogConnection.PageInfo == nil {
			break
		}

		return e.complexity.ClubSuspensionLogConnection.PageInfo(childComplexity), true

	case "ClubSuspensionLogEdge.cursor":
		if e.complexity.ClubSuspensionLogEdge.Cursor == nil {
			break
		}

		return e.complexity.ClubSuspensionLogEdge.Cursor(childComplexity), true

	case "ClubSuspensionLogEdge.node":
		if e.complexity.ClubSuspensionLogEdge.Node == nil {
			break
		}

		return e.complexity.ClubSuspensionLogEdge.Node(childComplexity), true

	case "ClubTermination.account":
		if e.complexity.ClubTermination.Account == nil {
			break
		}

		return e.complexity.ClubTermination.Account(childComplexity), true

	case "ColorPalette.blue":
		if e.complexity.ColorPalette.Blue == nil {
			break
		}

		return e.complexity.ColorPalette.Blue(childComplexity), true

	case "ColorPalette.green":
		if e.complexity.ColorPalette.Green == nil {
			break
		}

		return e.complexity.ColorPalette.Green(childComplexity), true

	case "ColorPalette.percent":
		if e.complexity.ColorPalette.Percent == nil {
			break
		}

		return e.complexity.ColorPalette.Percent(childComplexity), true

	case "ColorPalette.red":
		if e.complexity.ColorPalette.Red == nil {
			break
		}

		return e.complexity.ColorPalette.Red(childComplexity), true

	case "CreateAudiencePayload.audience":
		if e.complexity.CreateAudiencePayload.Audience == nil {
			break
		}

		return e.complexity.CreateAudiencePayload.Audience(childComplexity), true

	case "CreateAudiencePayload.validation":
		if e.complexity.CreateAudiencePayload.Validation == nil {
			break
		}

		return e.complexity.CreateAudiencePayload.Validation(childComplexity), true

	case "CreateCategoryPayload.category":
		if e.complexity.CreateCategoryPayload.Category == nil {
			break
		}

		return e.complexity.CreateCategoryPayload.Category(childComplexity), true

	case "CreateCategoryPayload.validation":
		if e.complexity.CreateCategoryPayload.Validation == nil {
			break
		}

		return e.complexity.CreateCategoryPayload.Validation(childComplexity), true

	case "CreateCharacterPayload.character":
		if e.complexity.CreateCharacterPayload.Character == nil {
			break
		}

		return e.complexity.CreateCharacterPayload.Character(childComplexity), true

	case "CreateCharacterPayload.validation":
		if e.complexity.CreateCharacterPayload.Validation == nil {
			break
		}

		return e.complexity.CreateCharacterPayload.Validation(childComplexity), true

	case "CreateClubPayload.club":
		if e.complexity.CreateClubPayload.Club == nil {
			break
		}

		return e.complexity.CreateClubPayload.Club(childComplexity), true

	case "CreateClubPayload.validation":
		if e.complexity.CreateClubPayload.Validation == nil {
			break
		}

		return e.complexity.CreateClubPayload.Validation(childComplexity), true

	case "CreateGameSessionPayload.gameSession":
		if e.complexity.CreateGameSessionPayload.GameSession == nil {
			break
		}

		return e.complexity.CreateGameSessionPayload.GameSession(childComplexity), true

	case "CreatePostPayload.post":
		if e.complexity.CreatePostPayload.Post == nil {
			break
		}

		return e.complexity.CreatePostPayload.Post(childComplexity), true

	case "CreateSeriesPayload.series":
		if e.complexity.CreateSeriesPayload.Series == nil {
			break
		}

		return e.complexity.CreateSeriesPayload.Series(childComplexity), true

	case "CreateSeriesPayload.validation":
		if e.complexity.CreateSeriesPayload.Validation == nil {
			break
		}

		return e.complexity.CreateSeriesPayload.Validation(childComplexity), true

	case "CreateTopicPayload.topic":
		if e.complexity.CreateTopicPayload.Topic == nil {
			break
		}

		return e.complexity.CreateTopicPayload.Topic(childComplexity), true

	case "CreateTopicPayload.validation":
		if e.complexity.CreateTopicPayload.Validation == nil {
			break
		}

		return e.complexity.CreateTopicPayload.Validation(childComplexity), true

	case "CurationProfile.audience":
		if e.complexity.CurationProfile.Audience == nil {
			break
		}

		return e.complexity.CurationProfile.Audience(childComplexity), true

	case "CurationProfile.category":
		if e.complexity.CurationProfile.Category == nil {
			break
		}

		return e.complexity.CurationProfile.Category(childComplexity), true

	case "CurationProfile.completed":
		if e.complexity.CurationProfile.Completed == nil {
			break
		}

		return e.complexity.CurationProfile.Completed(childComplexity), true

	case "CurationProfile.dateOfBirth":
		if e.complexity.CurationProfile.DateOfBirth == nil {
			break
		}

		return e.complexity.CurationProfile.DateOfBirth(childComplexity), true

	case "CurationProfile.id":
		if e.complexity.CurationProfile.ID == nil {
			break
		}

		return e.complexity.CurationProfile.ID(childComplexity), true

	case "DateOfBirthCurationProfile.completed":
		if e.complexity.DateOfBirthCurationProfile.Completed == nil {
			break
		}

		return e.complexity.DateOfBirthCurationProfile.Completed(childComplexity), true

	case "DateOfBirthCurationProfile.dateOfBirth":
		if e.complexity.DateOfBirthCurationProfile.DateOfBirth == nil {
			break
		}

		return e.complexity.DateOfBirthCurationProfile.DateOfBirth(childComplexity), true

	case "DateOfBirthCurationProfile.skipped":
		if e.complexity.DateOfBirthCurationProfile.Skipped == nil {
			break
		}

		return e.complexity.DateOfBirthCurationProfile.Skipped(childComplexity), true

	case "DeletePostPayload.postId":
		if e.complexity.DeletePostPayload.PostID == nil {
			break
		}

		return e.complexity.DeletePostPayload.PostID(childComplexity), true

	case "DisableClubCharactersPayload.club":
		if e.complexity.DisableClubCharactersPayload.Club == nil {
			break
		}

		return e.complexity.DisableClubCharactersPayload.Club(childComplexity), true

	case "DisableClubSupporterOnlyPostsPayload.club":
		if e.complexity.DisableClubSupporterOnlyPostsPayload.Club == nil {
			break
		}

		return e.complexity.DisableClubSupporterOnlyPostsPayload.Club(childComplexity), true

	case "EnableClubCharactersPayload.club":
		if e.complexity.EnableClubCharactersPayload.Club == nil {
			break
		}

		return e.complexity.EnableClubCharactersPayload.Club(childComplexity), true

	case "EnableClubSupporterOnlyPostsPayload.club":
		if e.complexity.EnableClubSupporterOnlyPostsPayload.Club == nil {
			break
		}

		return e.complexity.EnableClubSupporterOnlyPostsPayload.Club(childComplexity), true

	case "Entity.findAccountByID":
		if e.complexity.Entity.FindAccountByID == nil {
			break
		}

		args, err := ec.field_Entity_findAccountByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindAccountByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findAudienceByID":
		if e.complexity.Entity.FindAudienceByID == nil {
			break
		}

		args, err := ec.field_Entity_findAudienceByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindAudienceByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findCategoryByID":
		if e.complexity.Entity.FindCategoryByID == nil {
			break
		}

		args, err := ec.field_Entity_findCategoryByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindCategoryByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findCharacterByID":
		if e.complexity.Entity.FindCharacterByID == nil {
			break
		}

		args, err := ec.field_Entity_findCharacterByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindCharacterByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findClubByID":
		if e.complexity.Entity.FindClubByID == nil {
			break
		}

		args, err := ec.field_Entity_findClubByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindClubByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findClubMemberByID":
		if e.complexity.Entity.FindClubMemberByID == nil {
			break
		}

		args, err := ec.field_Entity_findClubMemberByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindClubMemberByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findPostByID":
		if e.complexity.Entity.FindPostByID == nil {
			break
		}

		args, err := ec.field_Entity_findPostByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindPostByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findPostLikeByID":
		if e.complexity.Entity.FindPostLikeByID == nil {
			break
		}

		args, err := ec.field_Entity_findPostLikeByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindPostLikeByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findSeriesByID":
		if e.complexity.Entity.FindSeriesByID == nil {
			break
		}

		args, err := ec.field_Entity_findSeriesByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindSeriesByID(childComplexity, args["id"].(relay.ID)), true

	case "Entity.findTopicByID":
		if e.complexity.Entity.FindTopicByID == nil {
			break
		}

		args, err := ec.field_Entity_findTopicByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindTopicByID(childComplexity, args["id"].(relay.ID)), true

	case "GameSession.gameType":
		if e.complexity.GameSession.GameType == nil {
			break
		}

		return e.complexity.GameSession.GameType(childComplexity), true

	case "GameSession.id":
		if e.complexity.GameSession.ID == nil {
			break
		}

		return e.complexity.GameSession.ID(childComplexity), true

	case "GameSession.isClosed":
		if e.complexity.GameSession.IsClosed == nil {
			break
		}

		return e.complexity.GameSession.IsClosed(childComplexity), true

	case "GameSession.reference":
		if e.complexity.GameSession.Reference == nil {
			break
		}

		return e.complexity.GameSession.Reference(childComplexity), true

	case "GameSession.seed":
		if e.complexity.GameSession.Seed == nil {
			break
		}

		return e.complexity.GameSession.Seed(childComplexity), true

	case "GameSession.viewerIsPlayer":
		if e.complexity.GameSession.ViewerIsPlayer == nil {
			break
		}

		return e.complexity.GameSession.ViewerIsPlayer(childComplexity), true

	case "HLSVideoContainer.targetDevice":
		if e.complexity.HLSVideoContainer.TargetDevice == nil {
			break
		}

		return e.complexity.HLSVideoContainer.TargetDevice(childComplexity), true

	case "HLSVideoContainer.url":
		if e.complexity.HLSVideoContainer.URL == nil {
			break
		}

		return e.complexity.HLSVideoContainer.URL(childComplexity), true

	case "ImageMedia.colorPalettes":
		if e.complexity.ImageMedia.ColorPalettes == nil {
			break
		}

		return e.complexity.ImageMedia.ColorPalettes(childComplexity), true

	case "ImageMedia.id":
		if e.complexity.ImageMedia.ID == nil {
			break
		}

		return e.complexity.ImageMedia.ID(childComplexity), true

	case "ImageMedia.variants":
		if e.complexity.ImageMedia.Variants == nil {
			break
		}

		return e.complexity.ImageMedia.Variants(childComplexity), true

	case "ImageMediaAccess.height":
		if e.complexity.ImageMediaAccess.Height == nil {
			break
		}

		return e.complexity.ImageMediaAccess.Height(childComplexity), true

	case "ImageMediaAccess.url":
		if e.complexity.ImageMediaAccess.URL == nil {
			break
		}

		return e.complexity.ImageMediaAccess.URL(childComplexity), true

	case "ImageMediaAccess.width":
		if e.complexity.ImageMediaAccess.Width == nil {
			break
		}

		return e.complexity.ImageMediaAccess.Width(childComplexity), true

	case "ImageMediaVariants.banner":
		if e.complexity.ImageMediaVariants.Banner == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Banner(childComplexity), true

	case "ImageMediaVariants.hd":
		if e.complexity.ImageMediaVariants.Hd == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Hd(childComplexity), true

	case "ImageMediaVariants.icon":
		if e.complexity.ImageMediaVariants.Icon == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Icon(childComplexity), true

	case "ImageMediaVariants.large":
		if e.complexity.ImageMediaVariants.Large == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Large(childComplexity), true

	case "ImageMediaVariants.medium":
		if e.complexity.ImageMediaVariants.Medium == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Medium(childComplexity), true

	case "ImageMediaVariants.mini":
		if e.complexity.ImageMediaVariants.Mini == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Mini(childComplexity), true

	case "ImageMediaVariants.small":
		if e.complexity.ImageMediaVariants.Small == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Small(childComplexity), true

	case "ImageMediaVariants.smallBanner":
		if e.complexity.ImageMediaVariants.SmallBanner == nil {
			break
		}

		return e.complexity.ImageMediaVariants.SmallBanner(childComplexity), true

	case "ImageMediaVariants.thumbnail":
		if e.complexity.ImageMediaVariants.Thumbnail == nil {
			break
		}

		return e.complexity.ImageMediaVariants.Thumbnail(childComplexity), true

	case "JoinClubPayload.clubMember":
		if e.complexity.JoinClubPayload.ClubMember == nil {
			break
		}

		return e.complexity.JoinClubPayload.ClubMember(childComplexity), true

	case "Language.locale":
		if e.complexity.Language.Locale == nil {
			break
		}

		return e.complexity.Language.Locale(childComplexity), true

	case "Language.name":
		if e.complexity.Language.Name == nil {
			break
		}

		return e.complexity.Language.Name(childComplexity), true

	case "LeaveClubPayload.clubMemberId":
		if e.complexity.LeaveClubPayload.ClubMemberID == nil {
			break
		}

		return e.complexity.LeaveClubPayload.ClubMemberID(childComplexity), true

	case "LikePostPayload.postLike":
		if e.complexity.LikePostPayload.PostLike == nil {
			break
		}

		return e.complexity.LikePostPayload.PostLike(childComplexity), true

	case "MP4VideoContainer.bitrate":
		if e.complexity.MP4VideoContainer.Bitrate == nil {
			break
		}

		return e.complexity.MP4VideoContainer.Bitrate(childComplexity), true

	case "MP4VideoContainer.height":
		if e.complexity.MP4VideoContainer.Height == nil {
			break
		}

		return e.complexity.MP4VideoContainer.Height(childComplexity), true

	case "MP4VideoContainer.url":
		if e.complexity.MP4VideoContainer.URL == nil {
			break
		}

		return e.complexity.MP4VideoContainer.URL(childComplexity), true

	case "MP4VideoContainer.width":
		if e.complexity.MP4VideoContainer.Width == nil {
			break
		}

		return e.complexity.MP4VideoContainer.Width(childComplexity), true

	case "MediaProgress.id":
		if e.complexity.MediaProgress.ID == nil {
			break
		}

		return e.complexity.MediaProgress.ID(childComplexity), true

	case "Mutation.addCategoryAlternativeTitle":
		if e.complexity.Mutation.AddCategoryAlternativeTitle == nil {
			break
		}

		args, err := ec.field_Mutation_addCategoryAlternativeTitle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCategoryAlternativeTitle(childComplexity, args["input"].(types.AddCategoryAlternativeTitleInput)), true

	case "Mutation.addClubSlugAlias":
		if e.complexity.Mutation.AddClubSlugAlias == nil {
			break
		}

		args, err := ec.field_Mutation_addClubSlugAlias_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddClubSlugAlias(childComplexity, args["input"].(types.AddClubSlugAliasInput)), true

	case "Mutation.addPostContent":
		if e.complexity.Mutation.AddPostContent == nil {
			break
		}

		args, err := ec.field_Mutation_addPostContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPostContent(childComplexity, args["input"].(types.AddPostContentInput)), true

	case "Mutation.archivePost":
		if e.complexity.Mutation.ArchivePost == nil {
			break
		}

		args, err := ec.field_Mutation_archivePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArchivePost(childComplexity, args["input"].(types.ArchivePostInput)), true

	case "Mutation.createAudience":
		if e.complexity.Mutation.CreateAudience == nil {
			break
		}

		args, err := ec.field_Mutation_createAudience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAudience(childComplexity, args["input"].(types.CreateAudienceInput)), true

	case "Mutation.createCategory":
		if e.complexity.Mutation.CreateCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCategory(childComplexity, args["input"].(types.CreateCategoryInput)), true

	case "Mutation.createCharacter":
		if e.complexity.Mutation.CreateCharacter == nil {
			break
		}

		args, err := ec.field_Mutation_createCharacter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCharacter(childComplexity, args["input"].(types.CreateCharacterInput)), true

	case "Mutation.createClub":
		if e.complexity.Mutation.CreateClub == nil {
			break
		}

		args, err := ec.field_Mutation_createClub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateClub(childComplexity, args["input"].(types.CreateClubInput)), true

	case "Mutation.createGameSession":
		if e.complexity.Mutation.CreateGameSession == nil {
			break
		}

		args, err := ec.field_Mutation_createGameSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGameSession(childComplexity, args["input"].(types.CreateGameSessionInput)), true

	case "Mutation.createPost":
		if e.complexity.Mutation.CreatePost == nil {
			break
		}

		args, err := ec.field_Mutation_createPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePost(childComplexity, args["input"].(types.CreatePostInput)), true

	case "Mutation.createSeries":
		if e.complexity.Mutation.CreateSeries == nil {
			break
		}

		args, err := ec.field_Mutation_createSeries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSeries(childComplexity, args["input"].(types.CreateSeriesInput)), true

	case "Mutation.createTopic":
		if e.complexity.Mutation.CreateTopic == nil {
			break
		}

		args, err := ec.field_Mutation_createTopic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTopic(childComplexity, args["input"].(types.CreateTopicInput)), true

	case "Mutation.deletePost":
		if e.complexity.Mutation.DeletePost == nil {
			break
		}

		args, err := ec.field_Mutation_deletePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePost(childComplexity, args["input"].(types.DeletePostInput)), true

	case "Mutation.disableClubCharacters":
		if e.complexity.Mutation.DisableClubCharacters == nil {
			break
		}

		args, err := ec.field_Mutation_disableClubCharacters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DisableClubCharacters(childComplexity, args["input"].(types.DisableClubCharactersInput)), true

	case "Mutation.disableClubSupporterOnlyPosts":
		if e.complexity.Mutation.DisableClubSupporterOnlyPosts == nil {
			break
		}

		args, err := ec.field_Mutation_disableClubSupporterOnlyPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DisableClubSupporterOnlyPosts(childComplexity, args["input"].(types.DisableClubSupporterOnlyPostsInput)), true

	case "Mutation.enableClubCharacters":
		if e.complexity.Mutation.EnableClubCharacters == nil {
			break
		}

		args, err := ec.field_Mutation_enableClubCharacters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableClubCharacters(childComplexity, args["input"].(types.EnableClubCharactersInput)), true

	case "Mutation.enableClubSupporterOnlyPosts":
		if e.complexity.Mutation.EnableClubSupporterOnlyPosts == nil {
			break
		}

		args, err := ec.field_Mutation_enableClubSupporterOnlyPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableClubSupporterOnlyPosts(childComplexity, args["input"].(types.EnableClubSupporterOnlyPostsInput)), true

	case "Mutation.joinClub":
		if e.complexity.Mutation.JoinClub == nil {
			break
		}

		args, err := ec.field_Mutation_joinClub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JoinClub(childComplexity, args["input"].(types.JoinClubInput)), true

	case "Mutation.leaveClub":
		if e.complexity.Mutation.LeaveClub == nil {
			break
		}

		args, err := ec.field_Mutation_leaveClub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LeaveClub(childComplexity, args["input"].(types.LeaveClubInput)), true

	case "Mutation.likePost":
		if e.complexity.Mutation.LikePost == nil {
			break
		}

		args, err := ec.field_Mutation_likePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LikePost(childComplexity, args["input"].(types.LikePostInput)), true

	case "Mutation.promoteClubSlugAliasToDefault":
		if e.complexity.Mutation.PromoteClubSlugAliasToDefault == nil {
			break
		}

		args, err := ec.field_Mutation_promoteClubSlugAliasToDefault_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PromoteClubSlugAliasToDefault(childComplexity, args["input"].(types.PromoteClubSlugAliasToDefaultInput)), true

	case "Mutation.removeCategoryAlternativeTitle":
		if e.complexity.Mutation.RemoveCategoryAlternativeTitle == nil {
			break
		}

		args, err := ec.field_Mutation_removeCategoryAlternativeTitle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveCategoryAlternativeTitle(childComplexity, args["input"].(types.RemoveCategoryAlternativeTitleInput)), true

	case "Mutation.removeClubSlugAlias":
		if e.complexity.Mutation.RemoveClubSlugAlias == nil {
			break
		}

		args, err := ec.field_Mutation_removeClubSlugAlias_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveClubSlugAlias(childComplexity, args["input"].(types.RemoveClubSlugAliasInput)), true

	case "Mutation.removePostContent":
		if e.complexity.Mutation.RemovePostContent == nil {
			break
		}

		args, err := ec.field_Mutation_removePostContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemovePostContent(childComplexity, args["input"].(types.RemovePostContentInput)), true

	case "Mutation.spinRoulette":
		if e.complexity.Mutation.SpinRoulette == nil {
			break
		}

		args, err := ec.field_Mutation_spinRoulette_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SpinRoulette(childComplexity, args["input"].(types.SpinRouletteInput)), true

	case "Mutation.submitPost":
		if e.complexity.Mutation.SubmitPost == nil {
			break
		}

		args, err := ec.field_Mutation_submitPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitPost(childComplexity, args["input"].(types.SubmitPostInput)), true

	case "Mutation.suspendClub":
		if e.complexity.Mutation.SuspendClub == nil {
			break
		}

		args, err := ec.field_Mutation_suspendClub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SuspendClub(childComplexity, args["input"].(types.SuspendClubInput)), true

	case "Mutation.terminateClub":
		if e.complexity.Mutation.TerminateClub == nil {
			break
		}

		args, err := ec.field_Mutation_terminateClub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TerminateClub(childComplexity, args["input"].(types.TerminateClubInput)), true

	case "Mutation.transferClubOwnership":
		if e.complexity.Mutation.TransferClubOwnership == nil {
			break
		}

		args, err := ec.field_Mutation_transferClubOwnership_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TransferClubOwnership(childComplexity, args["input"].(types.TransferClubOwnershipInput)), true

	case "Mutation.unArchivePost":
		if e.complexity.Mutation.UnArchivePost == nil {
			break
		}

		args, err := ec.field_Mutation_unArchivePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnArchivePost(childComplexity, args["input"].(types.UnArchivePostInput)), true

	case "Mutation.unSuspendClub":
		if e.complexity.Mutation.UnSuspendClub == nil {
			break
		}

		args, err := ec.field_Mutation_unSuspendClub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnSuspendClub(childComplexity, args["input"].(types.UnSuspendClubInput)), true

	case "Mutation.unTerminateClub":
		if e.complexity.Mutation.UnTerminateClub == nil {
			break
		}

		args, err := ec.field_Mutation_unTerminateClub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnTerminateClub(childComplexity, args["input"].(types.UnTerminateClubInput)), true

	case "Mutation.undoLikePost":
		if e.complexity.Mutation.UndoLikePost == nil {
			break
		}

		args, err := ec.field_Mutation_undoLikePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UndoLikePost(childComplexity, args["input"].(types.UndoLikePostInput)), true

	case "Mutation.updateAudienceBanner":
		if e.complexity.Mutation.UpdateAudienceBanner == nil {
			break
		}

		args, err := ec.field_Mutation_updateAudienceBanner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAudienceBanner(childComplexity, args["input"].(types.UpdateAudienceBannerInput)), true

	case "Mutation.updateAudienceIsStandard":
		if e.complexity.Mutation.UpdateAudienceIsStandard == nil {
			break
		}

		args, err := ec.field_Mutation_updateAudienceIsStandard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAudienceIsStandard(childComplexity, args["input"].(types.UpdateAudienceIsStandardInput)), true

	case "Mutation.updateAudienceTitle":
		if e.complexity.Mutation.UpdateAudienceTitle == nil {
			break
		}

		args, err := ec.field_Mutation_updateAudienceTitle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAudienceTitle(childComplexity, args["input"].(types.UpdateAudienceTitleInput)), true

	case "Mutation.updateCategoryTitle":
		if e.complexity.Mutation.UpdateCategoryTitle == nil {
			break
		}

		args, err := ec.field_Mutation_updateCategoryTitle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCategoryTitle(childComplexity, args["input"].(types.UpdateCategoryTitleInput)), true

	case "Mutation.updateCategoryTopic":
		if e.complexity.Mutation.UpdateCategoryTopic == nil {
			break
		}

		args, err := ec.field_Mutation_updateCategoryTopic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCategoryTopic(childComplexity, args["input"].(types.UpdateCategoryTopicInput)), true

	case "Mutation.updateCharacterName":
		if e.complexity.Mutation.UpdateCharacterName == nil {
			break
		}

		args, err := ec.field_Mutation_updateCharacterName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCharacterName(childComplexity, args["input"].(types.UpdateCharacterNameInput)), true

	case "Mutation.updateClubCharactersLimit":
		if e.complexity.Mutation.UpdateClubCharactersLimit == nil {
			break
		}

		args, err := ec.field_Mutation_updateClubCharactersLimit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateClubCharactersLimit(childComplexity, args["input"].(types.UpdateClubCharactersLimitInput)), true

	case "Mutation.updateClubName":
		if e.complexity.Mutation.UpdateClubName == nil {
			break
		}

		args, err := ec.field_Mutation_updateClubName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateClubName(childComplexity, args["input"].(types.UpdateClubNameInput)), true

	case "Mutation.updateClubThumbnail":
		if e.complexity.Mutation.UpdateClubThumbnail == nil {
			break
		}

		args, err := ec.field_Mutation_updateClubThumbnail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateClubThumbnail(childComplexity, args["input"].(types.UpdateClubThumbnailInput)), true

	case "Mutation.updateCurationProfileAudience":
		if e.complexity.Mutation.UpdateCurationProfileAudience == nil {
			break
		}

		args, err := ec.field_Mutation_updateCurationProfileAudience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCurationProfileAudience(childComplexity, args["input"].(types.UpdateCurationProfileAudienceInput)), true

	case "Mutation.updateCurationProfileCategory":
		if e.complexity.Mutation.UpdateCurationProfileCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updateCurationProfileCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCurationProfileCategory(childComplexity, args["input"].(types.UpdateCurationProfileCategoryInput)), true

	case "Mutation.updateCurationProfileDateOfBirth":
		if e.complexity.Mutation.UpdateCurationProfileDateOfBirth == nil {
			break
		}

		args, err := ec.field_Mutation_updateCurationProfileDateOfBirth_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCurationProfileDateOfBirth(childComplexity, args["input"].(types.UpdateCurationProfileDateOfBirthInput)), true

	case "Mutation.updatePostAudience":
		if e.complexity.Mutation.UpdatePostAudience == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostAudience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostAudience(childComplexity, args["input"].(types.UpdatePostAudienceInput)), true

	case "Mutation.updatePostCategories":
		if e.complexity.Mutation.UpdatePostCategories == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostCategories(childComplexity, args["input"].(types.UpdatePostCategoriesInput)), true

	case "Mutation.updatePostCharacters":
		if e.complexity.Mutation.UpdatePostCharacters == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostCharacters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostCharacters(childComplexity, args["input"].(types.UpdatePostCharactersInput)), true

	case "Mutation.updatePostContentIsSupporterOnly":
		if e.complexity.Mutation.UpdatePostContentIsSupporterOnly == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostContentIsSupporterOnly_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostContentIsSupporterOnly(childComplexity, args["input"].(types.UpdatePostContentIsSupporterOnlyInput)), true

	case "Mutation.updatePostContentOrder":
		if e.complexity.Mutation.UpdatePostContentOrder == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostContentOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostContentOrder(childComplexity, args["input"].(types.UpdatePostContentOrderInput)), true

	case "Mutation.updatePostDescription":
		if e.complexity.Mutation.UpdatePostDescription == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostDescription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostDescription(childComplexity, args["input"].(types.UpdatePostDescriptionInput)), true

	case "Mutation.updateSeriesTitle":
		if e.complexity.Mutation.UpdateSeriesTitle == nil {
			break
		}

		args, err := ec.field_Mutation_updateSeriesTitle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSeriesTitle(childComplexity, args["input"].(types.UpdateSeriesTitleInput)), true

	case "Mutation.updateTopicBanner":
		if e.complexity.Mutation.UpdateTopicBanner == nil {
			break
		}

		args, err := ec.field_Mutation_updateTopicBanner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTopicBanner(childComplexity, args["input"].(types.UpdateTopicBannerInput)), true

	case "Mutation.updateTopicDescription":
		if e.complexity.Mutation.UpdateTopicDescription == nil {
			break
		}

		args, err := ec.field_Mutation_updateTopicDescription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTopicDescription(childComplexity, args["input"].(types.UpdateTopicDescriptionInput)), true

	case "Mutation.updateTopicTitle":
		if e.complexity.Mutation.UpdateTopicTitle == nil {
			break
		}

		args, err := ec.field_Mutation_updateTopicTitle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTopicTitle(childComplexity, args["input"].(types.UpdateTopicTitleInput)), true

	case "Mutation.updateTopicWeight":
		if e.complexity.Mutation.UpdateTopicWeight == nil {
			break
		}

		args, err := ec.field_Mutation_updateTopicWeight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTopicWeight(childComplexity, args["input"].(types.UpdateTopicWeightInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Post.audience":
		if e.complexity.Post.Audience == nil {
			break
		}

		return e.complexity.Post.Audience(childComplexity), true

	case "Post.categories":
		if e.complexity.Post.Categories == nil {
			break
		}

		return e.complexity.Post.Categories(childComplexity), true

	case "Post.characters":
		if e.complexity.Post.Characters == nil {
			break
		}

		return e.complexity.Post.Characters(childComplexity), true

	case "Post.club":
		if e.complexity.Post.Club == nil {
			break
		}

		return e.complexity.Post.Club(childComplexity), true

	case "Post.content":
		if e.complexity.Post.Content == nil {
			break
		}

		return e.complexity.Post.Content(childComplexity), true

	case "Post.contributor":
		if e.complexity.Post.Contributor == nil {
			break
		}

		return e.complexity.Post.Contributor(childComplexity), true

	case "Post.createdAt":
		if e.complexity.Post.CreatedAt == nil {
			break
		}

		return e.complexity.Post.CreatedAt(childComplexity), true

	case "Post.description":
		if e.complexity.Post.Description == nil {
			break
		}

		args, err := ec.field_Post_description_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Post.Description(childComplexity, args["locale"].(*string)), true

	case "Post.descriptionTranslations":
		if e.complexity.Post.DescriptionTranslations == nil {
			break
		}

		return e.complexity.Post.DescriptionTranslations(childComplexity), true

	case "Post.id":
		if e.complexity.Post.ID == nil {
			break
		}

		return e.complexity.Post.ID(childComplexity), true

	case "Post.likes":
		if e.complexity.Post.Likes == nil {
			break
		}

		return e.complexity.Post.Likes(childComplexity), true

	case "Post.postedAt":
		if e.complexity.Post.PostedAt == nil {
			break
		}

		return e.complexity.Post.PostedAt(childComplexity), true

	case "Post.reference":
		if e.complexity.Post.Reference == nil {
			break
		}

		return e.complexity.Post.Reference(childComplexity), true

	case "Post.state":
		if e.complexity.Post.State == nil {
			break
		}

		return e.complexity.Post.State(childComplexity), true

	case "Post.suggestedPosts":
		if e.complexity.Post.SuggestedPosts == nil {
			break
		}

		args, err := ec.field_Post_suggestedPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Post.SuggestedPosts(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Post.supporterOnlyStatus":
		if e.complexity.Post.SupporterOnlyStatus == nil {
			break
		}

		return e.complexity.Post.SupporterOnlyStatus(childComplexity), true

	case "Post.viewerLiked":
		if e.complexity.Post.ViewerLiked == nil {
			break
		}

		return e.complexity.Post.ViewerLiked(childComplexity), true

	case "PostConnection.edges":
		if e.complexity.PostConnection.Edges == nil {
			break
		}

		return e.complexity.PostConnection.Edges(childComplexity), true

	case "PostConnection.pageInfo":
		if e.complexity.PostConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostConnection.PageInfo(childComplexity), true

	case "PostContent.id":
		if e.complexity.PostContent.ID == nil {
			break
		}

		return e.complexity.PostContent.ID(childComplexity), true

	case "PostContent.isSupporterOnly":
		if e.complexity.PostContent.IsSupporterOnly == nil {
			break
		}

		return e.complexity.PostContent.IsSupporterOnly(childComplexity), true

	case "PostContent.media":
		if e.complexity.PostContent.Media == nil {
			break
		}

		return e.complexity.PostContent.Media(childComplexity), true

	case "PostContent.resource":
		if e.complexity.PostContent.Resource == nil {
			break
		}

		return e.complexity.PostContent.Resource(childComplexity), true

	case "PostContent.supporterOnlyResource":
		if e.complexity.PostContent.SupporterOnlyResource == nil {
			break
		}

		return e.complexity.PostContent.SupporterOnlyResource(childComplexity), true

	case "PostContent.supporterOnlyVideoMediaDuration":
		if e.complexity.PostContent.SupporterOnlyVideoMediaDuration == nil {
			break
		}

		return e.complexity.PostContent.SupporterOnlyVideoMediaDuration(childComplexity), true

	case "PostContent.supporterOnlyVideoMediaHasAudio":
		if e.complexity.PostContent.SupporterOnlyVideoMediaHasAudio == nil {
			break
		}

		return e.complexity.PostContent.SupporterOnlyVideoMediaHasAudio(childComplexity), true

	case "PostContent.viewerCanViewSupporterOnlyContent":
		if e.complexity.PostContent.ViewerCanViewSupporterOnlyContent == nil {
			break
		}

		return e.complexity.PostContent.ViewerCanViewSupporterOnlyContent(childComplexity), true

	case "PostEdge.cursor":
		if e.complexity.PostEdge.Cursor == nil {
			break
		}

		return e.complexity.PostEdge.Cursor(childComplexity), true

	case "PostEdge.node":
		if e.complexity.PostEdge.Node == nil {
			break
		}

		return e.complexity.PostEdge.Node(childComplexity), true

	case "PostLike.account":
		if e.complexity.PostLike.Account == nil {
			break
		}

		return e.complexity.PostLike.Account(childComplexity), true

	case "PostLike.id":
		if e.complexity.PostLike.ID == nil {
			break
		}

		return e.complexity.PostLike.ID(childComplexity), true

	case "PostLike.likedAt":
		if e.complexity.PostLike.LikedAt == nil {
			break
		}

		return e.complexity.PostLike.LikedAt(childComplexity), true

	case "PostLike.post":
		if e.complexity.PostLike.Post == nil {
			break
		}

		return e.complexity.PostLike.Post(childComplexity), true

	case "PromoteClubSlugAliasToDefaultPayload.club":
		if e.complexity.PromoteClubSlugAliasToDefaultPayload.Club == nil {
			break
		}

		return e.complexity.PromoteClubSlugAliasToDefaultPayload.Club(childComplexity), true

	case "Query.audience":
		if e.complexity.Query.Audience == nil {
			break
		}

		args, err := ec.field_Query_audience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Audience(childComplexity, args["slug"].(string)), true

	case "Query.audiences":
		if e.complexity.Query.Audiences == nil {
			break
		}

		args, err := ec.field_Query_audiences_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Audiences(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["slugs"].([]string), args["title"].(*string), args["sortBy"].(types.AudiencesSort)), true

	case "Query.categories":
		if e.complexity.Query.Categories == nil {
			break
		}

		args, err := ec.field_Query_categories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Categories(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["slugs"].([]string), args["title"].(*string), args["excludeEmpty"].(bool), args["sortBy"].(types.CategoriesSort)), true

	case "Query.category":
		if e.complexity.Query.Category == nil {
			break
		}

		args, err := ec.field_Query_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Category(childComplexity, args["slug"].(string)), true

	case "Query.character":
		if e.complexity.Query.Character == nil {
			break
		}

		args, err := ec.field_Query_character_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Character(childComplexity, args["slug"].(string), args["seriesSlug"].(*string), args["clubSlug"].(*string)), true

	case "Query.characters":
		if e.complexity.Query.Characters == nil {
			break
		}

		args, err := ec.field_Query_characters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Characters(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["clubCharacters"].(*bool), args["slugs"].([]string), args["seriesSlug"].(*string), args["clubSlug"].(*string), args["name"].(*string), args["excludeEmpty"].(bool), args["sortBy"].(types.CharactersSort)), true

	case "Query.club":
		if e.complexity.Query.Club == nil {
			break
		}

		args, err := ec.field_Query_club_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Club(childComplexity, args["slug"].(string)), true

	case "Query.clubs":
		if e.complexity.Query.Clubs == nil {
			break
		}

		args, err := ec.field_Query_clubs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Clubs(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["slugs"].([]string), args["name"].(*string), args["suspended"].(*bool), args["terminated"].(*bool), args["excludeEmpty"].(bool), args["sortBy"].(types.ClubsSort)), true

	case "Query.discoverClubs":
		if e.complexity.Query.DiscoverClubs == nil {
			break
		}

		args, err := ec.field_Query_discoverClubs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DiscoverClubs(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Query.gameSessionStatus":
		if e.complexity.Query.GameSessionStatus == nil {
			break
		}

		args, err := ec.field_Query_gameSessionStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GameSessionStatus(childComplexity, args["reference"].(string)), true

	case "Query.post":
		if e.complexity.Query.Post == nil {
			break
		}

		args, err := ec.field_Query_post_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Post(childComplexity, args["reference"].(string)), true

	case "Query.posts":
		if e.complexity.Query.Posts == nil {
			break
		}

		args, err := ec.field_Query_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Posts(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["audienceSlugs"].([]string), args["categorySlugs"].([]string), args["characterSlugs"].([]string), args["seriesSlugs"].([]string), args["state"].(*types.PostState), args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), args["seed"].(*string), args["sortBy"].(types.PostsSort)), true

	case "Query.postsFeed":
		if e.complexity.Query.PostsFeed == nil {
			break
		}

		args, err := ec.field_Query_postsFeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PostsFeed(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["seed"].(*string)), true

	case "Query.search":
		if e.complexity.Query.Search == nil {
			break
		}

		args, err := ec.field_Query_search_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Search(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["query"].(string)), true

	case "Query.serial":
		if e.complexity.Query.Serial == nil {
			break
		}

		args, err := ec.field_Query_serial_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Serial(childComplexity, args["slug"].(string)), true

	case "Query.series":
		if e.complexity.Query.Series == nil {
			break
		}

		args, err := ec.field_Query_series_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Series(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["slugs"].([]string), args["title"].(*string), args["excludeEmpty"].(bool), args["sortBy"].(types.SeriesSort)), true

	case "Query.topic":
		if e.complexity.Query.Topic == nil {
			break
		}

		args, err := ec.field_Query_topic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Topic(childComplexity, args["slug"].(string)), true

	case "Query.topics":
		if e.complexity.Query.Topics == nil {
			break
		}

		args, err := ec.field_Query_topics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Topics(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Query._entities":
		if e.complexity.Query.__resolve_entities == nil {
			break
		}

		args, err := ec.field_Query__entities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.__resolve_entities(childComplexity, args["representations"].([]map[string]interface{})), true

	case "RawMedia.failed":
		if e.complexity.RawMedia.Failed == nil {
			break
		}

		return e.complexity.RawMedia.Failed(childComplexity), true

	case "RawMedia.id":
		if e.complexity.RawMedia.ID == nil {
			break
		}

		return e.complexity.RawMedia.ID(childComplexity), true

	case "RawMedia.originalFileName":
		if e.complexity.RawMedia.OriginalFileName == nil {
			break
		}

		return e.complexity.RawMedia.OriginalFileName(childComplexity), true

	case "RawMedia.progress":
		if e.complexity.RawMedia.Progress == nil {
			break
		}

		return e.complexity.RawMedia.Progress(childComplexity), true

	case "RemoveCategoryAlternativeTitlePayload.category":
		if e.complexity.RemoveCategoryAlternativeTitlePayload.Category == nil {
			break
		}

		return e.complexity.RemoveCategoryAlternativeTitlePayload.Category(childComplexity), true

	case "RemoveClubSlugAliasPayload.club":
		if e.complexity.RemoveClubSlugAliasPayload.Club == nil {
			break
		}

		return e.complexity.RemoveClubSlugAliasPayload.Club(childComplexity), true

	case "RemovePostContentPayload.post":
		if e.complexity.RemovePostContentPayload.Post == nil {
			break
		}

		return e.complexity.RemovePostContentPayload.Post(childComplexity), true

	case "Resource.failed":
		if e.complexity.Resource.Failed == nil {
			break
		}

		return e.complexity.Resource.Failed(childComplexity), true

	case "Resource.height":
		if e.complexity.Resource.Height == nil {
			break
		}

		return e.complexity.Resource.Height(childComplexity), true

	case "Resource.id":
		if e.complexity.Resource.ID == nil {
			break
		}

		return e.complexity.Resource.ID(childComplexity), true

	case "Resource.preview":
		if e.complexity.Resource.Preview == nil {
			break
		}

		return e.complexity.Resource.Preview(childComplexity), true

	case "Resource.processed":
		if e.complexity.Resource.Processed == nil {
			break
		}

		return e.complexity.Resource.Processed(childComplexity), true

	case "Resource.progress":
		if e.complexity.Resource.Progress == nil {
			break
		}

		return e.complexity.Resource.Progress(childComplexity), true

	case "Resource.type":
		if e.complexity.Resource.Type == nil {
			break
		}

		return e.complexity.Resource.Type(childComplexity), true

	case "Resource.urls":
		if e.complexity.Resource.Urls == nil {
			break
		}

		return e.complexity.Resource.Urls(childComplexity), true

	case "Resource.videoDuration":
		if e.complexity.Resource.VideoDuration == nil {
			break
		}

		return e.complexity.Resource.VideoDuration(childComplexity), true

	case "Resource.videoNoAudio":
		if e.complexity.Resource.VideoNoAudio == nil {
			break
		}

		return e.complexity.Resource.VideoNoAudio(childComplexity), true

	case "Resource.videoThumbnail":
		if e.complexity.Resource.VideoThumbnail == nil {
			break
		}

		return e.complexity.Resource.VideoThumbnail(childComplexity), true

	case "Resource.width":
		if e.complexity.Resource.Width == nil {
			break
		}

		return e.complexity.Resource.Width(childComplexity), true

	case "ResourceProgress.id":
		if e.complexity.ResourceProgress.ID == nil {
			break
		}

		return e.complexity.ResourceProgress.ID(childComplexity), true

	case "ResourceUrl.mimeType":
		if e.complexity.ResourceUrl.MimeType == nil {
			break
		}

		return e.complexity.ResourceUrl.MimeType(childComplexity), true

	case "ResourceUrl.url":
		if e.complexity.ResourceUrl.URL == nil {
			break
		}

		return e.complexity.ResourceUrl.URL(childComplexity), true

	case "RouletteGameState.diceOne":
		if e.complexity.RouletteGameState.DiceOne == nil {
			break
		}

		return e.complexity.RouletteGameState.DiceOne(childComplexity), true

	case "RouletteGameState.diceThree":
		if e.complexity.RouletteGameState.DiceThree == nil {
			break
		}

		return e.complexity.RouletteGameState.DiceThree(childComplexity), true

	case "RouletteGameState.diceTwo":
		if e.complexity.RouletteGameState.DiceTwo == nil {
			break
		}

		return e.complexity.RouletteGameState.DiceTwo(childComplexity), true

	case "RouletteGameState.id":
		if e.complexity.RouletteGameState.ID == nil {
			break
		}

		return e.complexity.RouletteGameState.ID(childComplexity), true

	case "RouletteGameState.post":
		if e.complexity.RouletteGameState.Post == nil {
			break
		}

		return e.complexity.RouletteGameState.Post(childComplexity), true

	case "RouletteStatus.gameSession":
		if e.complexity.RouletteStatus.GameSession == nil {
			break
		}

		return e.complexity.RouletteStatus.GameSession(childComplexity), true

	case "RouletteStatus.gameState":
		if e.complexity.RouletteStatus.GameState == nil {
			break
		}

		return e.complexity.RouletteStatus.GameState(childComplexity), true

	case "RouletteStatus.score":
		if e.complexity.RouletteStatus.Score == nil {
			break
		}

		return e.complexity.RouletteStatus.Score(childComplexity), true

	case "RouletteStatus.totalDoubles":
		if e.complexity.RouletteStatus.TotalDoubles == nil {
			break
		}

		return e.complexity.RouletteStatus.TotalDoubles(childComplexity), true

	case "RouletteStatus.totalRolls":
		if e.complexity.RouletteStatus.TotalRolls == nil {
			break
		}

		return e.complexity.RouletteStatus.TotalRolls(childComplexity), true

	case "SearchConnection.edges":
		if e.complexity.SearchConnection.Edges == nil {
			break
		}

		return e.complexity.SearchConnection.Edges(childComplexity), true

	case "SearchConnection.pageInfo":
		if e.complexity.SearchConnection.PageInfo == nil {
			break
		}

		return e.complexity.SearchConnection.PageInfo(childComplexity), true

	case "SearchEdge.cursor":
		if e.complexity.SearchEdge.Cursor == nil {
			break
		}

		return e.complexity.SearchEdge.Cursor(childComplexity), true

	case "SearchEdge.node":
		if e.complexity.SearchEdge.Node == nil {
			break
		}

		return e.complexity.SearchEdge.Node(childComplexity), true

	case "Series.banner":
		if e.complexity.Series.Banner == nil {
			break
		}

		return e.complexity.Series.Banner(childComplexity), true

	case "Series.bannerMedia":
		if e.complexity.Series.BannerMedia == nil {
			break
		}

		return e.complexity.Series.BannerMedia(childComplexity), true

	case "Series.characters":
		if e.complexity.Series.Characters == nil {
			break
		}

		args, err := ec.field_Series_characters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Series.Characters(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["slugs"].([]string), args["name"].(*string), args["sortBy"].(types.CharactersSort)), true

	case "Series.id":
		if e.complexity.Series.ID == nil {
			break
		}

		return e.complexity.Series.ID(childComplexity), true

	case "Series.posts":
		if e.complexity.Series.Posts == nil {
			break
		}

		args, err := ec.field_Series_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Series.Posts(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["audienceSlugs"].([]string), args["categorySlugs"].([]string), args["characterSlugs"].([]string), args["state"].(*types.PostState), args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), args["seed"].(*string), args["sortBy"].(types.PostsSort)), true

	case "Series.reference":
		if e.complexity.Series.Reference == nil {
			break
		}

		return e.complexity.Series.Reference(childComplexity), true

	case "Series.slug":
		if e.complexity.Series.Slug == nil {
			break
		}

		return e.complexity.Series.Slug(childComplexity), true

	case "Series.thumbnail":
		if e.complexity.Series.Thumbnail == nil {
			break
		}

		return e.complexity.Series.Thumbnail(childComplexity), true

	case "Series.title":
		if e.complexity.Series.Title == nil {
			break
		}

		args, err := ec.field_Series_title_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Series.Title(childComplexity, args["locale"].(*string)), true

	case "Series.titleTranslations":
		if e.complexity.Series.TitleTranslations == nil {
			break
		}

		return e.complexity.Series.TitleTranslations(childComplexity), true

	case "Series.totalLikes":
		if e.complexity.Series.TotalLikes == nil {
			break
		}

		return e.complexity.Series.TotalLikes(childComplexity), true

	case "Series.totalPosts":
		if e.complexity.Series.TotalPosts == nil {
			break
		}

		return e.complexity.Series.TotalPosts(childComplexity), true

	case "SeriesConnection.edges":
		if e.complexity.SeriesConnection.Edges == nil {
			break
		}

		return e.complexity.SeriesConnection.Edges(childComplexity), true

	case "SeriesConnection.pageInfo":
		if e.complexity.SeriesConnection.PageInfo == nil {
			break
		}

		return e.complexity.SeriesConnection.PageInfo(childComplexity), true

	case "SeriesEdge.cursor":
		if e.complexity.SeriesEdge.Cursor == nil {
			break
		}

		return e.complexity.SeriesEdge.Cursor(childComplexity), true

	case "SeriesEdge.node":
		if e.complexity.SeriesEdge.Node == nil {
			break
		}

		return e.complexity.SeriesEdge.Node(childComplexity), true

	case "SpinRoulettePayload.rouletteGameState":
		if e.complexity.SpinRoulettePayload.RouletteGameState == nil {
			break
		}

		return e.complexity.SpinRoulettePayload.RouletteGameState(childComplexity), true

	case "SubmitPostPayload.post":
		if e.complexity.SubmitPostPayload.Post == nil {
			break
		}

		return e.complexity.SubmitPostPayload.Post(childComplexity), true

	case "SuspendClubPayload.club":
		if e.complexity.SuspendClubPayload.Club == nil {
			break
		}

		return e.complexity.SuspendClubPayload.Club(childComplexity), true

	case "TerminateClubPayload.club":
		if e.complexity.TerminateClubPayload.Club == nil {
			break
		}

		return e.complexity.TerminateClubPayload.Club(childComplexity), true

	case "Topic.banner":
		if e.complexity.Topic.Banner == nil {
			break
		}

		return e.complexity.Topic.Banner(childComplexity), true

	case "Topic.bannerMedia":
		if e.complexity.Topic.BannerMedia == nil {
			break
		}

		return e.complexity.Topic.BannerMedia(childComplexity), true

	case "Topic.categories":
		if e.complexity.Topic.Categories == nil {
			break
		}

		args, err := ec.field_Topic_categories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.Categories(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int), args["slugs"].([]string), args["title"].(*string), args["sortBy"].(types.CategoriesSort)), true

	case "Topic.description":
		if e.complexity.Topic.Description == nil {
			break
		}

		args, err := ec.field_Topic_description_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.Description(childComplexity, args["locale"].(*string)), true

	case "Topic.descriptionTranslations":
		if e.complexity.Topic.DescriptionTranslations == nil {
			break
		}

		return e.complexity.Topic.DescriptionTranslations(childComplexity), true

	case "Topic.id":
		if e.complexity.Topic.ID == nil {
			break
		}

		return e.complexity.Topic.ID(childComplexity), true

	case "Topic.reference":
		if e.complexity.Topic.Reference == nil {
			break
		}

		return e.complexity.Topic.Reference(childComplexity), true

	case "Topic.slug":
		if e.complexity.Topic.Slug == nil {
			break
		}

		return e.complexity.Topic.Slug(childComplexity), true

	case "Topic.title":
		if e.complexity.Topic.Title == nil {
			break
		}

		args, err := ec.field_Topic_title_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Topic.Title(childComplexity, args["locale"].(*string)), true

	case "Topic.titleTranslations":
		if e.complexity.Topic.TitleTranslations == nil {
			break
		}

		return e.complexity.Topic.TitleTranslations(childComplexity), true

	case "Topic.weight":
		if e.complexity.Topic.Weight == nil {
			break
		}

		return e.complexity.Topic.Weight(childComplexity), true

	case "TopicConnection.edges":
		if e.complexity.TopicConnection.Edges == nil {
			break
		}

		return e.complexity.TopicConnection.Edges(childComplexity), true

	case "TopicConnection.pageInfo":
		if e.complexity.TopicConnection.PageInfo == nil {
			break
		}

		return e.complexity.TopicConnection.PageInfo(childComplexity), true

	case "TopicEdge.cursor":
		if e.complexity.TopicEdge.Cursor == nil {
			break
		}

		return e.complexity.TopicEdge.Cursor(childComplexity), true

	case "TopicEdge.node":
		if e.complexity.TopicEdge.Node == nil {
			break
		}

		return e.complexity.TopicEdge.Node(childComplexity), true

	case "TransferClubOwnershipPayload.club":
		if e.complexity.TransferClubOwnershipPayload.Club == nil {
			break
		}

		return e.complexity.TransferClubOwnershipPayload.Club(childComplexity), true

	case "Translation.language":
		if e.complexity.Translation.Language == nil {
			break
		}

		return e.complexity.Translation.Language(childComplexity), true

	case "Translation.text":
		if e.complexity.Translation.Text == nil {
			break
		}

		return e.complexity.Translation.Text(childComplexity), true

	case "UnArchivePostPayload.post":
		if e.complexity.UnArchivePostPayload.Post == nil {
			break
		}

		return e.complexity.UnArchivePostPayload.Post(childComplexity), true

	case "UnSuspendClubPayload.club":
		if e.complexity.UnSuspendClubPayload.Club == nil {
			break
		}

		return e.complexity.UnSuspendClubPayload.Club(childComplexity), true

	case "UnTerminateClubPayload.club":
		if e.complexity.UnTerminateClubPayload.Club == nil {
			break
		}

		return e.complexity.UnTerminateClubPayload.Club(childComplexity), true

	case "UndoLikePostPayload.postLikeId":
		if e.complexity.UndoLikePostPayload.PostLikeID == nil {
			break
		}

		return e.complexity.UndoLikePostPayload.PostLikeID(childComplexity), true

	case "UpdateAudienceBannerPayload.audience":
		if e.complexity.UpdateAudienceBannerPayload.Audience == nil {
			break
		}

		return e.complexity.UpdateAudienceBannerPayload.Audience(childComplexity), true

	case "UpdateAudienceIsStandardPayload.audience":
		if e.complexity.UpdateAudienceIsStandardPayload.Audience == nil {
			break
		}

		return e.complexity.UpdateAudienceIsStandardPayload.Audience(childComplexity), true

	case "UpdateAudienceTitlePayload.audience":
		if e.complexity.UpdateAudienceTitlePayload.Audience == nil {
			break
		}

		return e.complexity.UpdateAudienceTitlePayload.Audience(childComplexity), true

	case "UpdateCategoryTitlePayload.category":
		if e.complexity.UpdateCategoryTitlePayload.Category == nil {
			break
		}

		return e.complexity.UpdateCategoryTitlePayload.Category(childComplexity), true

	case "UpdateCategoryTopicPayload.category":
		if e.complexity.UpdateCategoryTopicPayload.Category == nil {
			break
		}

		return e.complexity.UpdateCategoryTopicPayload.Category(childComplexity), true

	case "UpdateCharacterNamePayload.character":
		if e.complexity.UpdateCharacterNamePayload.Character == nil {
			break
		}

		return e.complexity.UpdateCharacterNamePayload.Character(childComplexity), true

	case "UpdateClubCharactersLimitPayload.club":
		if e.complexity.UpdateClubCharactersLimitPayload.Club == nil {
			break
		}

		return e.complexity.UpdateClubCharactersLimitPayload.Club(childComplexity), true

	case "UpdateClubNamePayload.club":
		if e.complexity.UpdateClubNamePayload.Club == nil {
			break
		}

		return e.complexity.UpdateClubNamePayload.Club(childComplexity), true

	case "UpdateClubThumbnailPayload.club":
		if e.complexity.UpdateClubThumbnailPayload.Club == nil {
			break
		}

		return e.complexity.UpdateClubThumbnailPayload.Club(childComplexity), true

	case "UpdateCurationProfileAudiencePayload.curationProfile":
		if e.complexity.UpdateCurationProfileAudiencePayload.CurationProfile == nil {
			break
		}

		return e.complexity.UpdateCurationProfileAudiencePayload.CurationProfile(childComplexity), true

	case "UpdateCurationProfileCategoryPayload.curationProfile":
		if e.complexity.UpdateCurationProfileCategoryPayload.CurationProfile == nil {
			break
		}

		return e.complexity.UpdateCurationProfileCategoryPayload.CurationProfile(childComplexity), true

	case "UpdateCurationProfileDateOfBirthPayload.curationProfile":
		if e.complexity.UpdateCurationProfileDateOfBirthPayload.CurationProfile == nil {
			break
		}

		return e.complexity.UpdateCurationProfileDateOfBirthPayload.CurationProfile(childComplexity), true

	case "UpdatePostAudiencePayload.post":
		if e.complexity.UpdatePostAudiencePayload.Post == nil {
			break
		}

		return e.complexity.UpdatePostAudiencePayload.Post(childComplexity), true

	case "UpdatePostCategoriesPayload.post":
		if e.complexity.UpdatePostCategoriesPayload.Post == nil {
			break
		}

		return e.complexity.UpdatePostCategoriesPayload.Post(childComplexity), true

	case "UpdatePostCharactersPayload.post":
		if e.complexity.UpdatePostCharactersPayload.Post == nil {
			break
		}

		return e.complexity.UpdatePostCharactersPayload.Post(childComplexity), true

	case "UpdatePostClubPayload.post":
		if e.complexity.UpdatePostClubPayload.Post == nil {
			break
		}

		return e.complexity.UpdatePostClubPayload.Post(childComplexity), true

	case "UpdatePostContentIsSupporterOnlyPayload.post":
		if e.complexity.UpdatePostContentIsSupporterOnlyPayload.Post == nil {
			break
		}

		return e.complexity.UpdatePostContentIsSupporterOnlyPayload.Post(childComplexity), true

	case "UpdatePostContentOrderPayload.post":
		if e.complexity.UpdatePostContentOrderPayload.Post == nil {
			break
		}

		return e.complexity.UpdatePostContentOrderPayload.Post(childComplexity), true

	case "UpdatePostDescriptionPayload.post":
		if e.complexity.UpdatePostDescriptionPayload.Post == nil {
			break
		}

		return e.complexity.UpdatePostDescriptionPayload.Post(childComplexity), true

	case "UpdateSeriesTitlePayload.series":
		if e.complexity.UpdateSeriesTitlePayload.Series == nil {
			break
		}

		return e.complexity.UpdateSeriesTitlePayload.Series(childComplexity), true

	case "UpdateTopicBannerPayload.topic":
		if e.complexity.UpdateTopicBannerPayload.Topic == nil {
			break
		}

		return e.complexity.UpdateTopicBannerPayload.Topic(childComplexity), true

	case "UpdateTopicDescriptionPayload.topic":
		if e.complexity.UpdateTopicDescriptionPayload.Topic == nil {
			break
		}

		return e.complexity.UpdateTopicDescriptionPayload.Topic(childComplexity), true

	case "UpdateTopicTitlePayload.topic":
		if e.complexity.UpdateTopicTitlePayload.Topic == nil {
			break
		}

		return e.complexity.UpdateTopicTitlePayload.Topic(childComplexity), true

	case "UpdateTopicWeightPayload.topic":
		if e.complexity.UpdateTopicWeightPayload.Topic == nil {
			break
		}

		return e.complexity.UpdateTopicWeightPayload.Topic(childComplexity), true

	case "VideoMedia.aspectRatio":
		if e.complexity.VideoMedia.AspectRatio == nil {
			break
		}

		return e.complexity.VideoMedia.AspectRatio(childComplexity), true

	case "VideoMedia.containers":
		if e.complexity.VideoMedia.Containers == nil {
			break
		}

		return e.complexity.VideoMedia.Containers(childComplexity), true

	case "VideoMedia.cover":
		if e.complexity.VideoMedia.Cover == nil {
			break
		}

		return e.complexity.VideoMedia.Cover(childComplexity), true

	case "VideoMedia.duration":
		if e.complexity.VideoMedia.Duration == nil {
			break
		}

		return e.complexity.VideoMedia.Duration(childComplexity), true

	case "VideoMedia.hasAudio":
		if e.complexity.VideoMedia.HasAudio == nil {
			break
		}

		return e.complexity.VideoMedia.HasAudio(childComplexity), true

	case "VideoMedia.id":
		if e.complexity.VideoMedia.ID == nil {
			break
		}

		return e.complexity.VideoMedia.ID(childComplexity), true

	case "_Service.sdl":
		if e.complexity._Service.SDL == nil {
			break
		}

		return e.complexity._Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAddCategoryAlternativeTitleInput,
		ec.unmarshalInputAddClubSlugAliasInput,
		ec.unmarshalInputAddPostContentInput,
		ec.unmarshalInputArchivePostInput,
		ec.unmarshalInputCreateAudienceInput,
		ec.unmarshalInputCreateCategoryInput,
		ec.unmarshalInputCreateCharacterInput,
		ec.unmarshalInputCreateClubInput,
		ec.unmarshalInputCreateGameSessionInput,
		ec.unmarshalInputCreatePostInput,
		ec.unmarshalInputCreateSeriesInput,
		ec.unmarshalInputCreateTopicInput,
		ec.unmarshalInputDeletePostInput,
		ec.unmarshalInputDisableClubCharactersInput,
		ec.unmarshalInputDisableClubSupporterOnlyPostsInput,
		ec.unmarshalInputEnableClubCharactersInput,
		ec.unmarshalInputEnableClubSupporterOnlyPostsInput,
		ec.unmarshalInputJoinClubInput,
		ec.unmarshalInputLeaveClubInput,
		ec.unmarshalInputLikePostInput,
		ec.unmarshalInputPromoteClubSlugAliasToDefaultInput,
		ec.unmarshalInputRemoveCategoryAlternativeTitleInput,
		ec.unmarshalInputRemoveClubSlugAliasInput,
		ec.unmarshalInputRemovePostContentInput,
		ec.unmarshalInputSpinRouletteInput,
		ec.unmarshalInputSubmitPostInput,
		ec.unmarshalInputSuspendClubInput,
		ec.unmarshalInputTerminateClubInput,
		ec.unmarshalInputTransferClubOwnershipInput,
		ec.unmarshalInputUnArchivePostInput,
		ec.unmarshalInputUnSuspendClubInput,
		ec.unmarshalInputUnTerminateClubInput,
		ec.unmarshalInputUndoLikePostInput,
		ec.unmarshalInputUpdateAudienceBannerInput,
		ec.unmarshalInputUpdateAudienceIsStandardInput,
		ec.unmarshalInputUpdateAudienceTitleInput,
		ec.unmarshalInputUpdateCategoryTitleInput,
		ec.unmarshalInputUpdateCategoryTopicInput,
		ec.unmarshalInputUpdateCharacterNameInput,
		ec.unmarshalInputUpdateClubCharactersLimitInput,
		ec.unmarshalInputUpdateClubNameInput,
		ec.unmarshalInputUpdateClubThumbnailInput,
		ec.unmarshalInputUpdateCurationProfileAudienceInput,
		ec.unmarshalInputUpdateCurationProfileCategoryInput,
		ec.unmarshalInputUpdateCurationProfileDateOfBirthInput,
		ec.unmarshalInputUpdatePostAudienceInput,
		ec.unmarshalInputUpdatePostCategoriesInput,
		ec.unmarshalInputUpdatePostCharactersInput,
		ec.unmarshalInputUpdatePostContentIsSupporterOnlyInput,
		ec.unmarshalInputUpdatePostContentOrderInput,
		ec.unmarshalInputUpdatePostDescriptionInput,
		ec.unmarshalInputUpdateSeriesTitleInput,
		ec.unmarshalInputUpdateTopicBannerInput,
		ec.unmarshalInputUpdateTopicDescriptionInput,
		ec.unmarshalInputUpdateTopicTitleInput,
		ec.unmarshalInputUpdateTopicWeightInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../schema/audience/schema.graphql", Input: `type Audience implements Node @key(fields: "id") {
  """An ID pointing to this audience."""
  id: ID!

  """An ID that can be used to uniquely-identify this audience. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching."""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A title for this audience.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  title(locale: BCP47): String! @goField(forceResolver: true)

  """If this audience is standard or not."""
  standard: Boolean!

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!
}

type AudienceEdge {
  cursor: String!
  node: Audience!
}

type AudienceConnection {
  edges: [AudienceEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which audience connections can be sorted."""
enum AudiencesSort {
  """Audience by newest first"""
  NEW

  """Audience by top likes"""
  TOP

  """Audience by most posts"""
  POPULAR
}

extend type Query {
  """Search all audiences."""
  audiences(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    slugs: [String!]

    """Search by title of the audience."""
    title: String

    """Sorting options for audiences."""
    sortBy: AudiencesSort! = POPULAR
  ): AudienceConnection!

  """Get a single audience."""
  audience(
    """Search by slug of the audience."""
    slug: String!
  ): Audience
}

extend type Post {
  """Represents the audience that this post belongs to"""
  audience: Audience @goField(forceResolver: true)
}

"""Create a new audience."""
input CreateAudienceInput {
  """
  The chosen slug for the audience.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen title for the audience.

  Validation: Max 25 characters.
  """
  title: String!

  """If the audience is standard or not."""
  standard: Boolean!
}

"""Payload for a new audience"""
type CreateAudiencePayload {
  """The audience after creation"""
  audience: Audience

  """Validation for creating a new audience"""
  validation: CreateAudienceValidation
}

"""Validation for creating a new audience"""
enum CreateAudienceValidation {
  SLUG_TAKEN
}

"""Update audience."""
input UpdateAudienceTitleInput {
  """The audience to update"""
  id: ID!

  """
  The title to update.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update audience."""
input UpdateAudienceBannerInput {
  """The audience to update"""
  id: ID!

  """The banner"""
  banner: String!
}

"""Update audience."""
input UpdateAudienceIsStandardInput {
  """The audience to update"""
  id: ID!

  """Standard"""
  standard: Boolean!
}

"""Payload for updating audience"""
type UpdateAudienceTitlePayload {
  """The audience after update"""
  audience: Audience
}

"""Payload for updating audience"""
type UpdateAudienceBannerPayload {
  """The audience after update"""
  audience: Audience
}

"""Payload for updating audience"""
type UpdateAudienceIsStandardPayload {
  """The audience after update"""
  audience: Audience
}

extend type Mutation {
  """
  Create a new audience
  """
  createAudience(input: CreateAudienceInput!): CreateAudiencePayload

  """
  Update audience title
  """
  updateAudienceTitle(input: UpdateAudienceTitleInput!): UpdateAudienceTitlePayload

  """
  Update audience banner
  """
  updateAudienceBanner(input: UpdateAudienceBannerInput!): UpdateAudienceBannerPayload

  """
  Update audience standard
  """
  updateAudienceIsStandard(input: UpdateAudienceIsStandardInput!): UpdateAudienceIsStandardPayload
}
`, BuiltIn: false},
	{Name: "../../../schema/category/schema.graphql", Input: `type Category implements Node @key(fields: "id") {
  """An ID pointing to this category."""
  id: ID!

  """An ID that can be used to uniquely-identify this category. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A title for this category.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  title(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Alternative titles for this category."""
  alternativeTitles: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """The topic linked this category. If no topic is linked, field is null."""
  topic: Topic @goField(forceResolver: true)
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which categories connections can be sorted."""
enum CategoriesSort {
  """Categories by newest first"""
  NEW

  """Categories by top likes"""
  TOP

  """Categories by most posts"""
  POPULAR
}

type Query {
  """Search all categories."""
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    slugs: [String!]

    """Filter by the title of the category."""
    title: String

    """Exclude empty categories (categories that have 0 posts)."""
    excludeEmpty: Boolean! = false

    """Sorting options for categories."""
    sortBy: CategoriesSort! = POPULAR
  ): CategoryConnection!

  """Get a single category."""
  category(
    """Search by slug of the category."""
    slug: String!
  ): Category
}

extend type Post {
  """Categories that belong to this post"""
  categories: [Category!]! @goField(forceResolver: true)
}

"""Create a new category."""
input CreateCategoryInput {
  """
  The chosen slug for the category.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen title for the category.

  Validation: Max 25 characters.
  """
  title: String!

  """
  Optionally assign a topic to this category.
  """
  topicId: ID
}

"""Payload for a new category"""
type CreateCategoryPayload {
  """The category after creation"""
  category: Category

  """Validation for creating a new category"""
  validation: CreateCategoryValidation
}

"""Validation for creating a new category"""
enum CreateCategoryValidation {
  SLUG_TAKEN
}

"""Update category."""
input UpdateCategoryTitleInput {
  """The category to update"""
  id: ID!

  """
  The title to update.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update category."""
input AddCategoryAlternativeTitleInput {
  """The category to update"""
  id: ID!

  """
  The title to add.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update category."""
input RemoveCategoryAlternativeTitleInput {
  """The category to update"""
  id: ID!

  """
  The title to remove.
  """
  title: String!
}

"""Update category topic."""
input UpdateCategoryTopicInput {
  """The category to update"""
  id: ID!

  """
  The topic to assign to this category.
  """
  topicId: ID!
}

"""Payload for updating category"""
type UpdateCategoryTopicPayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type AddCategoryAlternativeTitlePayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type RemoveCategoryAlternativeTitlePayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type UpdateCategoryTitlePayload {
  """The category after update"""
  category: Category
}

type Mutation {
  """
  Create a new category
  """
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload

  """
  Update category title
  """
  updateCategoryTitle(input: UpdateCategoryTitleInput!): UpdateCategoryTitlePayload

  """
  Update the category topic
  """
  updateCategoryTopic(input: UpdateCategoryTopicInput!): UpdateCategoryTopicPayload

  """
  Add an alternative title to the category.
  """
  addCategoryAlternativeTitle(input: AddCategoryAlternativeTitleInput!): AddCategoryAlternativeTitlePayload

  """
  Remove an alternative title from the category.
  """
  removeCategoryAlternativeTitle(input: RemoveCategoryAlternativeTitleInput!): RemoveCategoryAlternativeTitlePayload
}
`, BuiltIn: false},
	{Name: "../../../schema/character/schema.graphql", Input: `type Character implements Node @key(fields: "id") {
  """An ID pointing to this character."""
  id: ID!

  """An ID that can be used to uniquely-identify this character. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A name for this character.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  name(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this name."""
  nameTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """The series linked to this character, if it's a series character."""
  series: Series

  """The club linked to this character, if it was created by a club."""
  club: Club @goField(forceResolver: true)
}

type CharacterEdge {
  cursor: String!
  node: Character!
}

type CharacterConnection {
  edges: [CharacterEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which character connections can be sorted."""
enum CharactersSort {
  """Characters by newest first"""
  NEW

  """Characters by top likes"""
  TOP

  """Characters by most posts"""
  POPULAR
}

extend type Series {
  """Get or search all characters for this series."""
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by character slugs."""
    slugs: [String!]

    """Filter by the name of the character."""
    name: String

    """Sorting options for characters."""
    sortBy: CharactersSort! = POPULAR
  ): CharacterConnection! @goField(forceResolver: true)
}

extend type Club {
  """Get or search all characters for this club."""
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by character slugs."""
    slugs: [String!]

    """Filter by the name of the character."""
    name: String

    """Sorting options for characters."""
    sortBy: CharactersSort! = POPULAR
  ): CharacterConnection! @goField(forceResolver: true)
}

extend type Query {
  """Get or search all characters"""
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Whether or not to show characters that were created by a club.

    By default, shows all characters.

    Otherwise, if true, shows all characters that were created by a club. If false, shows only series characters.
    """
    clubCharacters: Boolean

    """Search by character slugs."""
    slugs: [String!]

    """
    When searching for a character by slug, you need to include the series' slug since slugs are unique-per-series.

    Only one slug is allowed for now since you don't want inaccurate results.
    """
    seriesSlug: String

    """
    When searching for a character by slug, you need to include the club' slug since slugs are unique-per-series.

    Only one slug is allowed for now since you don't want inaccurate results.
    """
    clubSlug: String

    """Filter by the name of the character."""
    name: String

    """Exclude empty characters (characters that have 0 posts)."""
    excludeEmpty: Boolean! = false

    """Sorting options for characters."""
    sortBy: CharactersSort! = POPULAR
  ): CharacterConnection!

  """Get a single character."""
  character(
    """Search by slug of the character."""
    slug: String!

    """A series slug is required since character slugs are unique-per-series. Must enter either a series slug, or a club slug."""
    seriesSlug: String

    """A club slug is required since character slugs are unique-per-series. Must enter either a series slug, or a club slug."""
    clubSlug: String
  ): Character
}

extend type Post {
  """Characters that belong to this post"""
  characters: [Character!]! @goField(forceResolver: true)
}

"""Create a new character."""
input CreateCharacterInput {
  """The chosen series for the character."""
  seriesId: ID

  """The chosen club for the character."""
  clubId: ID

  """
  The chosen slug for the character.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen name for the character.

  Validation: Max 25 characters.
  """
  name: String!
}

"""Payload for a new character"""
type CreateCharacterPayload {
  """The character after creation"""
  character: Character

  """Validation for creating a new character"""
  validation: CreateCharacterValidation
}

"""Validation for creating a new character"""
enum CreateCharacterValidation {
  SLUG_TAKEN
}

"""Update character."""
input UpdateCharacterNameInput {
  """The character to update"""
  id: ID!

  """
  The name to update.

  Validation: Max 25 characters.
  """
  name: String!

  """
  The localization for this name.

  Validation: Must be one of the languages from the languages query.
  """
  locale: BCP47!
}

"""Payload for updating character"""
type UpdateCharacterNamePayload {
  """The character after update"""
  character: Character
}

extend type Mutation {
  """
  Create a new character.

  Must either enter a seriesId for a series character or a clubId for a club character.

  If entering a SeriesId, the authorization is Staff+ only.
  If entering a ClubId, you must be the owner of the club.
  """
  createCharacter(input: CreateCharacterInput!): CreateCharacterPayload

  """
  Update character title
  """
  updateCharacterName(input: UpdateCharacterNameInput!): UpdateCharacterNamePayload
}
`, BuiltIn: false},
	{Name: "../../../schema/club/schema.graphql", Input: `type ClubLink {
  """A link."""
  url: URI!
}

type Club implements Node @key(fields: "id") {
  """An ID pointing to this club."""
  id: ID!

  """An internal reference, uniquely identifying the club."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """
  Maximum amount of slug aliases that can be created for this club.
  """
  slugAliasesLimit: Int!

  """
  The total number of posts for this club.
  """
  totalPosts: Int!

  """
  The total number of likes for this club.
  """
  totalLikes: Int!

  """An alias list of slugs. These are valid, as in, you can find the club using the slug. However, it should always be replaced by the default slug."""
  slugAliases: [ClubSlugAlias!]!

  """A list of links for this club."""
  links: [ClubLink!]!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's thumbnail."""
  thumbnailMedia: Media

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """A name for this club."""
  name: String!

  """The account that owns this club."""
  owner: Account!

  """
  Whether or not this club is terminated.
  """
  termination: ClubTermination

  """
  Whether or not this club is suspended.
  """
  suspension: ClubSuspension

  """
  Club Suspension Logs.

  Can see who a club was suspended by, the reason and who unsuspended a particular club.
  """
  suspensionLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ClubSuspensionLogConnection! @goField(forceResolver: true)

  """
  Whether or not the viewer is the owner of the club.
  """
  viewerIsOwner: Boolean!

  """
  Whether creating supporter-only posts is enabled or disabled for this club.

  When this is true, a club owner cannot mark individual content in a post as "supporter-only".

  Additionally, if a club owner attempts to submit a post with supporter-only content already present, they will not be able to.
  """
  canCreateSupporterOnlyPosts: Boolean!

  """
  Whether or not you can become a supporter of this club.
  """
  canSupport: Boolean!

  """
  When the owner of the club needs to post the next supporter post.

  Usually 30 days after the next post.

  Nil if no supporter-only posts have been created.
  """
  nextSupporterPostTime: Time

  """Whether or not the viewer is a member of this club."""
  viewerMember: ClubMember @goField(forceResolver: true)

  """The total amount of members in this club, who are supporters."""
  membersIsSupporterCount: Int! @goField(forceResolver: true)

  """The total amount of members in this club."""
  membersCount: Int!

  """Club members."""
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by whether or not this is a supporter."""
    supporter: Boolean! = false

    """sorting options for club members."""
    sortBy: ClubMembersSort! = NEWEST
  ): ClubMemberConnection! @goField(forceResolver: true)

  """Whether or not characters are enabled for this club."""
  charactersEnabled: Boolean!

  """The amount of characters that this club can create."""
  charactersLimit: Int!

  """The total amount of characters that this club has created."""
  charactersCount: Int! @goField(forceResolver: true)
}

type ClubSuspension {
  """When the suspension expires. Can call UnSuspendClub when time = now."""
  expires: Time!
}

type ClubTermination {
  """The account that terminated the club."""
  account: Account!
}

"""The club slug alias"""
type ClubSlugAlias {
  """The slug alias"""
  slug: String!
}

type ClubEdge {
  cursor: String!
  node: Club!
}

type ClubConnection {
  edges: [ClubEdge!]!
  pageInfo: PageInfo!
}

type ClubMemberEdge {
  cursor: String!
  node: ClubMember!
}

type ClubMemberConnection {
  edges: [ClubMemberEdge!]!
  pageInfo: PageInfo!
}

"""Reasons a club suspension was created."""
enum ClubSuspensionReason {
  """Suspension was issued from a post moderation queue."""
  POST_MODERATION_QUEUE

  """Suspension was issued from a post removal."""
  POST_REMOVAL

  """Suspension was issued manually."""
  MANUAL
}

type ClubIssuedSuspensionLog {
  """
  The ID linked to this suspension log.
  """
  id: ID!

  """
  The account that created this suspension.

  If nil, the suspension was created automatically
  """
  account: Account

  """
  The reason this suspension was issued.
  """
  reason: ClubSuspensionReason!

  """
  How long the club was suspended until.
  """
  suspendedUntil: Time!
}

type ClubRemovedSuspensionLog {
  """
  The ID linked to this suspension log.
  """
  id: ID!

  """
  The account that removed this suspension.
  """
  account: Account!
}

union ClubSuspensionLog = ClubIssuedSuspensionLog | ClubRemovedSuspensionLog

type ClubSuspensionLogEdge {
  cursor: String!
  node: ClubSuspensionLog!
}

type ClubSuspensionLogConnection {
  edges: [ClubSuspensionLogEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which club member connections can be sorted."""
enum ClubMembersSort {
  """By oldest members"""
  NEWEST
}

type ClubMember implements Node @key(fields: "id") {
  """An ID pointing to this club member."""
  id: ID!

  """When the membership was created (when the account originally joined)."""
  joinedAt: Time!

  """The club that this membership belongs to."""
  club: Club! @goField(forceResolver: true)

  """The account that belongs to this membership."""
  account: Account!

  """Whether or not this member is a supporter."""
  isSupporter: Boolean!

  """If is a supporter, when they became a supporter."""
  supporterSince: Time
}

"""Add alias slug."""
input AddClubSlugAliasInput {
  """The club to update"""
  id: ID!

  """
  The chosen slug for the club.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!
}

"""Remove alias slug."""
input RemoveClubSlugAliasInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Create club."""
input CreateClubInput {
  """
  The chosen slug for the club.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen name for the club.

  Validation: Max 25 characters.
  """
  name: String!
}

"""Join a club input."""
input JoinClubInput {
  """The chosen club ID."""
  clubId: ID!
}

"""Leave a club."""
input LeaveClubInput {
  """The chosen club ID."""
  clubId: ID!
}

"""Update club name."""
input UpdateClubNameInput {
  """The club to update"""
  id: ID!

  """
  The chosen name for the club.

  Validation: Max 25 characters.
  """
  name: String!
}

"""Update club thumbnail."""
input UpdateClubThumbnailInput {
  """The club to update"""
  id: ID!

  """The thumbnail for the club."""
  thumbnail: String!
}

"""Update alias slug to default."""
input PromoteClubSlugAliasToDefaultInput {
  """The club to update"""
  id: ID!

  """The chosen slug for the club."""
  slug: String!
}

"""Validation for creating a new club"""
enum CreateClubValidation {
  SLUG_TAKEN
}

"""Payload for a new club"""
type CreateClubPayload {
  """The club after creation"""
  club: Club

  """Validation for creating a new club"""
  validation: CreateClubValidation
}

"""Payload for a new club member"""
type JoinClubPayload {
  """The membership after creation"""
  clubMember: ClubMember
}

"""Payload for leaving a club"""
type LeaveClubPayload {
  """The club membership that was removed"""
  clubMemberId: ID!
}

"""Validation for adding a new slug to a club"""
enum AddClubSlugAliasValidation {
  SLUG_TAKEN
}

"""Payload for a new alt slug"""
type AddClubSlugAliasPayload {
  """The club after update"""
  club: Club

  """Validation for adding a new club"""
  validation: AddClubSlugAliasValidation
}

"""Payload for a new alt slug"""
type RemoveClubSlugAliasPayload {
  """The club after update"""
  club: Club
}

"""Payload for a new alt slug"""
type PromoteClubSlugAliasToDefaultPayload {
  """The club after update"""
  club: Club
}

"""Payload for updating the name"""
type UpdateClubNamePayload {
  """The club after update"""
  club: Club
}

"""Payload for updating the thumbnail"""
type UpdateClubThumbnailPayload {
  """The club after update"""
  club: Club
}

"""Properties by which club connections can be sorted."""
enum ClubsSort {
  """Clubs by popularity"""
  POPULAR
}

"""Un-Suspend the club."""
input UnSuspendClubInput {
  """The club to un-suspend."""
  clubId: ID!
}

"""Suspend the club."""
input SuspendClubInput {
  """The club to suspend."""
  clubId: ID!

  """When the suspension should end."""
  endTime: Time!
}

"""Terminate the club."""
input TerminateClubInput {
  """The club to terminate."""
  clubId: ID!
}

"""Un-Terminate the club."""
input UnTerminateClubInput {
  """The club to un-terminate."""
  clubId: ID!
}

"""Enable club supporter-only posts."""
input EnableClubSupporterOnlyPostsInput {
  """The club to enable supporter-only posts for."""
  clubId: ID!
}

"""Enable club characters."""
input EnableClubCharactersInput {
  """The club to enable club characters for."""
  clubId: ID!

  """
  The amount of characters the club will be able to create.

  Validation: Limit to 200.
  """
  charactersLimit: Int!
}

"""Disable club characters."""
input DisableClubCharactersInput {
  """The club to disable characters for."""
  clubId: ID!
}

"""Update club characters limit."""
input UpdateClubCharactersLimitInput {
  """The club to update club characters limit for."""
  clubId: ID!

  """
  The amount of characters the club will be able to create.

  Validation: Limit to 200.
  """
  charactersLimit: Int!
}

"""Disable club supporter-only posts."""
input DisableClubSupporterOnlyPostsInput {
  """The club to disable supporter-only posts for."""
  clubId: ID!
}

"""Transfer club ownership input."""
input TransferClubOwnershipInput {
  """The club to transfer ownership for."""
  clubId: ID!

  """The new account that should be the owner of the club."""
  accountId: ID!
}

"""Disable club supporter-only posts payload."""
type DisableClubSupporterOnlyPostsPayload {
  """The new club after supporter-only posts are disabled."""
  club: Club
}

"""Enable club supporter-only posts payload."""
type EnableClubSupporterOnlyPostsPayload {
  """The new club after supporter-only posts are enabled."""
  club: Club
}

"""Enable club characters payload."""
type EnableClubCharactersPayload {
  """The new club after enabling club characters."""
  club: Club
}

"""Disable club characters payload."""
type DisableClubCharactersPayload {
  """The new club after disabling club characters."""
  club: Club
}

"""Update club characters limit payload."""
type UpdateClubCharactersLimitPayload {
  """The club after updating the characters limit."""
  club: Club
}

"""Un terminate club payload."""
type UnTerminateClubPayload {
  """The new club after it's not terminated anymore."""
  club: Club
}

"""Un suspend club payload."""
type UnSuspendClubPayload {
  """The new club after it's not suspended anymore."""
  club: Club
}

"""Suspend club payload."""
type SuspendClubPayload {
  """The new club after it's suspended."""
  club: Club
}

"""Terminate club payload."""
type TerminateClubPayload {
  """The new club after it's terminated."""
  club: Club
}

"""Transfer club ownership."""
type TransferClubOwnershipPayload {
  """The new club after ownership has been transferred."""
  club: Club
}

extend type Mutation {
  """
  Join the club, becoming a member.
  """
  joinClub(input: JoinClubInput!): JoinClubPayload

  """
  Leave the club.

  If you are the owner of the club, you cannot leave the club.
  """
  leaveClub(input: LeaveClubInput!): LeaveClubPayload

  """
  Create a new club
  """
  createClub(input: CreateClubInput!): CreateClubPayload

  """
  Add an alternative slug to the club
  """
  addClubSlugAlias(input: AddClubSlugAliasInput!): AddClubSlugAliasPayload

  """
  Remove an alternative slug from the club
  """
  removeClubSlugAlias(input: RemoveClubSlugAliasInput!): RemoveClubSlugAliasPayload

  """
  Make the alias slug the default, swapping out the old slug into the alias list.
  """
  promoteClubSlugAliasToDefault(input: PromoteClubSlugAliasToDefaultInput!): PromoteClubSlugAliasToDefaultPayload

  """
  Update the club's name (english-only for now).
  """
  updateClubName(input: UpdateClubNameInput!): UpdateClubNamePayload

  """
  Update the club thumbnail
  """
  updateClubThumbnail(input: UpdateClubThumbnailInput!): UpdateClubThumbnailPayload

  """
  Suspend the club.

  Staff+ only.
  """
  suspendClub(input: SuspendClubInput!): SuspendClubPayload

  """
  Un-Suspend the club. Suspension must be expired.

  Staff+ may un-suspend even if suspension hasn't expired yet.
  """
  unSuspendClub(input: UnSuspendClubInput!): UnSuspendClubPayload

  """
  Terminate the club.

  Terminating a club will remove it from public visibility. Subscriptions will not be cancelled.

  Staff+ only.
  """
  terminateClub(input: TerminateClubInput!): TerminateClubPayload

  """
  Un-Terminate the club.

  Un-terminating will allow the club to be viewed publicly again, but all subscriptions will remain cancelled.

  Staff+ only.
  """
  unTerminateClub(input: UnTerminateClubInput!): UnTerminateClubPayload

  """
  Enable club supporter-only posts, if previously disabled.

  Staff+ only.
  """
  enableClubSupporterOnlyPosts(input: EnableClubSupporterOnlyPostsInput!): EnableClubSupporterOnlyPostsPayload

  """
  Disable club supporter-only posts.

  When this mutation is ran, the club will no longer be able to create supporter-only posts, and their supporter timer will reset, as well as removing the ability to collect subscriptions.

  In order to be able to collect subscriptions again, the enableClubSupporterOnlyPosts mutation should be ran, and the club owner should create a post with supporter-only content.

  Staff+ only.
  """
  disableClubSupporterOnlyPosts(input: DisableClubSupporterOnlyPostsInput!): DisableClubSupporterOnlyPostsPayload

  """
  Disable club characters.

  Will disable character creation for the club.

  Staff+ only.
  """
  disableClubCharacters(input: DisableClubCharactersInput!): DisableClubCharactersPayload

  """
  Enable club characters.

  Will enable club characters. Requires a limit to be set as well.

  Staff+ only.
  """
  enableClubCharacters(input: EnableClubCharactersInput!): EnableClubCharactersPayload

  """
  Set the amount of characters that a club can create.

  Staff+ only.
  """
  updateClubCharactersLimit(input: UpdateClubCharactersLimitInput!): UpdateClubCharactersLimitPayload

  """
  Transfer club ownership from one account to another.

  Staff+ only.
  """
  transferClubOwnership(input: TransferClubOwnershipInput!): TransferClubOwnershipPayload
}

extend type Query {
  """Club discovery endpoint."""
  discoverClubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ClubConnection!

  """Search multiple clubs."""
  clubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by club slugs."""
    slugs: [String!]

    """Filter by the name of the club."""
    name: String

    """
    Filter by all the clubs that are suspended.

    By default, will show all clubs that are suspended and terminated.

    False to show all clubs that are not suspended and True to show only clubs that are suspended.
    """
    suspended: Boolean

    """
    Filter by all the clubs that are terminated.

    By default, will show all terminated clubs.

    False to show all clubs that are not terminated and True to show only clubs that are terminated.
    """
    terminated: Boolean

    """Exclude empty clubs (clubs that have 0 posts)."""
    excludeEmpty: Boolean! = false

    """Sorting options for clubs."""
    sortBy: ClubsSort! = POPULAR
  ): ClubConnection!

  """Get a single club."""
  club(
    """Search by slug of the club."""
    slug: String!
  ): Club
}

extend type Account {

  """
  Maximum amount of clubs that you can create.
  """
  clubsLimit: Int! @goField(forceResolver: true)

  """
  Current count of the amount of clubs that the account has created.
  """
  clubsCount: Int! @goField(forceResolver: true)

  """
  Whether or not this club has non-terminated clubs.

  Cannot delete account if this is true.
  """
  hasNonTerminatedClubs: Boolean! @goField(forceResolver: true)

  """Represents the clubs that the account has created."""
  clubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by club slugs."""
    slugs: [String!]

    """Filter by the name of the club."""
    name: String

    """Sorting options for clubs."""
    sortBy: ClubsSort! = POPULAR
  ): ClubConnection! @goField(forceResolver: true)

  """
  Maximum amount of clubs that you can join as an account.
  """
  clubMembershipsLimit: Int! @goField(forceResolver: true)

  """
  Current count of club memberships. Should be compared against the limit before joining a club.
  """
  clubMembershipsCount: Int! @goField(forceResolver: true)

  """Represents the club memberships that the account has."""
  clubMemberships(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by whether or not this is a supporter."""
    supporter: Boolean! = false

    """sorting options for club members."""
    sortBy: ClubMembersSort! = NEWEST
  ): ClubMemberConnection! @goField(forceResolver: true)
}
`, BuiltIn: false},
	{Name: "../../../schema/curation/schema.graphql", Input: `type DateOfBirthCurationProfile {
  """Whether or not the date of birth section was skipped."""
  skipped: Boolean!

  """Whether or not the date of birth section was completed."""
  completed: Boolean!

  """The date of birth set."""
  dateOfBirth: Time
}

type AudienceCurationProfile {
  """Whether or not the audience section was completed."""
  completed: Boolean!

  """Whether or not the audience section was skipped."""
  skipped: Boolean!

  """Audiences selected for this section."""
  audiences: [Audience!]! @goField(forceResolver: true)
}

type CategoryCurationProfile {
  """Whether or not the category section was completed."""
  completed: Boolean!

  """Whether or not the category section was skipped."""
  skipped: Boolean!

  """Categories selected for this section."""
  categories: [Category!]! @goField(forceResolver: true)
}

type CurationProfile {
  """An ID uniquely identifying this profile."""
  id: ID!

  """If the whole profile was completed or not."""
  completed: Boolean!

  """The date of birth profile."""
  dateOfBirth: DateOfBirthCurationProfile!

  """The audience profile."""
  audience: AudienceCurationProfile!

  """The category profile."""
  category: CategoryCurationProfile!
}

extend type Account {
  """The curation profile linked to this account."""
  curationProfile: CurationProfile! @goField(forceResolver: true)
}

"""Update curation profile audience."""
input UpdateCurationProfileAudienceInput {
  """The audiences that were selected"""
  audienceIds: [ID!]!

  """Whether or not this section was skipped"""
  skipped: Boolean!
}

"""Update curation profile category."""
input UpdateCurationProfileCategoryInput {
  """The categories that were selected"""
  categoryIds: [ID!]!

  """Whether or not this section was skipped"""
  skipped: Boolean!
}

"""Update curation profile date of birth."""
input UpdateCurationProfileDateOfBirthInput {
  """The date of birth that was selected"""
  dateOfBirth: Time

  """Whether or not this section was skipped"""
  skipped: Boolean!
}

"""Payload for updating profile audience"""
type UpdateCurationProfileAudiencePayload {
  """The updated profile."""
  curationProfile: CurationProfile
}

"""Payload for updating profile category"""
type UpdateCurationProfileCategoryPayload {
  """The updated profile."""
  curationProfile: CurationProfile
}

"""Payload for updating profile date of birth"""
type UpdateCurationProfileDateOfBirthPayload {
  """The updated profile."""
  curationProfile: CurationProfile
}

extend type Mutation {
  """
  Update the audience for the curation profile
  """
  updateCurationProfileAudience(input: UpdateCurationProfileAudienceInput!): UpdateCurationProfileAudiencePayload

  """
  Update the category for the curation profile
  """
  updateCurationProfileCategory(input: UpdateCurationProfileCategoryInput!): UpdateCurationProfileCategoryPayload

  """
  Update the date of birth for the curation profile
  """
  updateCurationProfileDateOfBirth(input: UpdateCurationProfileDateOfBirthInput!): UpdateCurationProfileDateOfBirthPayload
}
`, BuiltIn: false},
	{Name: "../../../schema/games/schema.graphql", Input: `type GameSession {
  """An ID pointing to this game session."""
  id: ID!

  """An ID that can be used to uniquely-identify this game session."""
  reference: String!

  """Whether or not this game session is closed. A closed game session cannot be played anymore."""
  isClosed: Boolean!

  """Whether or not the current viewer is the player of the game. Only players can "play" the game."""
  viewerIsPlayer: Boolean!

  """The type of game this session belongs to."""
  gameType: GameType!

  """The seed used for this session."""
  seed: String!
}

"""The types of games available."""
enum GameType {
  ROULETTE
}

"""The status of the roulette game."""
type RouletteStatus {
  """The game session that this roulette belongs to."""
  gameSession: GameSession!

  """The current state of the roulette game. If no spins happened yet, this is nil. Should be used to resume the current roulette session."""
  gameState: RouletteGameState

  """How many rolls occurred. Note that this is 0 if the game session is not closed."""
  totalRolls: Int!

  """How many doubles occurred. Note that this is 0 if the game session is not closed."""
  totalDoubles: Int!

  """The total score. Note that this is 0 if the game session is not closed."""
  score: Int!
}

"""A roulette game state."""
type RouletteGameState {
  """An ID used to uniquely identify this game state."""
  id: ID!

  """The first dice that was created."""
  diceOne: Int!

  """The second dice that was created."""
  diceTwo: Int!

  """The third dice that was created."""
  diceThree: Int!

  """The post that was selected."""
  post: Post! @goField(forceResolver: true)
}

"""A union representing the status of various games."""
union GameSessionStatus = RouletteStatus

"""Create a new game session."""
input CreateGameSessionInput {
  """
  The game type to create the session for.
  """
  gameType: GameType!

  """
  Optionally pass a seed. If a seed is not passed in, one will be automatically generated.

  Validation: only alphanumeric characters, no spaces, and max 25 characters.
  """
  seed: String
}

"""Payload for a new game session"""
type CreateGameSessionPayload {
  """The game session after creation."""
  gameSession: GameSession
}

"""Spin roulette."""
input SpinRouletteInput {
  """The game session ID to use for the spin."""
  gameSessionId: ID!
}

"""Payload for spinning roulette."""
type SpinRoulettePayload {
  """The new roulette spin game state"""
  rouletteGameState: RouletteGameState
}

extend type Mutation {
  """
  Create a new game session.
  """
  createGameSession(input: CreateGameSessionInput!): CreateGameSessionPayload

  """
  Spin the roulette. Cannot spin if the game session is closed.
  """
  spinRoulette(input: SpinRouletteInput!): SpinRoulettePayload
}

extend type Query {
  """
  Get the status of a current game session using the reference of a game session.

  Returns nil if the game session does not exist.
  """
  gameSessionStatus(
    """Search game session status by reference."""
    reference: String!
  ): GameSessionStatus
}
`, BuiltIn: false},
	{Name: "../../../schema/like/schema.graphql", Input: `type PostLike implements Node @key(fields: "id") {
  """An ID uniquely identifying this like."""
  id: ID!

  """The time and date at which the post was liked."""
  likedAt: Time!

  """The post this like belongs to."""
  post: Post!

  """The account this like belongs to"""
  account: Account!
}

"""Undo like on a post."""
input UndoLikePostInput {
  """The post ID that you want to unlike"""
  id: ID!
}

"""Like a post."""
input LikePostInput {
  """The post ID that you want to like"""
  id: ID!
}

"""Payload for the liked post"""
type LikePostPayload {
  """The new PostLike entry."""
  postLike: PostLike
}

"""Payload for undoing a post like"""
type UndoLikePostPayload {
  """The post like that was deleted."""
  postLikeId: ID
}

extend type Post {
  """The amount of likes on this post."""
  likes: Int!

  """Whether or not the viewer liked this post."""
  viewerLiked: PostLike @goField(forceResolver: true)
}

extend type Mutation {
  """
  Like a post
  """
  likePost(input: LikePostInput!): LikePostPayload

  """
  Undo a like on a post
  """
  undoLikePost(input: UndoLikePostInput!): UndoLikePostPayload
}
`, BuiltIn: false},
	{Name: "../../../schema/post/schema.graphql", Input: `"""Represents content for a post."""
type PostContent {
  """The ID of this content."""
  id: ID!

  """The resource belonging to this content."""
  resource: Resource!

  """The media belonging to this content."""
  media: Media!

  """If "viewerCanViewSupporterOnlyContent" is false, will contain the duration of the video, if the media is a video."""
  supporterOnlyVideoMediaDuration: Int

  """If "viewerCanViewSupporterOnlyContent" is false, will say if the video has audio, if the media is a video."""
  supporterOnlyVideoMediaHasAudio: Boolean

  """
  The resource for the supporter-only content.

  If "viewerCanViewSupporterOnlyContent" is false, then this field will contain the original resource, with the URLs omitted. This allows you to use the details, such as the type (since the resource in the "resource" box will always be an image) or see the duration of the video.

  This field will be nil if "viewerCanViewSupporterOnlyContent" is true
  """
  supporterOnlyResource: Resource

  """Whether or not this content is supporter only."""
  isSupporterOnly: Boolean!

  """Whether or not the viewer is able to see this content."""
  viewerCanViewSupporterOnlyContent: Boolean!
}

type Post implements Node @key(fields: "id") {
  id: ID!

  """The reference of this post. Should always be used to reference this post."""
  reference: String!

  """The state of the post."""
  state: PostState!

  """The supporter-only status."""
  supporterOnlyStatus: SupporterOnlyStatus!

  """The contributor who contributed this post"""
  contributor: Account!

  """The club belonging to the post"""
  club: Club! @goField(forceResolver: true)

  """Content belonging to this post"""
  content: [PostContent!]!

  """
  A description for this post.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  description(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this description."""
  descriptionTranslations: [Translation!]!

  """The date and time of when this post was created"""
  createdAt: Time!

  """The date and time of when this post was posted"""
  postedAt: Time

  """Suggested posts for this post."""
  suggestedPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)
}

enum PostState {
  DRAFT
  REVIEW
  PUBLISHED
  DISCARDED
  REJECTED
  REMOVED
  ARCHIVED
  SUBMITTED
}

enum SupporterOnlyStatus {
  """None of the content requires supporting to view."""
  NONE

  """Some of the content requires supporting to view, at least 1 content piece is free."""
  PARTIAL

  """All of the content is supporter-only."""
  FULL
}

"""Create a new post. A club ID is required."""
input CreatePostInput {
  """The club ID that this post will belong to"""
  clubId: ID!
}

"""Update post audience."""
input UpdatePostAudienceInput {
  """The post to update"""
  id: ID!

  """The audience that this post belongs to"""
  audienceId: ID!
}

"""Add post content."""
input AddPostContentInput {
  """The post to update"""
  id: ID!

  """Image IDs for the content"""
  content: [String!]!
}

"""Remove post content."""
input RemovePostContentInput {
  """The post to update"""
  id: ID!

  """Content IDs for the content"""
  contentIds: [ID!]!
}

"""Update post content order."""
input UpdatePostContentOrderInput {
  """The post to update"""
  id: ID!

  """Content IDs for the content"""
  contentIds: [ID!]!
}

"""Update post content is supporter only."""
input UpdatePostContentIsSupporterOnlyInput {
  """The post to update"""
  id: ID!

  """Content IDs to update"""
  contentIds: [ID!]!

  """The change to make"""
  isSupporterOnly: Boolean!
}

"""Update post audience."""
input UpdatePostCategoriesInput {
  """The post to update"""
  id: ID!

  """Category IDs for this post"""
  categoryIds: [ID!]!
}

"""Update post characters."""
input UpdatePostCharactersInput {
  """The post to update"""
  id: ID!

  """Ids for all the characters"""
  characterIds: [ID!]!
}

"""Publish post."""
input SubmitPostInput {
  """The post to publish"""
  id: ID!
}

"""Delete post."""
input DeletePostInput {
  """The post to delete"""
  id: ID!
}

"""Archive post."""
input ArchivePostInput {
  """The post to archive"""
  id: ID!
}

"""Un-Archive post."""
input UnArchivePostInput {
  """The post to un-archive"""
  id: ID!
}

"""Payload for a created pending post"""
type CreatePostPayload {
  """The pending post after the creation"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostClubPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostAudiencePayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type AddPostContentPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type RemovePostContentPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostContentOrderPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostContentIsSupporterOnlyPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostCategoriesPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostCharactersPayload {
  """The post after the update"""
  post: Post
}

"""Payload for submitting a post"""
type SubmitPostPayload {
  """The post after being submitted"""
  post: Post
}

"""Payload for deleting a post"""
type DeletePostPayload {
  """The deleted post."""
  postId: ID
}

"""Payload for archiving a post"""
type ArchivePostPayload {
  """The archived post."""
  post: Post
}

"""Payload for un-archiving a post"""
type UnArchivePostPayload {
  """The un-archived post."""
  post: Post
}

"""Update post."""
input UpdatePostDescriptionInput {
  """The post to update"""
  id: ID!

  """
  The description to update.

  Validation: Max 280 characters. No links allowed.
  """
  description: String!

  """
  The localization for this description.

  Locale must be one from the languages query, or else the locale won't be accepted.
  """
  locale: BCP47!
}

"""Payload for updating a post description"""
type UpdatePostDescriptionPayload {
  """The post after the update"""
  post: Post
}

type PostEdge {
  cursor: String!
  node: Post!
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which posts connections can be sorted."""
enum PostsSort {
  """Posts by newest first"""
  NEW

  """Posts by top likes"""
  TOP

  """Posts by algorithm sort"""
  ALGORITHM
}

union Search = Category | Character | Series | Club

type SearchEdge {
  cursor: String!
  node: Search!
}

type SearchConnection {
  edges: [SearchEdge!]!
  pageInfo: PageInfo!
}

extend type Account {
  """Posts feed for the clubs that the account currently is a member of."""
  clubMembersPostsFeed(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)

  """Contributions specific to this account"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)

  """All posts liked by this account, sorted by most recent."""
  likedPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)
}

extend type Mutation {
  """
  Create a new post
  """
  createPost(input: CreatePostInput!): CreatePostPayload

  """
  Update a post in draft status - audience
  """
  updatePostAudience(input: UpdatePostAudienceInput!): UpdatePostAudiencePayload

  """
  Update a post in draft status - add content
  """
  addPostContent(input: AddPostContentInput!): AddPostContentPayload

  """
  Update a post in draft status - remove content
  """
  removePostContent(input: RemovePostContentInput!): RemovePostContentPayload

  """
  Update a post in draft status - update post content order - need to send exact same IDs
  """
  updatePostContentOrder(input: UpdatePostContentOrderInput!): UpdatePostContentOrderPayload

  """
  Update a post content - whether or not it is supporter only.

  If updating to true, the club must be able to post supporter-only content through "canCreateSupporterOnlyPosts"

  Can update to false even if "canCreateSupporterOnlyPosts" is false.
  """
  updatePostContentIsSupporterOnly(input: UpdatePostContentIsSupporterOnlyInput!): UpdatePostContentIsSupporterOnlyPayload

  """
  Update a post in draft status - characters
  """
  updatePostCharacters(input: UpdatePostCharactersInput!): UpdatePostCharactersPayload

  """
  Update a post in draft status - categories
  """
  updatePostCategories(input: UpdatePostCategoriesInput!): UpdatePostCategoriesPayload

  """
  Update a post in draft status - description
  """
  updatePostDescription(input: UpdatePostDescriptionInput!): UpdatePostDescriptionPayload

  """
  Submit a post.
  """
  submitPost(input: SubmitPostInput!): SubmitPostPayload

  """
  Delete a post. Can only be deleted if the post is in Draft, Archived, Removed, Discarded or Rejected state.
  """
  deletePost(input: DeletePostInput!): DeletePostPayload

  """
  Archive a post, removing it from public visibility.
  """
  archivePost(input: ArchivePostInput!): ArchivePostPayload

  """
  Un-archive a post, putting it back in public view.
  """
  unArchivePost(input: UnArchivePostInput!): UnArchivePostPayload
}

extend type Query {
  """Perform a search across multiple types."""
  search(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """What you want to search."""
    query: String!
  ): SearchConnection!

  """Posts feed. The default."""
  postsFeed(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The seed to use for posts feed randomizer. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String
  ): PostConnection!

  """Look up a single post"""
  post(
    """Look up a post by a reference #"""
    reference: String!
  ): Post

  """Search multiple posts"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!
}

extend type Category {
  """Posts belonging to this category"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Character {
  """Posts belonging to this character"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Series {
  """Posts belonging to this series"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Club {
  """Posts belonging to this club"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Audience {
  """Posts belonging to this audience"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """The seed to use for "algorithm" sort. Otherwise, uses a constant value that changes every 24 hours."""
    seed: String

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}
`, BuiltIn: false},
	{Name: "../../../schema/schema.graphql", Input: `extend type Account @key(fields: "id")  {
  id: ID! @external
}
`, BuiltIn: false},
	{Name: "../../../schema/series/schema.graphql", Input: `type Series implements Node @key(fields: "id") {
  """An ID pointing to this series."""
  id: ID!

  """An ID that can be used to uniquely-identify this series. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A title for this series.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  title(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!
}

type SeriesEdge {
  cursor: String!
  node: Series!
}

type SeriesConnection {
  edges: [SeriesEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which series connections can be sorted."""
enum SeriesSort {
  """Series by newest first"""
  NEW

  """Series by top likes"""
  TOP

  """Series by most posts"""
  POPULAR
}

extend type Query {
  """Get or search all series"""
  series(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by series slugs."""
    slugs: [String!]

    """Filter by the title of the series."""
    title: String

    """Exclude empty series (series that have 0 posts)."""
    excludeEmpty: Boolean! = false

    """Sorting options for series."""
    sortBy: SeriesSort! = POPULAR
  ): SeriesConnection!

  """Get a single serial."""
  serial(
    """Search by slug of the serial."""
    slug: String!
  ): Series
}

"""Create a new series."""
input CreateSeriesInput {
  """
  The chosen slug for the series.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen title for the series.

  Validation: Max 25 characters.
  """
  title: String!
}

"""Payload for a new series"""
type CreateSeriesPayload {
  """The series after creation"""
  series: Series

  """Validation for creating a new series"""
  validation: CreateSeriesValidation
}

"""Validation for creating a new series"""
enum CreateSeriesValidation {
  SLUG_TAKEN
}

"""Update series."""
input UpdateSeriesTitleInput {
  """The series to update"""
  id: ID!

  """
  The title to update.

  Validation: Max 25 characters.
  """
  title: String!

  """
  The localization for this title.

  Locale must be one from the languages query, or else the locale won't be accepted.
  """
  locale: BCP47!
}

"""Payload for updating series"""
type UpdateSeriesTitlePayload {
  """The series after update"""
  series: Series
}

extend type Mutation {
  """
  Create a new series
  """
  createSeries(input: CreateSeriesInput!): CreateSeriesPayload

  """
  Update series title
  """
  updateSeriesTitle(input: UpdateSeriesTitleInput!): UpdateSeriesTitlePayload
}
`, BuiltIn: false},
	{Name: "../../../schema/topic/schema.graphql", Input: `type Topic implements Node @key(fields: "id") {
  """An ID pointing to this topic."""
  id: ID!

  """An ID that can be used to uniquely-identify this category. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's banner."""
  banner: Resource

  """A URL pointing to the object's banner."""
  bannerMedia: Media

  """
  A title for this topic.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  title(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """
  A description for this topic.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  description(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this topic."""
  descriptionTranslations: [Translation!]!

  """The weight of this topic."""
  weight: Int!

  """All categories linked to this topic."""
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    slugs: [String!]

    """Filter by the title of the category."""
    title: String

    """Sorting options for categories."""
    sortBy: CategoriesSort! = POPULAR
  ): CategoryConnection! @goField(forceResolver: true)
}

type TopicEdge {
  cursor: String!
  node: Topic!
}

type TopicConnection {
  edges: [TopicEdge!]!
  pageInfo: PageInfo!
}

extend type Query {
  """
  Search all topics.

  Topics are sorted by the "weight" field. Higher weights are displayed at the top, in descending order.
  """
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TopicConnection!

  """Get a single topic."""
  topic(
    """Search by slug of the topic."""
    slug: String!
  ): Topic
}

"""Create a new topic."""
input CreateTopicInput {
  """
  The chosen slug for the topic.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen title for the topic.

  Validation: Max 25 characters.
  """
  title: String!

  """
  The chosen description for the topic.

  Validation: Markdown allowed.
  """
  description: String!

  """
  The assigned weight for this topic.
  """
  weight: Int!
}

"""Payload for a new topic"""
type CreateTopicPayload {
  """The topic after creation"""
  topic: Topic

  """Validation for creating a new topic"""
  validation: CreateTopicValidation
}

"""Validation for creating a new topic"""
enum CreateTopicValidation {
  SLUG_TAKEN
}

"""Update topic."""
input UpdateTopicTitleInput {
  """The topic to update"""
  id: ID!

  """
  The title to update.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update topic."""
input UpdateTopicWeightInput {
  """The topic to update"""
  id: ID!

  """
  The weight to update to.
  """
  weight: Int!
}

"""Update topic."""
input UpdateTopicDescriptionInput {
  """The topic to update"""
  id: ID!

  """
  The description to update.

  Validation: Markdown allowed.
  """
  description: String!

  """The localization for this description"""
  locale: BCP47!
}

"""Update topic."""
input UpdateTopicBannerInput {
  """The category to update"""
  id: ID!

  """The banner"""
  banner: String!
}

"""Payload for updating topic"""
type UpdateTopicTitlePayload {
  """The topic after update"""
  topic: Topic
}

"""Payload for updating topic"""
type UpdateTopicDescriptionPayload {
  """The topic after update"""
  topic: Topic
}

"""Payload for updating topic"""
type UpdateTopicWeightPayload {
  """The topic after update"""
  topic: Topic
}

"""Payload for updating topic"""
type UpdateTopicBannerPayload {
  """The topic after update"""
  topic: Topic
}

extend type Mutation {
  """
  Create a new topic
  """
  createTopic(input: CreateTopicInput!): CreateTopicPayload

  """
  Update topic title
  """
  updateTopicTitle(input: UpdateTopicTitleInput!): UpdateTopicTitlePayload

  """
  Update topic description
  """
  updateTopicDescription(input: UpdateTopicDescriptionInput!): UpdateTopicDescriptionPayload

  """
  Update topic weight
  """
  updateTopicWeight(input: UpdateTopicWeightInput!): UpdateTopicWeightPayload

  """
  Update topic banner
  """
  updateTopicBanner(input: UpdateTopicBannerInput!): UpdateTopicBannerPayload
}
`, BuiltIn: false},
	{Name: "../../../../../libraries/graphql/schema.graphql", Input: `scalar Time

scalar Date

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

directive @goField(forceResolver: Boolean) on INPUT_FIELD_DEFINITION
  | FIELD_DEFINITION

directive @entityResolver(multi: Boolean) on OBJECT

"""Localization formatted in BCP47."""
scalar BCP47

type Language {
  """
  BCP47 locale
  """
  locale: BCP47!

  """
  Fully qualified name
  """
  name: String!
}

type Translation {
  """The language linked to this translation."""
  language: Language!

  """The translation text."""
  text: String!
}

enum Currency {
  USD
  CAD
  AUD
  JPY
  GBP
  EUR
}

"""Identifies the type of resource"""
enum ResourceType {
  IMAGE
  VIDEO
}

"""A type representing a url to the resource and the mimetype"""
type ResourceUrl {
  url: URI!
  mimeType: String!
}

extend type ResourceProgress @key(fields: "id") {
  """An ID identifying this progress."""
  id: ID! @external
}

"""
A resource represents an image or a video format that contains an ID to uniquely identify it,
and urls to access the resources. We have many urls in order to provide a fallback for older browsers

We also identify the type of resource (image or video) to make it easy to distinguish them
"""
type Resource {
  """An ID uniquely identifying this resource."""
  id: ID!

  """The type of resource - either an image or a video."""
  type: ResourceType!

  """Whether or not the resource is processed. Can be used for additional permission checks."""
  processed: Boolean!

  """URLs to access the resource."""
  urls: [ResourceUrl!]!

  """The width."""
  width: Int!

  """The height."""
  height: Int!

  """Duration, if video."""
  videoDuration: Int!

  """Video thumbnail, if video."""
  videoThumbnail: ResourceUrl

  """Whether or not the video has audio."""
  videoNoAudio: Boolean!

  """A hex-code color of the resource that can be used in-place while the resource is loading."""
  preview: String!

  """
  This field identifies the progress for the resource.

  If the resource is not yet processed, this will not be nil.

  If we have some sort of state information available about the progress, this will not be nil.
  """
  progress: ResourceProgress

  """
  Whether or not this resource failed to process.

  A failure can happen if:
  - The supplied image is an unsupported format. This can happen if for example, someone submits a JPEG (unsupported) that was renamed to a PNG (supported)
  - The supplied image is corrupted.
  - The supplied video is invalid or corrupted.

  """
  failed: Boolean!
}

"""Type used to access a specific image."""
type ImageMediaAccess {
  """The width of the image."""
  width: Int!

  """The height of the image."""
  height: Int!

  """The URL used to access the image."""
  url: URI!
}

"""
All variants available for an image.
"""
type ImageMediaVariants {
  """50x50 crop of an image. Suitable for mini icons."""
  mini: ImageMediaAccess!
  """100x100 crop of an image. Suitable for icons."""
  icon: ImageMediaAccess!
  """150x150 crop of an image. Suitable for small previews."""
  thumbnail: ImageMediaAccess!
  """680px width or height resize."""
  small: ImageMediaAccess!
  """1200px width or height resize."""
  medium: ImageMediaAccess!
  """2048px width or height resize."""
  large: ImageMediaAccess!
  """4096px width or height resize."""
  hd: ImageMediaAccess!
  """720px width or height resize."""
  banner: ImageMediaAccess!
  """360px width or height resize."""
  smallBanner: ImageMediaAccess!
}

type ColorPalette {
  percent: Float!
  red: Int!
  green: Int!
  blue: Int!
}

extend type MediaProgress @key(fields: "id") {
  """An ID identifying this progress."""
  id: ID! @external
}

"""
RawMedia represents an unprocessed media object.

While a media object is RawMedia, it is still in the process of processing.
"""
type RawMedia {
  """An ID uniquely identifying this media."""
  id: ID!

  """The name of the original file, when it was uploaded."""
  originalFileName: String!

  """Whether or not the media failed processing."""
  failed: Boolean!

  """The current progress of the media processing."""
  progress: MediaProgress
}

type ImageMedia {
  """An ID uniquely identifying this media."""
  id: ID!

  """All available variants for this media."""
  variants: ImageMediaVariants!

  """Color palettes for this image."""
  colorPalettes: [ColorPalette!]!
}

"""Data about the aspect ratio."""
type AspectRatio {
  """The width."""
  width: Int!
  """The height."""
  height: Int!
}

"""A video/mp4 video container."""
type MP4VideoContainer {
  """The URL used to access the container."""
  url: URI!

  """The bitrate of the video."""
  bitrate: Int!

  """The width of the video."""
  width: Int!

  """The height of the video."""
  height: Int!
}

enum MediaDeviceType {
  MOBILE
  DESKTOP
  UNIVERSAL
}

"""An application/x-mpegURL video container."""
type HLSVideoContainer {
  """The URL used to access the container."""
  url: URI!

  """The target device for this HLS container."""
  targetDevice: MediaDeviceType!
}

"""A container used to access the video."""
union VideoContainer = HLSVideoContainer | MP4VideoContainer

type VideoMedia {
  """An ID uniquely identifying this media."""
  id: ID!

  """The cover for this image media."""
  cover: ImageMedia!

  """The aspect ratio of the media."""
  aspectRatio: AspectRatio!

  """
  The container for videos.

  A video can have multiple containers, for example, an HLS video for general playback, and an .mp4 video as fallback.
  """
  containers: [VideoContainer!]!

  """The video duration, in milliseconds."""
  duration: Int!

  """Whether or not the video has audio."""
  hasAudio: Boolean!
}

union Media = VideoMedia | ImageMedia | RawMedia
`, BuiltIn: false},
	{Name: "../../../../../libraries/graphql/relay/schema.graphql", Input: `type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface Node {
  id: ID!
}`, BuiltIn: false},
	{Name: "../../../federation/directives.graphql", Input: `
	scalar _Any
	scalar _FieldSet
	
	directive @external on FIELD_DEFINITION
	directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
	directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
	directive @extends on OBJECT | INTERFACE

	directive @key(fields: _FieldSet!, resolvable: Boolean) repeatable on OBJECT | INTERFACE
	directive @link(import: [String!], url: String!) repeatable on SCHEMA
	directive @shareable on OBJECT | FIELD_DEFINITION
	directive @tag repeatable on OBJECT | FIELD_DEFINITION | INTERFACE | UNION
	directive @override(from: String!) on FIELD_DEFINITION
	directive @inaccessible on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
`, BuiltIn: true},
	{Name: "../../../federation/entity.graphql", Input: `
# a union of all types that use the @key directive
union _Entity = Account | Audience | Category | Character | Club | ClubMember | MediaProgress | Post | PostLike | ResourceProgress | Series | Topic

# fake type to build resolver interfaces for users to implement
type Entity {
		findAccountByID(id: ID!,): Account!
	findAudienceByID(id: ID!,): Audience!
	findCategoryByID(id: ID!,): Category!
	findCharacterByID(id: ID!,): Character!
	findClubByID(id: ID!,): Club!
	findClubMemberByID(id: ID!,): ClubMember!
	findPostByID(id: ID!,): Post!
	findPostLikeByID(id: ID!,): PostLike!
	findSeriesByID(id: ID!,): Series!
	findTopicByID(id: ID!,): Topic!

}

type _Service {
  sdl: String
}

extend type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_entityResolver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["multi"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("multi"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["multi"] = arg0
	return args, nil
}

func (ec *executionContext) field_Account_clubMembersPostsFeed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Account_clubMemberships_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 bool
	if tmp, ok := rawArgs["supporter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supporter"))
		arg4, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supporter"] = arg4
	var arg5 types.ClubMembersSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg5, err = ec.unmarshalNClubMembersSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMembersSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg5
	return args, nil
}

func (ec *executionContext) field_Account_clubs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["slugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slugs"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg5
	var arg6 types.ClubsSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg6, err = ec.unmarshalNClubsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubsSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg6
	return args, nil
}

func (ec *executionContext) field_Account_likedPosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Account_posts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["audienceSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audienceSlugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["audienceSlugs"] = arg4
	var arg5 []string
	if tmp, ok := rawArgs["categorySlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categorySlugs"))
		arg5, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categorySlugs"] = arg5
	var arg6 []string
	if tmp, ok := rawArgs["characterSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("characterSlugs"))
		arg6, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["characterSlugs"] = arg6
	var arg7 []string
	if tmp, ok := rawArgs["seriesSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seriesSlugs"))
		arg7, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seriesSlugs"] = arg7
	var arg8 *types.PostState
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg8, err = ec.unmarshalOPostState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg8
	var arg9 []types.SupporterOnlyStatus
	if tmp, ok := rawArgs["supporterOnlyStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supporterOnlyStatus"))
		arg9, err = ec.unmarshalOSupporterOnlyStatus2ᚕoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatusᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supporterOnlyStatus"] = arg9
	var arg10 *string
	if tmp, ok := rawArgs["seed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed"))
		arg10, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed"] = arg10
	var arg11 types.PostsSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg11, err = ec.unmarshalNPostsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostsSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg11
	return args, nil
}

func (ec *executionContext) field_Audience_posts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["categorySlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categorySlugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categorySlugs"] = arg4
	var arg5 []string
	if tmp, ok := rawArgs["characterSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("characterSlugs"))
		arg5, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["characterSlugs"] = arg5
	var arg6 []string
	if tmp, ok := rawArgs["seriesSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seriesSlugs"))
		arg6, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seriesSlugs"] = arg6
	var arg7 *types.PostState
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg7, err = ec.unmarshalOPostState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg7
	var arg8 []types.SupporterOnlyStatus
	if tmp, ok := rawArgs["supporterOnlyStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supporterOnlyStatus"))
		arg8, err = ec.unmarshalOSupporterOnlyStatus2ᚕoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatusᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supporterOnlyStatus"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["seed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed"] = arg9
	var arg10 types.PostsSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg10, err = ec.unmarshalNPostsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostsSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg10
	return args, nil
}

func (ec *executionContext) field_Audience_title_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg0, err = ec.unmarshalOBCP472ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg0
	return args, nil
}

func (ec *executionContext) field_Category_posts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["audienceSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audienceSlugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["audienceSlugs"] = arg4
	var arg5 []string
	if tmp, ok := rawArgs["characterSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("characterSlugs"))
		arg5, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["characterSlugs"] = arg5
	var arg6 []string
	if tmp, ok := rawArgs["seriesSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seriesSlugs"))
		arg6, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seriesSlugs"] = arg6
	var arg7 *types.PostState
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg7, err = ec.unmarshalOPostState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg7
	var arg8 []types.SupporterOnlyStatus
	if tmp, ok := rawArgs["supporterOnlyStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supporterOnlyStatus"))
		arg8, err = ec.unmarshalOSupporterOnlyStatus2ᚕoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatusᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supporterOnlyStatus"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["seed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed"] = arg9
	var arg10 types.PostsSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg10, err = ec.unmarshalNPostsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostsSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg10
	return args, nil
}

func (ec *executionContext) field_Category_title_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg0, err = ec.unmarshalOBCP472ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg0
	return args, nil
}

func (ec *executionContext) field_Character_name_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg0, err = ec.unmarshalOBCP472ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg0
	return args, nil
}

func (ec *executionContext) field_Character_posts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["audienceSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audienceSlugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["audienceSlugs"] = arg4
	var arg5 []string
	if tmp, ok := rawArgs["categorySlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categorySlugs"))
		arg5, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categorySlugs"] = arg5
	var arg6 *types.PostState
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg6, err = ec.unmarshalOPostState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg6
	var arg7 []types.SupporterOnlyStatus
	if tmp, ok := rawArgs["supporterOnlyStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supporterOnlyStatus"))
		arg7, err = ec.unmarshalOSupporterOnlyStatus2ᚕoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatusᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supporterOnlyStatus"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["seed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed"] = arg8
	var arg9 types.PostsSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg9, err = ec.unmarshalNPostsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostsSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg9
	return args, nil
}

func (ec *executionContext) field_Club_characters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["slugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slugs"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg5
	var arg6 types.CharactersSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg6, err = ec.unmarshalNCharactersSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharactersSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg6
	return args, nil
}

func (ec *executionContext) field_Club_members_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 bool
	if tmp, ok := rawArgs["supporter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supporter"))
		arg4, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supporter"] = arg4
	var arg5 types.ClubMembersSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg5, err = ec.unmarshalNClubMembersSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMembersSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg5
	return args, nil
}

func (ec *executionContext) field_Club_posts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["audienceSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audienceSlugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["audienceSlugs"] = arg4
	var arg5 []string
	if tmp, ok := rawArgs["categorySlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categorySlugs"))
		arg5, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categorySlugs"] = arg5
	var arg6 []string
	if tmp, ok := rawArgs["characterSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("characterSlugs"))
		arg6, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["characterSlugs"] = arg6
	var arg7 []string
	if tmp, ok := rawArgs["seriesSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seriesSlugs"))
		arg7, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seriesSlugs"] = arg7
	var arg8 *types.PostState
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg8, err = ec.unmarshalOPostState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg8
	var arg9 []types.SupporterOnlyStatus
	if tmp, ok := rawArgs["supporterOnlyStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supporterOnlyStatus"))
		arg9, err = ec.unmarshalOSupporterOnlyStatus2ᚕoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatusᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supporterOnlyStatus"] = arg9
	var arg10 *string
	if tmp, ok := rawArgs["seed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed"))
		arg10, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed"] = arg10
	var arg11 types.PostsSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg11, err = ec.unmarshalNPostsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostsSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg11
	return args, nil
}

func (ec *executionContext) field_Club_suspensionLogs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Entity_findAccountByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findAudienceByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findCategoryByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findCharacterByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findClubByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findClubMemberByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findPostByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findPostLikeByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findSeriesByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findTopicByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 relay.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addCategoryAlternativeTitle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.AddCategoryAlternativeTitleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddCategoryAlternativeTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddCategoryAlternativeTitleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addClubSlugAlias_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.AddClubSlugAliasInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddClubSlugAliasInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddClubSlugAliasInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addPostContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.AddPostContentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddPostContentInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddPostContentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_archivePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.ArchivePostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNArchivePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐArchivePostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAudience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CreateAudienceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateAudienceInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateAudienceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CreateCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateCategoryInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCharacter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CreateCharacterInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateCharacterInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCharacterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createClub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CreateClubInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateClubInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createGameSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CreateGameSessionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateGameSessionInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateGameSessionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CreatePostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreatePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreatePostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSeries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CreateSeriesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateSeriesInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateSeriesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTopic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.CreateTopicInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateTopicInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateTopicInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.DeletePostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeletePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDeletePostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_disableClubCharacters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.DisableClubCharactersInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDisableClubCharactersInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDisableClubCharactersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_disableClubSupporterOnlyPosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.DisableClubSupporterOnlyPostsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDisableClubSupporterOnlyPostsInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDisableClubSupporterOnlyPostsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_enableClubCharacters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.EnableClubCharactersInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEnableClubCharactersInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐEnableClubCharactersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_enableClubSupporterOnlyPosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.EnableClubSupporterOnlyPostsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEnableClubSupporterOnlyPostsInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐEnableClubSupporterOnlyPostsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_joinClub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.JoinClubInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNJoinClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐJoinClubInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_leaveClub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.LeaveClubInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLeaveClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐLeaveClubInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_likePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.LikePostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLikePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐLikePostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_promoteClubSlugAliasToDefault_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.PromoteClubSlugAliasToDefaultInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPromoteClubSlugAliasToDefaultInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPromoteClubSlugAliasToDefaultInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeCategoryAlternativeTitle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.RemoveCategoryAlternativeTitleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRemoveCategoryAlternativeTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemoveCategoryAlternativeTitleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeClubSlugAlias_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.RemoveClubSlugAliasInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRemoveClubSlugAliasInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemoveClubSlugAliasInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removePostContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.RemovePostContentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRemovePostContentInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemovePostContentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_spinRoulette_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.SpinRouletteInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSpinRouletteInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSpinRouletteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.SubmitPostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSubmitPostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSubmitPostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_suspendClub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.SuspendClubInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSuspendClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSuspendClubInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_terminateClub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.TerminateClubInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTerminateClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTerminateClubInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_transferClubOwnership_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.TransferClubOwnershipInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTransferClubOwnershipInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTransferClubOwnershipInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unArchivePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UnArchivePostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUnArchivePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnArchivePostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unSuspendClub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UnSuspendClubInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUnSuspendClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnSuspendClubInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unTerminateClub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UnTerminateClubInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUnTerminateClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnTerminateClubInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_undoLikePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UndoLikePostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUndoLikePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUndoLikePostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAudienceBanner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateAudienceBannerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateAudienceBannerInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceBannerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAudienceIsStandard_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateAudienceIsStandardInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateAudienceIsStandardInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceIsStandardInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAudienceTitle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateAudienceTitleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateAudienceTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceTitleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCategoryTitle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateCategoryTitleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateCategoryTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCategoryTitleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCategoryTopic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateCategoryTopicInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateCategoryTopicInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCategoryTopicInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCharacterName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateCharacterNameInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateCharacterNameInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCharacterNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateClubCharactersLimit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateClubCharactersLimitInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateClubCharactersLimitInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubCharactersLimitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateClubName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateClubNameInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateClubNameInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateClubThumbnail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateClubThumbnailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateClubThumbnailInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubThumbnailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCurationProfileAudience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateCurationProfileAudienceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateCurationProfileAudienceInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileAudienceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCurationProfileCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateCurationProfileCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateCurationProfileCategoryInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCurationProfileDateOfBirth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateCurationProfileDateOfBirthInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateCurationProfileDateOfBirthInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileDateOfBirthInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePostAudience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdatePostAudienceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePostAudienceInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostAudienceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePostCategories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdatePostCategoriesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePostCategoriesInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostCategoriesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePostCharacters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdatePostCharactersInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePostCharactersInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostCharactersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePostContentIsSupporterOnly_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdatePostContentIsSupporterOnlyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePostContentIsSupporterOnlyInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostContentIsSupporterOnlyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePostContentOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdatePostContentOrderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePostContentOrderInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostContentOrderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePostDescription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdatePostDescriptionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePostDescriptionInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostDescriptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSeriesTitle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateSeriesTitleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateSeriesTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateSeriesTitleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTopicBanner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateTopicBannerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateTopicBannerInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicBannerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTopicDescription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateTopicDescriptionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateTopicDescriptionInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicDescriptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTopicTitle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateTopicTitleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateTopicTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicTitleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTopicWeight_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.UpdateTopicWeightInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateTopicWeightInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicWeightInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Post_description_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg0, err = ec.unmarshalOBCP472ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg0
	return args, nil
}

func (ec *executionContext) field_Post_suggestedPosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query__entities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []map[string]interface{}
	if tmp, ok := rawArgs["representations"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("representations"))
		arg0, err = ec.unmarshalN_Any2ᚕmapᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["representations"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_audience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_audiences_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["slugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slugs"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg5
	var arg6 types.AudiencesSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg6, err = ec.unmarshalNAudiencesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudiencesSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_categories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["slugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slugs"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg5
	var arg6 bool
	if tmp, ok := rawArgs["excludeEmpty"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("excludeEmpty"))
		arg6, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["excludeEmpty"] = arg6
	var arg7 types.CategoriesSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg7, err = ec.unmarshalNCategoriesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoriesSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg7
	return args, nil
}

func (ec *executionContext) field_Query_category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_character_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["seriesSlug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seriesSlug"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seriesSlug"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["clubSlug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubSlug"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clubSlug"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_characters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["clubCharacters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubCharacters"))
		arg4, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clubCharacters"] = arg4
	var arg5 []string
	if tmp, ok := rawArgs["slugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slugs"))
		arg5, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slugs"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["seriesSlug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seriesSlug"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seriesSlug"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["clubSlug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubSlug"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clubSlug"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg8
	var arg9 bool
	if tmp, ok := rawArgs["excludeEmpty"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("excludeEmpty"))
		arg9, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["excludeEmpty"] = arg9
	var arg10 types.CharactersSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg10, err = ec.unmarshalNCharactersSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharactersSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg10
	return args, nil
}

func (ec *executionContext) field_Query_club_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_clubs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["slugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slugs"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg5
	var arg6 *bool
	if tmp, ok := rawArgs["suspended"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suspended"))
		arg6, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["suspended"] = arg6
	var arg7 *bool
	if tmp, ok := rawArgs["terminated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminated"))
		arg7, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["terminated"] = arg7
	var arg8 bool
	if tmp, ok := rawArgs["excludeEmpty"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("excludeEmpty"))
		arg8, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["excludeEmpty"] = arg8
	var arg9 types.ClubsSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg9, err = ec.unmarshalNClubsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubsSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg9
	return args, nil
}

func (ec *executionContext) field_Query_discoverClubs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_gameSessionStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["reference"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reference"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_post_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["reference"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reference"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_postsFeed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["seed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_posts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["audienceSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audienceSlugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["audienceSlugs"] = arg4
	var arg5 []string
	if tmp, ok := rawArgs["categorySlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categorySlugs"))
		arg5, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categorySlugs"] = arg5
	var arg6 []string
	if tmp, ok := rawArgs["characterSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("characterSlugs"))
		arg6, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["characterSlugs"] = arg6
	var arg7 []string
	if tmp, ok := rawArgs["seriesSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seriesSlugs"))
		arg7, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seriesSlugs"] = arg7
	var arg8 *types.PostState
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg8, err = ec.unmarshalOPostState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg8
	var arg9 []types.SupporterOnlyStatus
	if tmp, ok := rawArgs["supporterOnlyStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supporterOnlyStatus"))
		arg9, err = ec.unmarshalOSupporterOnlyStatus2ᚕoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatusᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supporterOnlyStatus"] = arg9
	var arg10 *string
	if tmp, ok := rawArgs["seed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed"))
		arg10, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed"] = arg10
	var arg11 types.PostsSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg11, err = ec.unmarshalNPostsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostsSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg11
	return args, nil
}

func (ec *executionContext) field_Query_search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_serial_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_series_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["slugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slugs"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg5
	var arg6 bool
	if tmp, ok := rawArgs["excludeEmpty"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("excludeEmpty"))
		arg6, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["excludeEmpty"] = arg6
	var arg7 types.SeriesSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg7, err = ec.unmarshalNSeriesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg7
	return args, nil
}

func (ec *executionContext) field_Query_topic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_topics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Series_characters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["slugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slugs"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg5
	var arg6 types.CharactersSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg6, err = ec.unmarshalNCharactersSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharactersSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg6
	return args, nil
}

func (ec *executionContext) field_Series_posts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["audienceSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audienceSlugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["audienceSlugs"] = arg4
	var arg5 []string
	if tmp, ok := rawArgs["categorySlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categorySlugs"))
		arg5, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categorySlugs"] = arg5
	var arg6 []string
	if tmp, ok := rawArgs["characterSlugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("characterSlugs"))
		arg6, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["characterSlugs"] = arg6
	var arg7 *types.PostState
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg7, err = ec.unmarshalOPostState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg7
	var arg8 []types.SupporterOnlyStatus
	if tmp, ok := rawArgs["supporterOnlyStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supporterOnlyStatus"))
		arg8, err = ec.unmarshalOSupporterOnlyStatus2ᚕoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatusᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supporterOnlyStatus"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["seed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed"] = arg9
	var arg10 types.PostsSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg10, err = ec.unmarshalNPostsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostsSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg10
	return args, nil
}

func (ec *executionContext) field_Series_title_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg0, err = ec.unmarshalOBCP472ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg0
	return args, nil
}

func (ec *executionContext) field_Topic_categories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 []string
	if tmp, ok := rawArgs["slugs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slugs"))
		arg4, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slugs"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg5
	var arg6 types.CategoriesSort
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg6, err = ec.unmarshalNCategoriesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoriesSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg6
	return args, nil
}

func (ec *executionContext) field_Topic_description_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg0, err = ec.unmarshalOBCP472ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg0
	return args, nil
}

func (ec *executionContext) field_Topic_title_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg0, err = ec.unmarshalOBCP472ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Account_clubsLimit(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_clubsLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().ClubsLimit(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_clubsLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_clubsCount(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_clubsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().ClubsCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_clubsCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_hasNonTerminatedClubs(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_hasNonTerminatedClubs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().HasNonTerminatedClubs(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_hasNonTerminatedClubs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_clubs(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_clubs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().Clubs(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["slugs"].([]string), fc.Args["name"].(*string), fc.Args["sortBy"].(types.ClubsSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubConnection)
	fc.Result = res
	return ec.marshalNClubConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_clubs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ClubConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ClubConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Account_clubs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Account_clubMembershipsLimit(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_clubMembershipsLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().ClubMembershipsLimit(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_clubMembershipsLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_clubMembershipsCount(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_clubMembershipsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().ClubMembershipsCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_clubMembershipsCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_clubMemberships(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_clubMemberships(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().ClubMemberships(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["supporter"].(bool), fc.Args["sortBy"].(types.ClubMembersSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubMemberConnection)
	fc.Result = res
	return ec.marshalNClubMemberConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMemberConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_clubMemberships(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ClubMemberConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ClubMemberConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubMemberConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Account_clubMemberships_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Account_curationProfile(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_curationProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().CurationProfile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CurationProfile)
	fc.Result = res
	return ec.marshalNCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCurationProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_curationProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CurationProfile_id(ctx, field)
			case "completed":
				return ec.fieldContext_CurationProfile_completed(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_CurationProfile_dateOfBirth(ctx, field)
			case "audience":
				return ec.fieldContext_CurationProfile_audience(ctx, field)
			case "category":
				return ec.fieldContext_CurationProfile_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CurationProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_clubMembersPostsFeed(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_clubMembersPostsFeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().ClubMembersPostsFeed(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_clubMembersPostsFeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Account_clubMembersPostsFeed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Account_posts(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_posts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().Posts(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["audienceSlugs"].([]string), fc.Args["categorySlugs"].([]string), fc.Args["characterSlugs"].([]string), fc.Args["seriesSlugs"].([]string), fc.Args["state"].(*types.PostState), fc.Args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), fc.Args["seed"].(*string), fc.Args["sortBy"].(types.PostsSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_posts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Account_posts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Account_likedPosts(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_likedPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().LikedPosts(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_likedPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Account_likedPosts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Account_id(ctx context.Context, field graphql.CollectedField, obj *types.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddCategoryAlternativeTitlePayload_category(ctx context.Context, field graphql.CollectedField, obj *types.AddCategoryAlternativeTitlePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddCategoryAlternativeTitlePayload_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Category)
	fc.Result = res
	return ec.marshalOCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddCategoryAlternativeTitlePayload_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddCategoryAlternativeTitlePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddClubSlugAliasPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.AddClubSlugAliasPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddClubSlugAliasPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddClubSlugAliasPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddClubSlugAliasPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddClubSlugAliasPayload_validation(ctx context.Context, field graphql.CollectedField, obj *types.AddClubSlugAliasPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddClubSlugAliasPayload_validation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AddClubSlugAliasValidation)
	fc.Result = res
	return ec.marshalOAddClubSlugAliasValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddClubSlugAliasValidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddClubSlugAliasPayload_validation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddClubSlugAliasPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AddClubSlugAliasValidation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddPostContentPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.AddPostContentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddPostContentPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddPostContentPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddPostContentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArchivePostPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.ArchivePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArchivePostPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArchivePostPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArchivePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AspectRatio_width(ctx context.Context, field graphql.CollectedField, obj *graphql1.AspectRatio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AspectRatio_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AspectRatio_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AspectRatio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AspectRatio_height(ctx context.Context, field graphql.CollectedField, obj *graphql1.AspectRatio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AspectRatio_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AspectRatio_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AspectRatio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_id(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_reference(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_slug(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_thumbnail(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_banner(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_banner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Banner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_banner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_bannerMedia(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_bannerMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BannerMedia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphql1.Media)
	fc.Result = res
	return ec.marshalOMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_bannerMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Media does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_title(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Audience().Title(rctx, obj, fc.Args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Audience_title_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Audience_standard(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_standard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_standard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_titleTranslations(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_titleTranslations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TitleTranslations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.Translation)
	fc.Result = res
	return ec.marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_titleTranslations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Translation_language(ctx, field)
			case "text":
				return ec.fieldContext_Translation_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Translation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_totalLikes(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_totalLikes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalLikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_totalLikes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_totalPosts(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_totalPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPosts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_totalPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audience_posts(ctx context.Context, field graphql.CollectedField, obj *types.Audience) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audience_posts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Audience().Posts(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["categorySlugs"].([]string), fc.Args["characterSlugs"].([]string), fc.Args["seriesSlugs"].([]string), fc.Args["state"].(*types.PostState), fc.Args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), fc.Args["seed"].(*string), fc.Args["sortBy"].(types.PostsSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audience_posts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Audience_posts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _AudienceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.AudienceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AudienceConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AudienceEdge)
	fc.Result = res
	return ec.marshalNAudienceEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AudienceConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AudienceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_AudienceEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_AudienceEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AudienceEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AudienceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.AudienceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AudienceConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AudienceConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AudienceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AudienceCurationProfile_completed(ctx context.Context, field graphql.CollectedField, obj *types.AudienceCurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AudienceCurationProfile_completed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Completed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AudienceCurationProfile_completed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AudienceCurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AudienceCurationProfile_skipped(ctx context.Context, field graphql.CollectedField, obj *types.AudienceCurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AudienceCurationProfile_skipped(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skipped, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AudienceCurationProfile_skipped(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AudienceCurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AudienceCurationProfile_audiences(ctx context.Context, field graphql.CollectedField, obj *types.AudienceCurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AudienceCurationProfile_audiences(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AudienceCurationProfile().Audiences(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Audience)
	fc.Result = res
	return ec.marshalNAudience2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AudienceCurationProfile_audiences(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AudienceCurationProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Audience_id(ctx, field)
			case "reference":
				return ec.fieldContext_Audience_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Audience_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Audience_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Audience_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Audience_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Audience_title(ctx, field)
			case "standard":
				return ec.fieldContext_Audience_standard(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Audience_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Audience_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Audience_totalPosts(ctx, field)
			case "posts":
				return ec.fieldContext_Audience_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audience", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AudienceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.AudienceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AudienceEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AudienceEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AudienceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AudienceEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.AudienceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AudienceEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Audience)
	fc.Result = res
	return ec.marshalNAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AudienceEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AudienceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Audience_id(ctx, field)
			case "reference":
				return ec.fieldContext_Audience_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Audience_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Audience_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Audience_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Audience_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Audience_title(ctx, field)
			case "standard":
				return ec.fieldContext_Audience_standard(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Audience_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Audience_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Audience_totalPosts(ctx, field)
			case "posts":
				return ec.fieldContext_Audience_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audience", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_id(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_reference(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_slug(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_thumbnail(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_banner(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_banner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Banner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_banner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_bannerMedia(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_bannerMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BannerMedia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphql1.Media)
	fc.Result = res
	return ec.marshalOMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_bannerMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Media does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_title(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Category().Title(rctx, obj, fc.Args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Category_title_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Category_titleTranslations(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_titleTranslations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TitleTranslations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.Translation)
	fc.Result = res
	return ec.marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_titleTranslations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Translation_language(ctx, field)
			case "text":
				return ec.fieldContext_Translation_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Translation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_alternativeTitles(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_alternativeTitles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlternativeTitles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.Translation)
	fc.Result = res
	return ec.marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_alternativeTitles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Translation_language(ctx, field)
			case "text":
				return ec.fieldContext_Translation_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Translation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_totalLikes(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_totalLikes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalLikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_totalLikes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_totalPosts(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_totalPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPosts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_totalPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_topic(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Category().Topic(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Topic)
	fc.Result = res
	return ec.marshalOTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "reference":
				return ec.fieldContext_Topic_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "banner":
				return ec.fieldContext_Topic_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Topic_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Topic_titleTranslations(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Topic_descriptionTranslations(ctx, field)
			case "weight":
				return ec.fieldContext_Topic_weight(ctx, field)
			case "categories":
				return ec.fieldContext_Topic_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Category_posts(ctx context.Context, field graphql.CollectedField, obj *types.Category) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Category_posts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Category().Posts(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["audienceSlugs"].([]string), fc.Args["characterSlugs"].([]string), fc.Args["seriesSlugs"].([]string), fc.Args["state"].(*types.PostState), fc.Args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), fc.Args["seed"].(*string), fc.Args["sortBy"].(types.PostsSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Category_posts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Category_posts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _CategoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.CategoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.CategoryEdge)
	fc.Result = res
	return ec.marshalNCategoryEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CategoryEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CategoryEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.CategoryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryCurationProfile_completed(ctx context.Context, field graphql.CollectedField, obj *types.CategoryCurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryCurationProfile_completed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Completed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryCurationProfile_completed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryCurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryCurationProfile_skipped(ctx context.Context, field graphql.CollectedField, obj *types.CategoryCurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryCurationProfile_skipped(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skipped, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryCurationProfile_skipped(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryCurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryCurationProfile_categories(ctx context.Context, field graphql.CollectedField, obj *types.CategoryCurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryCurationProfile_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CategoryCurationProfile().Categories(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryCurationProfile_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryCurationProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.CategoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.CategoryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_id(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_reference(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_slug(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_thumbnail(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_banner(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_banner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Banner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_banner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_bannerMedia(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_bannerMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BannerMedia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphql1.Media)
	fc.Result = res
	return ec.marshalOMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_bannerMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Media does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_name(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Character().Name(rctx, obj, fc.Args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Character_name_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Character_nameTranslations(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_nameTranslations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameTranslations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.Translation)
	fc.Result = res
	return ec.marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_nameTranslations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Translation_language(ctx, field)
			case "text":
				return ec.fieldContext_Translation_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Translation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_totalLikes(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_totalLikes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalLikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_totalLikes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_totalPosts(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_totalPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPosts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_totalPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_series(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_series(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Series, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Series)
	fc.Result = res
	return ec.marshalOSeries2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_series(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Series_id(ctx, field)
			case "reference":
				return ec.fieldContext_Series_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Series_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Series_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Series_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Series_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Series_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Series_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Series_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Series_totalPosts(ctx, field)
			case "characters":
				return ec.fieldContext_Series_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Series_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Series", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_club(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Character().Club(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Character_posts(ctx context.Context, field graphql.CollectedField, obj *types.Character) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Character_posts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Character().Posts(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["audienceSlugs"].([]string), fc.Args["categorySlugs"].([]string), fc.Args["state"].(*types.PostState), fc.Args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), fc.Args["seed"].(*string), fc.Args["sortBy"].(types.PostsSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Character_posts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Character_posts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _CharacterConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.CharacterConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CharacterConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.CharacterEdge)
	fc.Result = res
	return ec.marshalNCharacterEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CharacterConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CharacterConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CharacterEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CharacterEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CharacterEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CharacterConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.CharacterConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CharacterConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CharacterConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CharacterConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CharacterEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.CharacterEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CharacterEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CharacterEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CharacterEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CharacterEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.CharacterEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CharacterEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Character)
	fc.Result = res
	return ec.marshalNCharacter2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CharacterEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CharacterEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Character_id(ctx, field)
			case "reference":
				return ec.fieldContext_Character_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Character_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Character_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Character_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Character_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Character_name(ctx, field)
			case "nameTranslations":
				return ec.fieldContext_Character_nameTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Character_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Character_totalPosts(ctx, field)
			case "series":
				return ec.fieldContext_Character_series(ctx, field)
			case "club":
				return ec.fieldContext_Character_club(ctx, field)
			case "posts":
				return ec.fieldContext_Character_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Character", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_id(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_reference(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_slug(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_slugAliasesLimit(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_slugAliasesLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlugAliasesLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_slugAliasesLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_totalPosts(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_totalPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPosts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_totalPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_totalLikes(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_totalLikes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalLikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_totalLikes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_slugAliases(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_slugAliases(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlugAliases, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ClubSlugAlias)
	fc.Result = res
	return ec.marshalNClubSlugAlias2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSlugAliasᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_slugAliases(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "slug":
				return ec.fieldContext_ClubSlugAlias_slug(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubSlugAlias", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_links(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_links(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Links, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ClubLink)
	fc.Result = res
	return ec.marshalNClubLink2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubLinkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_links(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_ClubLink_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubLink", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_thumbnail(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_thumbnailMedia(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_thumbnailMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailMedia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphql1.Media)
	fc.Result = res
	return ec.marshalOMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_thumbnailMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Media does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_banner(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_banner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Banner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_banner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_bannerMedia(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_bannerMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BannerMedia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphql1.Media)
	fc.Result = res
	return ec.marshalOMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_bannerMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Media does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_name(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_owner(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubsLimit":
				return ec.fieldContext_Account_clubsLimit(ctx, field)
			case "clubsCount":
				return ec.fieldContext_Account_clubsCount(ctx, field)
			case "hasNonTerminatedClubs":
				return ec.fieldContext_Account_hasNonTerminatedClubs(ctx, field)
			case "clubs":
				return ec.fieldContext_Account_clubs(ctx, field)
			case "clubMembershipsLimit":
				return ec.fieldContext_Account_clubMembershipsLimit(ctx, field)
			case "clubMembershipsCount":
				return ec.fieldContext_Account_clubMembershipsCount(ctx, field)
			case "clubMemberships":
				return ec.fieldContext_Account_clubMemberships(ctx, field)
			case "curationProfile":
				return ec.fieldContext_Account_curationProfile(ctx, field)
			case "clubMembersPostsFeed":
				return ec.fieldContext_Account_clubMembersPostsFeed(ctx, field)
			case "posts":
				return ec.fieldContext_Account_posts(ctx, field)
			case "likedPosts":
				return ec.fieldContext_Account_likedPosts(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_termination(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_termination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Termination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ClubTermination)
	fc.Result = res
	return ec.marshalOClubTermination2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTermination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_termination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_ClubTermination_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubTermination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_suspension(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_suspension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suspension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ClubSuspension)
	fc.Result = res
	return ec.marshalOClubSuspension2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_suspension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "expires":
				return ec.fieldContext_ClubSuspension_expires(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubSuspension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_suspensionLogs(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_suspensionLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().SuspensionLogs(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubSuspensionLogConnection)
	fc.Result = res
	return ec.marshalNClubSuspensionLogConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionLogConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_suspensionLogs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ClubSuspensionLogConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ClubSuspensionLogConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubSuspensionLogConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Club_suspensionLogs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Club_viewerIsOwner(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_viewerIsOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewerIsOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_viewerIsOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_canCreateSupporterOnlyPosts(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanCreateSupporterOnlyPosts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_canCreateSupporterOnlyPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_canSupport(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_canSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanSupport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_canSupport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_nextSupporterPostTime(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextSupporterPostTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_nextSupporterPostTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_viewerMember(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_viewerMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().ViewerMember(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ClubMember)
	fc.Result = res
	return ec.marshalOClubMember2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_viewerMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClubMember_id(ctx, field)
			case "joinedAt":
				return ec.fieldContext_ClubMember_joinedAt(ctx, field)
			case "club":
				return ec.fieldContext_ClubMember_club(ctx, field)
			case "account":
				return ec.fieldContext_ClubMember_account(ctx, field)
			case "isSupporter":
				return ec.fieldContext_ClubMember_isSupporter(ctx, field)
			case "supporterSince":
				return ec.fieldContext_ClubMember_supporterSince(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_membersIsSupporterCount(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().MembersIsSupporterCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_membersIsSupporterCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_membersCount(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_membersCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MembersCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_membersCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_members(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_members(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().Members(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["supporter"].(bool), fc.Args["sortBy"].(types.ClubMembersSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubMemberConnection)
	fc.Result = res
	return ec.marshalNClubMemberConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMemberConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_members(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ClubMemberConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ClubMemberConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubMemberConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Club_members_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Club_charactersEnabled(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_charactersEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CharactersEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_charactersEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_charactersLimit(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_charactersLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CharactersLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_charactersLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_charactersCount(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_charactersCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().CharactersCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_charactersCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Club_characters(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_characters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().Characters(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["slugs"].([]string), fc.Args["name"].(*string), fc.Args["sortBy"].(types.CharactersSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CharacterConnection)
	fc.Result = res
	return ec.marshalNCharacterConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_characters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CharacterConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CharacterConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CharacterConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Club_characters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Club_posts(ctx context.Context, field graphql.CollectedField, obj *types.Club) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Club_posts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Club().Posts(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["audienceSlugs"].([]string), fc.Args["categorySlugs"].([]string), fc.Args["characterSlugs"].([]string), fc.Args["seriesSlugs"].([]string), fc.Args["state"].(*types.PostState), fc.Args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), fc.Args["seed"].(*string), fc.Args["sortBy"].(types.PostsSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Club_posts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Club",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Club_posts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ClubConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ClubConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ClubEdge)
	fc.Result = res
	return ec.marshalNClubEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ClubEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ClubEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ClubConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ClubEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ClubEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalNClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubIssuedSuspensionLog_id(ctx context.Context, field graphql.CollectedField, obj *types.ClubIssuedSuspensionLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubIssuedSuspensionLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubIssuedSuspensionLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubIssuedSuspensionLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubIssuedSuspensionLog_account(ctx context.Context, field graphql.CollectedField, obj *types.ClubIssuedSuspensionLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubIssuedSuspensionLog_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalOAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubIssuedSuspensionLog_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubIssuedSuspensionLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubsLimit":
				return ec.fieldContext_Account_clubsLimit(ctx, field)
			case "clubsCount":
				return ec.fieldContext_Account_clubsCount(ctx, field)
			case "hasNonTerminatedClubs":
				return ec.fieldContext_Account_hasNonTerminatedClubs(ctx, field)
			case "clubs":
				return ec.fieldContext_Account_clubs(ctx, field)
			case "clubMembershipsLimit":
				return ec.fieldContext_Account_clubMembershipsLimit(ctx, field)
			case "clubMembershipsCount":
				return ec.fieldContext_Account_clubMembershipsCount(ctx, field)
			case "clubMemberships":
				return ec.fieldContext_Account_clubMemberships(ctx, field)
			case "curationProfile":
				return ec.fieldContext_Account_curationProfile(ctx, field)
			case "clubMembersPostsFeed":
				return ec.fieldContext_Account_clubMembersPostsFeed(ctx, field)
			case "posts":
				return ec.fieldContext_Account_posts(ctx, field)
			case "likedPosts":
				return ec.fieldContext_Account_likedPosts(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubIssuedSuspensionLog_reason(ctx context.Context, field graphql.CollectedField, obj *types.ClubIssuedSuspensionLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubIssuedSuspensionLog_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.ClubSuspensionReason)
	fc.Result = res
	return ec.marshalNClubSuspensionReason2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubIssuedSuspensionLog_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubIssuedSuspensionLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ClubSuspensionReason does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubIssuedSuspensionLog_suspendedUntil(ctx context.Context, field graphql.CollectedField, obj *types.ClubIssuedSuspensionLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubIssuedSuspensionLog_suspendedUntil(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuspendedUntil, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubIssuedSuspensionLog_suspendedUntil(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubIssuedSuspensionLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubLink_url(ctx context.Context, field graphql.CollectedField, obj *types.ClubLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubLink_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubLink_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMember_id(ctx context.Context, field graphql.CollectedField, obj *types.ClubMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMember_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMember_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMember_joinedAt(ctx context.Context, field graphql.CollectedField, obj *types.ClubMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMember_joinedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JoinedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMember_joinedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMember_club(ctx context.Context, field graphql.CollectedField, obj *types.ClubMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMember_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ClubMember().Club(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalNClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMember_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMember",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMember_account(ctx context.Context, field graphql.CollectedField, obj *types.ClubMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMember_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMember_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubsLimit":
				return ec.fieldContext_Account_clubsLimit(ctx, field)
			case "clubsCount":
				return ec.fieldContext_Account_clubsCount(ctx, field)
			case "hasNonTerminatedClubs":
				return ec.fieldContext_Account_hasNonTerminatedClubs(ctx, field)
			case "clubs":
				return ec.fieldContext_Account_clubs(ctx, field)
			case "clubMembershipsLimit":
				return ec.fieldContext_Account_clubMembershipsLimit(ctx, field)
			case "clubMembershipsCount":
				return ec.fieldContext_Account_clubMembershipsCount(ctx, field)
			case "clubMemberships":
				return ec.fieldContext_Account_clubMemberships(ctx, field)
			case "curationProfile":
				return ec.fieldContext_Account_curationProfile(ctx, field)
			case "clubMembersPostsFeed":
				return ec.fieldContext_Account_clubMembersPostsFeed(ctx, field)
			case "posts":
				return ec.fieldContext_Account_posts(ctx, field)
			case "likedPosts":
				return ec.fieldContext_Account_likedPosts(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMember_isSupporter(ctx context.Context, field graphql.CollectedField, obj *types.ClubMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMember_isSupporter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupporter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMember_isSupporter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMember_supporterSince(ctx context.Context, field graphql.CollectedField, obj *types.ClubMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMember_supporterSince(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupporterSince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMember_supporterSince(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMemberConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ClubMemberConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMemberConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ClubMemberEdge)
	fc.Result = res
	return ec.marshalNClubMemberEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMemberEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMemberConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMemberConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ClubMemberEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ClubMemberEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubMemberEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMemberConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ClubMemberConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMemberConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMemberConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMemberConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMemberEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ClubMemberEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMemberEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMemberEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMemberEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubMemberEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ClubMemberEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubMemberEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubMember)
	fc.Result = res
	return ec.marshalNClubMember2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubMemberEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubMemberEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClubMember_id(ctx, field)
			case "joinedAt":
				return ec.fieldContext_ClubMember_joinedAt(ctx, field)
			case "club":
				return ec.fieldContext_ClubMember_club(ctx, field)
			case "account":
				return ec.fieldContext_ClubMember_account(ctx, field)
			case "isSupporter":
				return ec.fieldContext_ClubMember_isSupporter(ctx, field)
			case "supporterSince":
				return ec.fieldContext_ClubMember_supporterSince(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubRemovedSuspensionLog_id(ctx context.Context, field graphql.CollectedField, obj *types.ClubRemovedSuspensionLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubRemovedSuspensionLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubRemovedSuspensionLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubRemovedSuspensionLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubRemovedSuspensionLog_account(ctx context.Context, field graphql.CollectedField, obj *types.ClubRemovedSuspensionLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubRemovedSuspensionLog_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubRemovedSuspensionLog_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubRemovedSuspensionLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubsLimit":
				return ec.fieldContext_Account_clubsLimit(ctx, field)
			case "clubsCount":
				return ec.fieldContext_Account_clubsCount(ctx, field)
			case "hasNonTerminatedClubs":
				return ec.fieldContext_Account_hasNonTerminatedClubs(ctx, field)
			case "clubs":
				return ec.fieldContext_Account_clubs(ctx, field)
			case "clubMembershipsLimit":
				return ec.fieldContext_Account_clubMembershipsLimit(ctx, field)
			case "clubMembershipsCount":
				return ec.fieldContext_Account_clubMembershipsCount(ctx, field)
			case "clubMemberships":
				return ec.fieldContext_Account_clubMemberships(ctx, field)
			case "curationProfile":
				return ec.fieldContext_Account_curationProfile(ctx, field)
			case "clubMembersPostsFeed":
				return ec.fieldContext_Account_clubMembersPostsFeed(ctx, field)
			case "posts":
				return ec.fieldContext_Account_posts(ctx, field)
			case "likedPosts":
				return ec.fieldContext_Account_likedPosts(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubSlugAlias_slug(ctx context.Context, field graphql.CollectedField, obj *types.ClubSlugAlias) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubSlugAlias_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubSlugAlias_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubSlugAlias",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubSuspension_expires(ctx context.Context, field graphql.CollectedField, obj *types.ClubSuspension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubSuspension_expires(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expires, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubSuspension_expires(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubSuspension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubSuspensionLogConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.ClubSuspensionLogConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubSuspensionLogConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.ClubSuspensionLogEdge)
	fc.Result = res
	return ec.marshalNClubSuspensionLogEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionLogEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubSuspensionLogConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubSuspensionLogConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ClubSuspensionLogEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ClubSuspensionLogEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubSuspensionLogEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubSuspensionLogConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.ClubSuspensionLogConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubSuspensionLogConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubSuspensionLogConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubSuspensionLogConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubSuspensionLogEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.ClubSuspensionLogEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubSuspensionLogEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubSuspensionLogEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubSuspensionLogEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubSuspensionLogEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.ClubSuspensionLogEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubSuspensionLogEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.ClubSuspensionLog)
	fc.Result = res
	return ec.marshalNClubSuspensionLog2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionLog(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubSuspensionLogEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubSuspensionLogEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ClubSuspensionLog does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubTermination_account(ctx context.Context, field graphql.CollectedField, obj *types.ClubTermination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubTermination_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubTermination_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubTermination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubsLimit":
				return ec.fieldContext_Account_clubsLimit(ctx, field)
			case "clubsCount":
				return ec.fieldContext_Account_clubsCount(ctx, field)
			case "hasNonTerminatedClubs":
				return ec.fieldContext_Account_hasNonTerminatedClubs(ctx, field)
			case "clubs":
				return ec.fieldContext_Account_clubs(ctx, field)
			case "clubMembershipsLimit":
				return ec.fieldContext_Account_clubMembershipsLimit(ctx, field)
			case "clubMembershipsCount":
				return ec.fieldContext_Account_clubMembershipsCount(ctx, field)
			case "clubMemberships":
				return ec.fieldContext_Account_clubMemberships(ctx, field)
			case "curationProfile":
				return ec.fieldContext_Account_curationProfile(ctx, field)
			case "clubMembersPostsFeed":
				return ec.fieldContext_Account_clubMembersPostsFeed(ctx, field)
			case "posts":
				return ec.fieldContext_Account_posts(ctx, field)
			case "likedPosts":
				return ec.fieldContext_Account_likedPosts(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColorPalette_percent(ctx context.Context, field graphql.CollectedField, obj *graphql1.ColorPalette) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColorPalette_percent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColorPalette_percent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColorPalette",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColorPalette_red(ctx context.Context, field graphql.CollectedField, obj *graphql1.ColorPalette) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColorPalette_red(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Red, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColorPalette_red(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColorPalette",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColorPalette_green(ctx context.Context, field graphql.CollectedField, obj *graphql1.ColorPalette) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColorPalette_green(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Green, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColorPalette_green(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColorPalette",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColorPalette_blue(ctx context.Context, field graphql.CollectedField, obj *graphql1.ColorPalette) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColorPalette_blue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColorPalette_blue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColorPalette",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateAudiencePayload_audience(ctx context.Context, field graphql.CollectedField, obj *types.CreateAudiencePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateAudiencePayload_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Audience)
	fc.Result = res
	return ec.marshalOAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateAudiencePayload_audience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateAudiencePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Audience_id(ctx, field)
			case "reference":
				return ec.fieldContext_Audience_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Audience_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Audience_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Audience_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Audience_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Audience_title(ctx, field)
			case "standard":
				return ec.fieldContext_Audience_standard(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Audience_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Audience_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Audience_totalPosts(ctx, field)
			case "posts":
				return ec.fieldContext_Audience_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audience", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateAudiencePayload_validation(ctx context.Context, field graphql.CollectedField, obj *types.CreateAudiencePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateAudiencePayload_validation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateAudienceValidation)
	fc.Result = res
	return ec.marshalOCreateAudienceValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateAudienceValidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateAudiencePayload_validation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateAudiencePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateAudienceValidation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCategoryPayload_category(ctx context.Context, field graphql.CollectedField, obj *types.CreateCategoryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCategoryPayload_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Category)
	fc.Result = res
	return ec.marshalOCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCategoryPayload_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCategoryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCategoryPayload_validation(ctx context.Context, field graphql.CollectedField, obj *types.CreateCategoryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCategoryPayload_validation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateCategoryValidation)
	fc.Result = res
	return ec.marshalOCreateCategoryValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCategoryValidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCategoryPayload_validation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCategoryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateCategoryValidation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCharacterPayload_character(ctx context.Context, field graphql.CollectedField, obj *types.CreateCharacterPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCharacterPayload_character(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Character, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Character)
	fc.Result = res
	return ec.marshalOCharacter2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCharacterPayload_character(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCharacterPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Character_id(ctx, field)
			case "reference":
				return ec.fieldContext_Character_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Character_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Character_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Character_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Character_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Character_name(ctx, field)
			case "nameTranslations":
				return ec.fieldContext_Character_nameTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Character_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Character_totalPosts(ctx, field)
			case "series":
				return ec.fieldContext_Character_series(ctx, field)
			case "club":
				return ec.fieldContext_Character_club(ctx, field)
			case "posts":
				return ec.fieldContext_Character_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Character", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCharacterPayload_validation(ctx context.Context, field graphql.CollectedField, obj *types.CreateCharacterPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCharacterPayload_validation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateCharacterValidation)
	fc.Result = res
	return ec.marshalOCreateCharacterValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCharacterValidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCharacterPayload_validation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCharacterPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateCharacterValidation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateClubPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.CreateClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateClubPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateClubPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateClubPayload_validation(ctx context.Context, field graphql.CollectedField, obj *types.CreateClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateClubPayload_validation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateClubValidation)
	fc.Result = res
	return ec.marshalOCreateClubValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateClubValidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateClubPayload_validation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateClubValidation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateGameSessionPayload_gameSession(ctx context.Context, field graphql.CollectedField, obj *types.CreateGameSessionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateGameSessionPayload_gameSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameSession, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.GameSession)
	fc.Result = res
	return ec.marshalOGameSession2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateGameSessionPayload_gameSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateGameSessionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameSession_id(ctx, field)
			case "reference":
				return ec.fieldContext_GameSession_reference(ctx, field)
			case "isClosed":
				return ec.fieldContext_GameSession_isClosed(ctx, field)
			case "viewerIsPlayer":
				return ec.fieldContext_GameSession_viewerIsPlayer(ctx, field)
			case "gameType":
				return ec.fieldContext_GameSession_gameType(ctx, field)
			case "seed":
				return ec.fieldContext_GameSession_seed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameSession", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePostPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.CreatePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePostPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePostPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateSeriesPayload_series(ctx context.Context, field graphql.CollectedField, obj *types.CreateSeriesPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateSeriesPayload_series(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Series, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Series)
	fc.Result = res
	return ec.marshalOSeries2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateSeriesPayload_series(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateSeriesPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Series_id(ctx, field)
			case "reference":
				return ec.fieldContext_Series_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Series_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Series_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Series_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Series_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Series_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Series_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Series_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Series_totalPosts(ctx, field)
			case "characters":
				return ec.fieldContext_Series_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Series_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Series", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateSeriesPayload_validation(ctx context.Context, field graphql.CollectedField, obj *types.CreateSeriesPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateSeriesPayload_validation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateSeriesValidation)
	fc.Result = res
	return ec.marshalOCreateSeriesValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateSeriesValidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateSeriesPayload_validation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateSeriesPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateSeriesValidation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateTopicPayload_topic(ctx context.Context, field graphql.CollectedField, obj *types.CreateTopicPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateTopicPayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Topic)
	fc.Result = res
	return ec.marshalOTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateTopicPayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateTopicPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "reference":
				return ec.fieldContext_Topic_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "banner":
				return ec.fieldContext_Topic_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Topic_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Topic_titleTranslations(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Topic_descriptionTranslations(ctx, field)
			case "weight":
				return ec.fieldContext_Topic_weight(ctx, field)
			case "categories":
				return ec.fieldContext_Topic_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateTopicPayload_validation(ctx context.Context, field graphql.CollectedField, obj *types.CreateTopicPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateTopicPayload_validation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateTopicValidation)
	fc.Result = res
	return ec.marshalOCreateTopicValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateTopicValidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateTopicPayload_validation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateTopicPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateTopicValidation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurationProfile_id(ctx context.Context, field graphql.CollectedField, obj *types.CurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CurationProfile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CurationProfile_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurationProfile_completed(ctx context.Context, field graphql.CollectedField, obj *types.CurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CurationProfile_completed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Completed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CurationProfile_completed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurationProfile_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *types.CurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CurationProfile_dateOfBirth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.DateOfBirthCurationProfile)
	fc.Result = res
	return ec.marshalNDateOfBirthCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDateOfBirthCurationProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CurationProfile_dateOfBirth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "skipped":
				return ec.fieldContext_DateOfBirthCurationProfile_skipped(ctx, field)
			case "completed":
				return ec.fieldContext_DateOfBirthCurationProfile_completed(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_DateOfBirthCurationProfile_dateOfBirth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DateOfBirthCurationProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurationProfile_audience(ctx context.Context, field graphql.CollectedField, obj *types.CurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CurationProfile_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AudienceCurationProfile)
	fc.Result = res
	return ec.marshalNAudienceCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceCurationProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CurationProfile_audience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "completed":
				return ec.fieldContext_AudienceCurationProfile_completed(ctx, field)
			case "skipped":
				return ec.fieldContext_AudienceCurationProfile_skipped(ctx, field)
			case "audiences":
				return ec.fieldContext_AudienceCurationProfile_audiences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AudienceCurationProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurationProfile_category(ctx context.Context, field graphql.CollectedField, obj *types.CurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CurationProfile_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CategoryCurationProfile)
	fc.Result = res
	return ec.marshalNCategoryCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryCurationProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CurationProfile_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "completed":
				return ec.fieldContext_CategoryCurationProfile_completed(ctx, field)
			case "skipped":
				return ec.fieldContext_CategoryCurationProfile_skipped(ctx, field)
			case "categories":
				return ec.fieldContext_CategoryCurationProfile_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryCurationProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DateOfBirthCurationProfile_skipped(ctx context.Context, field graphql.CollectedField, obj *types.DateOfBirthCurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DateOfBirthCurationProfile_skipped(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skipped, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DateOfBirthCurationProfile_skipped(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DateOfBirthCurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DateOfBirthCurationProfile_completed(ctx context.Context, field graphql.CollectedField, obj *types.DateOfBirthCurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DateOfBirthCurationProfile_completed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Completed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DateOfBirthCurationProfile_completed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DateOfBirthCurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DateOfBirthCurationProfile_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *types.DateOfBirthCurationProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DateOfBirthCurationProfile_dateOfBirth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DateOfBirthCurationProfile_dateOfBirth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DateOfBirthCurationProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePostPayload_postId(ctx context.Context, field graphql.CollectedField, obj *types.DeletePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePostPayload_postId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*relay.ID)
	fc.Result = res
	return ec.marshalOID2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePostPayload_postId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DisableClubCharactersPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.DisableClubCharactersPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DisableClubCharactersPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DisableClubCharactersPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DisableClubCharactersPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DisableClubSupporterOnlyPostsPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.DisableClubSupporterOnlyPostsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DisableClubSupporterOnlyPostsPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DisableClubSupporterOnlyPostsPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DisableClubSupporterOnlyPostsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnableClubCharactersPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.EnableClubCharactersPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnableClubCharactersPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnableClubCharactersPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnableClubCharactersPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnableClubSupporterOnlyPostsPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.EnableClubSupporterOnlyPostsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnableClubSupporterOnlyPostsPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnableClubSupporterOnlyPostsPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnableClubSupporterOnlyPostsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findAccountByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findAccountByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindAccountByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findAccountByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubsLimit":
				return ec.fieldContext_Account_clubsLimit(ctx, field)
			case "clubsCount":
				return ec.fieldContext_Account_clubsCount(ctx, field)
			case "hasNonTerminatedClubs":
				return ec.fieldContext_Account_hasNonTerminatedClubs(ctx, field)
			case "clubs":
				return ec.fieldContext_Account_clubs(ctx, field)
			case "clubMembershipsLimit":
				return ec.fieldContext_Account_clubMembershipsLimit(ctx, field)
			case "clubMembershipsCount":
				return ec.fieldContext_Account_clubMembershipsCount(ctx, field)
			case "clubMemberships":
				return ec.fieldContext_Account_clubMemberships(ctx, field)
			case "curationProfile":
				return ec.fieldContext_Account_curationProfile(ctx, field)
			case "clubMembersPostsFeed":
				return ec.fieldContext_Account_clubMembersPostsFeed(ctx, field)
			case "posts":
				return ec.fieldContext_Account_posts(ctx, field)
			case "likedPosts":
				return ec.fieldContext_Account_likedPosts(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findAccountByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findAudienceByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findAudienceByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindAudienceByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Audience)
	fc.Result = res
	return ec.marshalNAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findAudienceByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Audience_id(ctx, field)
			case "reference":
				return ec.fieldContext_Audience_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Audience_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Audience_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Audience_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Audience_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Audience_title(ctx, field)
			case "standard":
				return ec.fieldContext_Audience_standard(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Audience_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Audience_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Audience_totalPosts(ctx, field)
			case "posts":
				return ec.fieldContext_Audience_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audience", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findAudienceByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findCategoryByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findCategoryByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindCategoryByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findCategoryByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findCategoryByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findCharacterByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findCharacterByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindCharacterByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Character)
	fc.Result = res
	return ec.marshalNCharacter2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findCharacterByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Character_id(ctx, field)
			case "reference":
				return ec.fieldContext_Character_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Character_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Character_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Character_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Character_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Character_name(ctx, field)
			case "nameTranslations":
				return ec.fieldContext_Character_nameTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Character_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Character_totalPosts(ctx, field)
			case "series":
				return ec.fieldContext_Character_series(ctx, field)
			case "club":
				return ec.fieldContext_Character_club(ctx, field)
			case "posts":
				return ec.fieldContext_Character_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Character", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findCharacterByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findClubByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findClubByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindClubByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalNClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findClubByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findClubByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findClubMemberByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findClubMemberByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindClubMemberByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubMember)
	fc.Result = res
	return ec.marshalNClubMember2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findClubMemberByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClubMember_id(ctx, field)
			case "joinedAt":
				return ec.fieldContext_ClubMember_joinedAt(ctx, field)
			case "club":
				return ec.fieldContext_ClubMember_club(ctx, field)
			case "account":
				return ec.fieldContext_ClubMember_account(ctx, field)
			case "isSupporter":
				return ec.fieldContext_ClubMember_isSupporter(ctx, field)
			case "supporterSince":
				return ec.fieldContext_ClubMember_supporterSince(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubMember", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findClubMemberByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findPostByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findPostByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindPostByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalNPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findPostByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findPostByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findPostLikeByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findPostLikeByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindPostLikeByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostLike)
	fc.Result = res
	return ec.marshalNPostLike2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostLike(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findPostLikeByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PostLike_id(ctx, field)
			case "likedAt":
				return ec.fieldContext_PostLike_likedAt(ctx, field)
			case "post":
				return ec.fieldContext_PostLike_post(ctx, field)
			case "account":
				return ec.fieldContext_PostLike_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostLike", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findPostLikeByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findSeriesByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findSeriesByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindSeriesByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Series)
	fc.Result = res
	return ec.marshalNSeries2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findSeriesByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Series_id(ctx, field)
			case "reference":
				return ec.fieldContext_Series_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Series_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Series_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Series_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Series_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Series_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Series_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Series_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Series_totalPosts(ctx, field)
			case "characters":
				return ec.fieldContext_Series_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Series_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Series", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findSeriesByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Entity_findTopicByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Entity_findTopicByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindTopicByID(rctx, fc.Args["id"].(relay.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Topic)
	fc.Result = res
	return ec.marshalNTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Entity_findTopicByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "reference":
				return ec.fieldContext_Topic_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "banner":
				return ec.fieldContext_Topic_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Topic_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Topic_titleTranslations(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Topic_descriptionTranslations(ctx, field)
			case "weight":
				return ec.fieldContext_Topic_weight(ctx, field)
			case "categories":
				return ec.fieldContext_Topic_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Entity_findTopicByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _GameSession_id(ctx context.Context, field graphql.CollectedField, obj *types.GameSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSession_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSession_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSession_reference(ctx context.Context, field graphql.CollectedField, obj *types.GameSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSession_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSession_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSession_isClosed(ctx context.Context, field graphql.CollectedField, obj *types.GameSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSession_isClosed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsClosed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSession_isClosed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSession_viewerIsPlayer(ctx context.Context, field graphql.CollectedField, obj *types.GameSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSession_viewerIsPlayer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewerIsPlayer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSession_viewerIsPlayer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSession_gameType(ctx context.Context, field graphql.CollectedField, obj *types.GameSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSession_gameType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.GameType)
	fc.Result = res
	return ec.marshalNGameType2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSession_gameType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GameType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSession_seed(ctx context.Context, field graphql.CollectedField, obj *types.GameSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSession_seed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSession_seed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HLSVideoContainer_url(ctx context.Context, field graphql.CollectedField, obj *graphql1.HLSVideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HLSVideoContainer_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HLSVideoContainer_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HLSVideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HLSVideoContainer_targetDevice(ctx context.Context, field graphql.CollectedField, obj *graphql1.HLSVideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HLSVideoContainer_targetDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetDevice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.MediaDeviceType)
	fc.Result = res
	return ec.marshalNMediaDeviceType2overdollᚋlibrariesᚋgraphqlᚐMediaDeviceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HLSVideoContainer_targetDevice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HLSVideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MediaDeviceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMedia_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMedia_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMedia_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMedia_variants(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMedia_variants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaVariants)
	fc.Result = res
	return ec.marshalNImageMediaVariants2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaVariants(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMedia_variants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mini":
				return ec.fieldContext_ImageMediaVariants_mini(ctx, field)
			case "icon":
				return ec.fieldContext_ImageMediaVariants_icon(ctx, field)
			case "thumbnail":
				return ec.fieldContext_ImageMediaVariants_thumbnail(ctx, field)
			case "small":
				return ec.fieldContext_ImageMediaVariants_small(ctx, field)
			case "medium":
				return ec.fieldContext_ImageMediaVariants_medium(ctx, field)
			case "large":
				return ec.fieldContext_ImageMediaVariants_large(ctx, field)
			case "hd":
				return ec.fieldContext_ImageMediaVariants_hd(ctx, field)
			case "banner":
				return ec.fieldContext_ImageMediaVariants_banner(ctx, field)
			case "smallBanner":
				return ec.fieldContext_ImageMediaVariants_smallBanner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaVariants", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMedia_colorPalettes(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMedia_colorPalettes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorPalettes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.ColorPalette)
	fc.Result = res
	return ec.marshalNColorPalette2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐColorPaletteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMedia_colorPalettes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "percent":
				return ec.fieldContext_ColorPalette_percent(ctx, field)
			case "red":
				return ec.fieldContext_ColorPalette_red(ctx, field)
			case "green":
				return ec.fieldContext_ColorPalette_green(ctx, field)
			case "blue":
				return ec.fieldContext_ColorPalette_blue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ColorPalette", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaAccess_width(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaAccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaAccess_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaAccess_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaAccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaAccess_height(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaAccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaAccess_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaAccess_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaAccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaAccess_url(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaAccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaAccess_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaAccess_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaAccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_mini(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_mini(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mini, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_mini(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_icon(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_thumbnail(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_small(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_small(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Small, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_small(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_medium(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_medium(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Medium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_medium(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_large(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_large(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Large, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_large(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_hd(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_hd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_hd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_banner(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_banner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Banner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_banner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMediaVariants_smallBanner(ctx context.Context, field graphql.CollectedField, obj *graphql1.ImageMediaVariants) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMediaVariants_smallBanner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmallBanner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMediaAccess)
	fc.Result = res
	return ec.marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMediaVariants_smallBanner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMediaVariants",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_ImageMediaAccess_width(ctx, field)
			case "height":
				return ec.fieldContext_ImageMediaAccess_height(ctx, field)
			case "url":
				return ec.fieldContext_ImageMediaAccess_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMediaAccess", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JoinClubPayload_clubMember(ctx context.Context, field graphql.CollectedField, obj *types.JoinClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JoinClubPayload_clubMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClubMember, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ClubMember)
	fc.Result = res
	return ec.marshalOClubMember2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JoinClubPayload_clubMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JoinClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClubMember_id(ctx, field)
			case "joinedAt":
				return ec.fieldContext_ClubMember_joinedAt(ctx, field)
			case "club":
				return ec.fieldContext_ClubMember_club(ctx, field)
			case "account":
				return ec.fieldContext_ClubMember_account(ctx, field)
			case "isSupporter":
				return ec.fieldContext_ClubMember_isSupporter(ctx, field)
			case "supporterSince":
				return ec.fieldContext_ClubMember_supporterSince(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Language_locale(ctx context.Context, field graphql.CollectedField, obj *graphql1.Language) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Language_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNBCP472string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Language_locale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Language",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BCP47 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Language_name(ctx context.Context, field graphql.CollectedField, obj *graphql1.Language) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Language_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Language_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Language",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeaveClubPayload_clubMemberId(ctx context.Context, field graphql.CollectedField, obj *types.LeaveClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeaveClubPayload_clubMemberId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClubMemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeaveClubPayload_clubMemberId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeaveClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LikePostPayload_postLike(ctx context.Context, field graphql.CollectedField, obj *types.LikePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LikePostPayload_postLike(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostLike, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.PostLike)
	fc.Result = res
	return ec.marshalOPostLike2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostLike(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LikePostPayload_postLike(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LikePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PostLike_id(ctx, field)
			case "likedAt":
				return ec.fieldContext_PostLike_likedAt(ctx, field)
			case "post":
				return ec.fieldContext_PostLike_post(ctx, field)
			case "account":
				return ec.fieldContext_PostLike_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostLike", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MP4VideoContainer_url(ctx context.Context, field graphql.CollectedField, obj *graphql1.MP4VideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MP4VideoContainer_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MP4VideoContainer_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MP4VideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MP4VideoContainer_bitrate(ctx context.Context, field graphql.CollectedField, obj *graphql1.MP4VideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MP4VideoContainer_bitrate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bitrate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MP4VideoContainer_bitrate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MP4VideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MP4VideoContainer_width(ctx context.Context, field graphql.CollectedField, obj *graphql1.MP4VideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MP4VideoContainer_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MP4VideoContainer_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MP4VideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MP4VideoContainer_height(ctx context.Context, field graphql.CollectedField, obj *graphql1.MP4VideoContainer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MP4VideoContainer_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MP4VideoContainer_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MP4VideoContainer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaProgress_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.MediaProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaProgress_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaProgress_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCategory(rctx, fc.Args["input"].(types.CreateCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateCategoryPayload)
	fc.Result = res
	return ec.marshalOCreateCategoryPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_CreateCategoryPayload_category(ctx, field)
			case "validation":
				return ec.fieldContext_CreateCategoryPayload_validation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateCategoryPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCategory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCategoryTitle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCategoryTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCategoryTitle(rctx, fc.Args["input"].(types.UpdateCategoryTitleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateCategoryTitlePayload)
	fc.Result = res
	return ec.marshalOUpdateCategoryTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCategoryTitlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCategoryTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_UpdateCategoryTitlePayload_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCategoryTitlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCategoryTitle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCategoryTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCategoryTopic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCategoryTopic(rctx, fc.Args["input"].(types.UpdateCategoryTopicInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateCategoryTopicPayload)
	fc.Result = res
	return ec.marshalOUpdateCategoryTopicPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCategoryTopicPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCategoryTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_UpdateCategoryTopicPayload_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCategoryTopicPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCategoryTopic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addCategoryAlternativeTitle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addCategoryAlternativeTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddCategoryAlternativeTitle(rctx, fc.Args["input"].(types.AddCategoryAlternativeTitleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AddCategoryAlternativeTitlePayload)
	fc.Result = res
	return ec.marshalOAddCategoryAlternativeTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddCategoryAlternativeTitlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addCategoryAlternativeTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_AddCategoryAlternativeTitlePayload_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddCategoryAlternativeTitlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addCategoryAlternativeTitle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeCategoryAlternativeTitle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeCategoryAlternativeTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveCategoryAlternativeTitle(rctx, fc.Args["input"].(types.RemoveCategoryAlternativeTitleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.RemoveCategoryAlternativeTitlePayload)
	fc.Result = res
	return ec.marshalORemoveCategoryAlternativeTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemoveCategoryAlternativeTitlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeCategoryAlternativeTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_RemoveCategoryAlternativeTitlePayload_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RemoveCategoryAlternativeTitlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeCategoryAlternativeTitle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAudience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAudience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAudience(rctx, fc.Args["input"].(types.CreateAudienceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateAudiencePayload)
	fc.Result = res
	return ec.marshalOCreateAudiencePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateAudiencePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAudience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "audience":
				return ec.fieldContext_CreateAudiencePayload_audience(ctx, field)
			case "validation":
				return ec.fieldContext_CreateAudiencePayload_validation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateAudiencePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAudience_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAudienceTitle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAudienceTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAudienceTitle(rctx, fc.Args["input"].(types.UpdateAudienceTitleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateAudienceTitlePayload)
	fc.Result = res
	return ec.marshalOUpdateAudienceTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceTitlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAudienceTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "audience":
				return ec.fieldContext_UpdateAudienceTitlePayload_audience(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateAudienceTitlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAudienceTitle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAudienceBanner(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAudienceBanner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAudienceBanner(rctx, fc.Args["input"].(types.UpdateAudienceBannerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateAudienceBannerPayload)
	fc.Result = res
	return ec.marshalOUpdateAudienceBannerPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceBannerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAudienceBanner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "audience":
				return ec.fieldContext_UpdateAudienceBannerPayload_audience(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateAudienceBannerPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAudienceBanner_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAudienceIsStandard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAudienceIsStandard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAudienceIsStandard(rctx, fc.Args["input"].(types.UpdateAudienceIsStandardInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateAudienceIsStandardPayload)
	fc.Result = res
	return ec.marshalOUpdateAudienceIsStandardPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceIsStandardPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAudienceIsStandard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "audience":
				return ec.fieldContext_UpdateAudienceIsStandardPayload_audience(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateAudienceIsStandardPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAudienceIsStandard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCharacter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCharacter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCharacter(rctx, fc.Args["input"].(types.CreateCharacterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateCharacterPayload)
	fc.Result = res
	return ec.marshalOCreateCharacterPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCharacterPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCharacter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "character":
				return ec.fieldContext_CreateCharacterPayload_character(ctx, field)
			case "validation":
				return ec.fieldContext_CreateCharacterPayload_validation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateCharacterPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCharacter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCharacterName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCharacterName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCharacterName(rctx, fc.Args["input"].(types.UpdateCharacterNameInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateCharacterNamePayload)
	fc.Result = res
	return ec.marshalOUpdateCharacterNamePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCharacterNamePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCharacterName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "character":
				return ec.fieldContext_UpdateCharacterNamePayload_character(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCharacterNamePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCharacterName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_joinClub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_joinClub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().JoinClub(rctx, fc.Args["input"].(types.JoinClubInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.JoinClubPayload)
	fc.Result = res
	return ec.marshalOJoinClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐJoinClubPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_joinClub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubMember":
				return ec.fieldContext_JoinClubPayload_clubMember(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JoinClubPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_joinClub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_leaveClub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_leaveClub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LeaveClub(rctx, fc.Args["input"].(types.LeaveClubInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.LeaveClubPayload)
	fc.Result = res
	return ec.marshalOLeaveClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐLeaveClubPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_leaveClub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubMemberId":
				return ec.fieldContext_LeaveClubPayload_clubMemberId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeaveClubPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_leaveClub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createClub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createClub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateClub(rctx, fc.Args["input"].(types.CreateClubInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateClubPayload)
	fc.Result = res
	return ec.marshalOCreateClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateClubPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createClub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_CreateClubPayload_club(ctx, field)
			case "validation":
				return ec.fieldContext_CreateClubPayload_validation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateClubPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createClub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addClubSlugAlias(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addClubSlugAlias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddClubSlugAlias(rctx, fc.Args["input"].(types.AddClubSlugAliasInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AddClubSlugAliasPayload)
	fc.Result = res
	return ec.marshalOAddClubSlugAliasPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddClubSlugAliasPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addClubSlugAlias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_AddClubSlugAliasPayload_club(ctx, field)
			case "validation":
				return ec.fieldContext_AddClubSlugAliasPayload_validation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddClubSlugAliasPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addClubSlugAlias_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeClubSlugAlias(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeClubSlugAlias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveClubSlugAlias(rctx, fc.Args["input"].(types.RemoveClubSlugAliasInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.RemoveClubSlugAliasPayload)
	fc.Result = res
	return ec.marshalORemoveClubSlugAliasPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemoveClubSlugAliasPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeClubSlugAlias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_RemoveClubSlugAliasPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RemoveClubSlugAliasPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeClubSlugAlias_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_promoteClubSlugAliasToDefault(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_promoteClubSlugAliasToDefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PromoteClubSlugAliasToDefault(rctx, fc.Args["input"].(types.PromoteClubSlugAliasToDefaultInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.PromoteClubSlugAliasToDefaultPayload)
	fc.Result = res
	return ec.marshalOPromoteClubSlugAliasToDefaultPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPromoteClubSlugAliasToDefaultPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_promoteClubSlugAliasToDefault(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_PromoteClubSlugAliasToDefaultPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PromoteClubSlugAliasToDefaultPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_promoteClubSlugAliasToDefault_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateClubName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateClubName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateClubName(rctx, fc.Args["input"].(types.UpdateClubNameInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateClubNamePayload)
	fc.Result = res
	return ec.marshalOUpdateClubNamePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubNamePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateClubName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_UpdateClubNamePayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateClubNamePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateClubName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateClubThumbnail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateClubThumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateClubThumbnail(rctx, fc.Args["input"].(types.UpdateClubThumbnailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateClubThumbnailPayload)
	fc.Result = res
	return ec.marshalOUpdateClubThumbnailPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubThumbnailPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateClubThumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_UpdateClubThumbnailPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateClubThumbnailPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateClubThumbnail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_suspendClub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_suspendClub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SuspendClub(rctx, fc.Args["input"].(types.SuspendClubInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.SuspendClubPayload)
	fc.Result = res
	return ec.marshalOSuspendClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSuspendClubPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_suspendClub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_SuspendClubPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SuspendClubPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_suspendClub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unSuspendClub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unSuspendClub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnSuspendClub(rctx, fc.Args["input"].(types.UnSuspendClubInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UnSuspendClubPayload)
	fc.Result = res
	return ec.marshalOUnSuspendClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnSuspendClubPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unSuspendClub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_UnSuspendClubPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UnSuspendClubPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unSuspendClub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_terminateClub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_terminateClub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TerminateClub(rctx, fc.Args["input"].(types.TerminateClubInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TerminateClubPayload)
	fc.Result = res
	return ec.marshalOTerminateClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTerminateClubPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_terminateClub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_TerminateClubPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TerminateClubPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_terminateClub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unTerminateClub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unTerminateClub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnTerminateClub(rctx, fc.Args["input"].(types.UnTerminateClubInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UnTerminateClubPayload)
	fc.Result = res
	return ec.marshalOUnTerminateClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnTerminateClubPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unTerminateClub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_UnTerminateClubPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UnTerminateClubPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unTerminateClub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_enableClubSupporterOnlyPosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_enableClubSupporterOnlyPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EnableClubSupporterOnlyPosts(rctx, fc.Args["input"].(types.EnableClubSupporterOnlyPostsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.EnableClubSupporterOnlyPostsPayload)
	fc.Result = res
	return ec.marshalOEnableClubSupporterOnlyPostsPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐEnableClubSupporterOnlyPostsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_enableClubSupporterOnlyPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_EnableClubSupporterOnlyPostsPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EnableClubSupporterOnlyPostsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_enableClubSupporterOnlyPosts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_disableClubSupporterOnlyPosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_disableClubSupporterOnlyPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DisableClubSupporterOnlyPosts(rctx, fc.Args["input"].(types.DisableClubSupporterOnlyPostsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.DisableClubSupporterOnlyPostsPayload)
	fc.Result = res
	return ec.marshalODisableClubSupporterOnlyPostsPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDisableClubSupporterOnlyPostsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_disableClubSupporterOnlyPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_DisableClubSupporterOnlyPostsPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DisableClubSupporterOnlyPostsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_disableClubSupporterOnlyPosts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_disableClubCharacters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_disableClubCharacters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DisableClubCharacters(rctx, fc.Args["input"].(types.DisableClubCharactersInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.DisableClubCharactersPayload)
	fc.Result = res
	return ec.marshalODisableClubCharactersPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDisableClubCharactersPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_disableClubCharacters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_DisableClubCharactersPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DisableClubCharactersPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_disableClubCharacters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_enableClubCharacters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_enableClubCharacters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EnableClubCharacters(rctx, fc.Args["input"].(types.EnableClubCharactersInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.EnableClubCharactersPayload)
	fc.Result = res
	return ec.marshalOEnableClubCharactersPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐEnableClubCharactersPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_enableClubCharacters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_EnableClubCharactersPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EnableClubCharactersPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_enableClubCharacters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateClubCharactersLimit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateClubCharactersLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateClubCharactersLimit(rctx, fc.Args["input"].(types.UpdateClubCharactersLimitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateClubCharactersLimitPayload)
	fc.Result = res
	return ec.marshalOUpdateClubCharactersLimitPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubCharactersLimitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateClubCharactersLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_UpdateClubCharactersLimitPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateClubCharactersLimitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateClubCharactersLimit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_transferClubOwnership(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_transferClubOwnership(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TransferClubOwnership(rctx, fc.Args["input"].(types.TransferClubOwnershipInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.TransferClubOwnershipPayload)
	fc.Result = res
	return ec.marshalOTransferClubOwnershipPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTransferClubOwnershipPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_transferClubOwnership(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "club":
				return ec.fieldContext_TransferClubOwnershipPayload_club(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferClubOwnershipPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_transferClubOwnership_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCurationProfileAudience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCurationProfileAudience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCurationProfileAudience(rctx, fc.Args["input"].(types.UpdateCurationProfileAudienceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateCurationProfileAudiencePayload)
	fc.Result = res
	return ec.marshalOUpdateCurationProfileAudiencePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileAudiencePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCurationProfileAudience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "curationProfile":
				return ec.fieldContext_UpdateCurationProfileAudiencePayload_curationProfile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCurationProfileAudiencePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCurationProfileAudience_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCurationProfileCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCurationProfileCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCurationProfileCategory(rctx, fc.Args["input"].(types.UpdateCurationProfileCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateCurationProfileCategoryPayload)
	fc.Result = res
	return ec.marshalOUpdateCurationProfileCategoryPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCurationProfileCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "curationProfile":
				return ec.fieldContext_UpdateCurationProfileCategoryPayload_curationProfile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCurationProfileCategoryPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCurationProfileCategory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCurationProfileDateOfBirth(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCurationProfileDateOfBirth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCurationProfileDateOfBirth(rctx, fc.Args["input"].(types.UpdateCurationProfileDateOfBirthInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateCurationProfileDateOfBirthPayload)
	fc.Result = res
	return ec.marshalOUpdateCurationProfileDateOfBirthPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileDateOfBirthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCurationProfileDateOfBirth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "curationProfile":
				return ec.fieldContext_UpdateCurationProfileDateOfBirthPayload_curationProfile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCurationProfileDateOfBirthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCurationProfileDateOfBirth_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGameSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGameSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGameSession(rctx, fc.Args["input"].(types.CreateGameSessionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateGameSessionPayload)
	fc.Result = res
	return ec.marshalOCreateGameSessionPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateGameSessionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGameSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameSession":
				return ec.fieldContext_CreateGameSessionPayload_gameSession(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateGameSessionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGameSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_spinRoulette(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_spinRoulette(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SpinRoulette(rctx, fc.Args["input"].(types.SpinRouletteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.SpinRoulettePayload)
	fc.Result = res
	return ec.marshalOSpinRoulettePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSpinRoulettePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_spinRoulette(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "rouletteGameState":
				return ec.fieldContext_SpinRoulettePayload_rouletteGameState(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SpinRoulettePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_spinRoulette_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_likePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_likePost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LikePost(rctx, fc.Args["input"].(types.LikePostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.LikePostPayload)
	fc.Result = res
	return ec.marshalOLikePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐLikePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_likePost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "postLike":
				return ec.fieldContext_LikePostPayload_postLike(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LikePostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_likePost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_undoLikePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_undoLikePost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UndoLikePost(rctx, fc.Args["input"].(types.UndoLikePostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UndoLikePostPayload)
	fc.Result = res
	return ec.marshalOUndoLikePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUndoLikePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_undoLikePost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "postLikeId":
				return ec.fieldContext_UndoLikePostPayload_postLikeId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UndoLikePostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_undoLikePost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePost(rctx, fc.Args["input"].(types.CreatePostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreatePostPayload)
	fc.Result = res
	return ec.marshalOCreatePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreatePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_CreatePostPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreatePostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePostAudience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePostAudience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePostAudience(rctx, fc.Args["input"].(types.UpdatePostAudienceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdatePostAudiencePayload)
	fc.Result = res
	return ec.marshalOUpdatePostAudiencePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostAudiencePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePostAudience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_UpdatePostAudiencePayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePostAudiencePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePostAudience_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addPostContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addPostContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPostContent(rctx, fc.Args["input"].(types.AddPostContentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.AddPostContentPayload)
	fc.Result = res
	return ec.marshalOAddPostContentPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddPostContentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addPostContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_AddPostContentPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddPostContentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addPostContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removePostContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removePostContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemovePostContent(rctx, fc.Args["input"].(types.RemovePostContentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.RemovePostContentPayload)
	fc.Result = res
	return ec.marshalORemovePostContentPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemovePostContentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removePostContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_RemovePostContentPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RemovePostContentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removePostContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePostContentOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePostContentOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePostContentOrder(rctx, fc.Args["input"].(types.UpdatePostContentOrderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdatePostContentOrderPayload)
	fc.Result = res
	return ec.marshalOUpdatePostContentOrderPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostContentOrderPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePostContentOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_UpdatePostContentOrderPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePostContentOrderPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePostContentOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePostContentIsSupporterOnly(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePostContentIsSupporterOnly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePostContentIsSupporterOnly(rctx, fc.Args["input"].(types.UpdatePostContentIsSupporterOnlyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdatePostContentIsSupporterOnlyPayload)
	fc.Result = res
	return ec.marshalOUpdatePostContentIsSupporterOnlyPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostContentIsSupporterOnlyPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePostContentIsSupporterOnly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_UpdatePostContentIsSupporterOnlyPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePostContentIsSupporterOnlyPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePostContentIsSupporterOnly_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePostCharacters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePostCharacters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePostCharacters(rctx, fc.Args["input"].(types.UpdatePostCharactersInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdatePostCharactersPayload)
	fc.Result = res
	return ec.marshalOUpdatePostCharactersPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostCharactersPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePostCharacters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_UpdatePostCharactersPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePostCharactersPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePostCharacters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePostCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePostCategories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePostCategories(rctx, fc.Args["input"].(types.UpdatePostCategoriesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdatePostCategoriesPayload)
	fc.Result = res
	return ec.marshalOUpdatePostCategoriesPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostCategoriesPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePostCategories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_UpdatePostCategoriesPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePostCategoriesPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePostCategories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePostDescription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePostDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePostDescription(rctx, fc.Args["input"].(types.UpdatePostDescriptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdatePostDescriptionPayload)
	fc.Result = res
	return ec.marshalOUpdatePostDescriptionPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostDescriptionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePostDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_UpdatePostDescriptionPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePostDescriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePostDescription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_submitPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_submitPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitPost(rctx, fc.Args["input"].(types.SubmitPostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.SubmitPostPayload)
	fc.Result = res
	return ec.marshalOSubmitPostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSubmitPostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_submitPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_SubmitPostPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubmitPostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_submitPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePost(rctx, fc.Args["input"].(types.DeletePostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.DeletePostPayload)
	fc.Result = res
	return ec.marshalODeletePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDeletePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "postId":
				return ec.fieldContext_DeletePostPayload_postId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletePostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_archivePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_archivePost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArchivePost(rctx, fc.Args["input"].(types.ArchivePostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.ArchivePostPayload)
	fc.Result = res
	return ec.marshalOArchivePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐArchivePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_archivePost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_ArchivePostPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArchivePostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_archivePost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unArchivePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unArchivePost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnArchivePost(rctx, fc.Args["input"].(types.UnArchivePostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UnArchivePostPayload)
	fc.Result = res
	return ec.marshalOUnArchivePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnArchivePostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unArchivePost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "post":
				return ec.fieldContext_UnArchivePostPayload_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UnArchivePostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unArchivePost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSeries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSeries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSeries(rctx, fc.Args["input"].(types.CreateSeriesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateSeriesPayload)
	fc.Result = res
	return ec.marshalOCreateSeriesPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateSeriesPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSeries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "series":
				return ec.fieldContext_CreateSeriesPayload_series(ctx, field)
			case "validation":
				return ec.fieldContext_CreateSeriesPayload_validation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateSeriesPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSeries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSeriesTitle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSeriesTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSeriesTitle(rctx, fc.Args["input"].(types.UpdateSeriesTitleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateSeriesTitlePayload)
	fc.Result = res
	return ec.marshalOUpdateSeriesTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateSeriesTitlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSeriesTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "series":
				return ec.fieldContext_UpdateSeriesTitlePayload_series(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSeriesTitlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSeriesTitle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTopic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTopic(rctx, fc.Args["input"].(types.CreateTopicInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CreateTopicPayload)
	fc.Result = res
	return ec.marshalOCreateTopicPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateTopicPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "topic":
				return ec.fieldContext_CreateTopicPayload_topic(ctx, field)
			case "validation":
				return ec.fieldContext_CreateTopicPayload_validation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateTopicPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTopic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTopicTitle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTopicTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTopicTitle(rctx, fc.Args["input"].(types.UpdateTopicTitleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateTopicTitlePayload)
	fc.Result = res
	return ec.marshalOUpdateTopicTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicTitlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTopicTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "topic":
				return ec.fieldContext_UpdateTopicTitlePayload_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateTopicTitlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTopicTitle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTopicDescription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTopicDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTopicDescription(rctx, fc.Args["input"].(types.UpdateTopicDescriptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateTopicDescriptionPayload)
	fc.Result = res
	return ec.marshalOUpdateTopicDescriptionPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicDescriptionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTopicDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "topic":
				return ec.fieldContext_UpdateTopicDescriptionPayload_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateTopicDescriptionPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTopicDescription_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTopicWeight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTopicWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTopicWeight(rctx, fc.Args["input"].(types.UpdateTopicWeightInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateTopicWeightPayload)
	fc.Result = res
	return ec.marshalOUpdateTopicWeightPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicWeightPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTopicWeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "topic":
				return ec.fieldContext_UpdateTopicWeightPayload_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateTopicWeightPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTopicWeight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTopicBanner(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTopicBanner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTopicBanner(rctx, fc.Args["input"].(types.UpdateTopicBannerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.UpdateTopicBannerPayload)
	fc.Result = res
	return ec.marshalOUpdateTopicBannerPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicBannerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTopicBanner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "topic":
				return ec.fieldContext_UpdateTopicBannerPayload_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateTopicBannerPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTopicBanner_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *relay.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *relay.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *relay.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *relay.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_id(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_reference(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_state(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.PostState)
	fc.Result = res
	return ec.marshalNPostState2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PostState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_supporterOnlyStatus(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupporterOnlyStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.SupporterOnlyStatus)
	fc.Result = res
	return ec.marshalNSupporterOnlyStatus2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_supporterOnlyStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SupporterOnlyStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_contributor(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_contributor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contributor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_contributor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubsLimit":
				return ec.fieldContext_Account_clubsLimit(ctx, field)
			case "clubsCount":
				return ec.fieldContext_Account_clubsCount(ctx, field)
			case "hasNonTerminatedClubs":
				return ec.fieldContext_Account_hasNonTerminatedClubs(ctx, field)
			case "clubs":
				return ec.fieldContext_Account_clubs(ctx, field)
			case "clubMembershipsLimit":
				return ec.fieldContext_Account_clubMembershipsLimit(ctx, field)
			case "clubMembershipsCount":
				return ec.fieldContext_Account_clubMembershipsCount(ctx, field)
			case "clubMemberships":
				return ec.fieldContext_Account_clubMemberships(ctx, field)
			case "curationProfile":
				return ec.fieldContext_Account_curationProfile(ctx, field)
			case "clubMembersPostsFeed":
				return ec.fieldContext_Account_clubMembersPostsFeed(ctx, field)
			case "posts":
				return ec.fieldContext_Account_posts(ctx, field)
			case "likedPosts":
				return ec.fieldContext_Account_likedPosts(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_club(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Post().Club(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalNClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_content(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.PostContent)
	fc.Result = res
	return ec.marshalNPostContent2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostContentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PostContent_id(ctx, field)
			case "resource":
				return ec.fieldContext_PostContent_resource(ctx, field)
			case "media":
				return ec.fieldContext_PostContent_media(ctx, field)
			case "supporterOnlyVideoMediaDuration":
				return ec.fieldContext_PostContent_supporterOnlyVideoMediaDuration(ctx, field)
			case "supporterOnlyVideoMediaHasAudio":
				return ec.fieldContext_PostContent_supporterOnlyVideoMediaHasAudio(ctx, field)
			case "supporterOnlyResource":
				return ec.fieldContext_PostContent_supporterOnlyResource(ctx, field)
			case "isSupporterOnly":
				return ec.fieldContext_PostContent_isSupporterOnly(ctx, field)
			case "viewerCanViewSupporterOnlyContent":
				return ec.fieldContext_PostContent_viewerCanViewSupporterOnlyContent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostContent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_description(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Post().Description(rctx, obj, fc.Args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Post_description_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Post_descriptionTranslations(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_descriptionTranslations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionTranslations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.Translation)
	fc.Result = res
	return ec.marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_descriptionTranslations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Translation_language(ctx, field)
			case "text":
				return ec.fieldContext_Translation_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Translation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_createdAt(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_postedAt(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_postedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_postedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_suggestedPosts(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_suggestedPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Post().SuggestedPosts(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_suggestedPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Post_suggestedPosts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Post_audience(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Post().Audience(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Audience)
	fc.Result = res
	return ec.marshalOAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_audience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Audience_id(ctx, field)
			case "reference":
				return ec.fieldContext_Audience_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Audience_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Audience_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Audience_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Audience_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Audience_title(ctx, field)
			case "standard":
				return ec.fieldContext_Audience_standard(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Audience_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Audience_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Audience_totalPosts(ctx, field)
			case "posts":
				return ec.fieldContext_Audience_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audience", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_categories(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Post().Categories(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_characters(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_characters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Post().Characters(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Character)
	fc.Result = res
	return ec.marshalNCharacter2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_characters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Character_id(ctx, field)
			case "reference":
				return ec.fieldContext_Character_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Character_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Character_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Character_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Character_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Character_name(ctx, field)
			case "nameTranslations":
				return ec.fieldContext_Character_nameTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Character_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Character_totalPosts(ctx, field)
			case "series":
				return ec.fieldContext_Character_series(ctx, field)
			case "club":
				return ec.fieldContext_Character_club(ctx, field)
			case "posts":
				return ec.fieldContext_Character_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Character", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_likes(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_likes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Likes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_likes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Post_viewerLiked(ctx context.Context, field graphql.CollectedField, obj *types.Post) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Post_viewerLiked(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Post().ViewerLiked(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.PostLike)
	fc.Result = res
	return ec.marshalOPostLike2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostLike(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Post_viewerLiked(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Post",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PostLike_id(ctx, field)
			case "likedAt":
				return ec.fieldContext_PostLike_likedAt(ctx, field)
			case "post":
				return ec.fieldContext_PostLike_post(ctx, field)
			case "account":
				return ec.fieldContext_PostLike_account(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostLike", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.PostConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.PostEdge)
	fc.Result = res
	return ec.marshalNPostEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_PostEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_PostEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.PostConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostContent_id(ctx context.Context, field graphql.CollectedField, obj *types.PostContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostContent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostContent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostContent_resource(ctx context.Context, field graphql.CollectedField, obj *types.PostContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostContent_resource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalNResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostContent_resource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostContent_media(ctx context.Context, field graphql.CollectedField, obj *types.PostContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostContent_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.Media)
	fc.Result = res
	return ec.marshalNMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostContent_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Media does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostContent_supporterOnlyVideoMediaDuration(ctx context.Context, field graphql.CollectedField, obj *types.PostContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostContent_supporterOnlyVideoMediaDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupporterOnlyVideoMediaDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostContent_supporterOnlyVideoMediaDuration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostContent_supporterOnlyVideoMediaHasAudio(ctx context.Context, field graphql.CollectedField, obj *types.PostContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostContent_supporterOnlyVideoMediaHasAudio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupporterOnlyVideoMediaHasAudio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostContent_supporterOnlyVideoMediaHasAudio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostContent_supporterOnlyResource(ctx context.Context, field graphql.CollectedField, obj *types.PostContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostContent_supporterOnlyResource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupporterOnlyResource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostContent_supporterOnlyResource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostContent_isSupporterOnly(ctx context.Context, field graphql.CollectedField, obj *types.PostContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostContent_isSupporterOnly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupporterOnly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostContent_isSupporterOnly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostContent_viewerCanViewSupporterOnlyContent(ctx context.Context, field graphql.CollectedField, obj *types.PostContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostContent_viewerCanViewSupporterOnlyContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewerCanViewSupporterOnlyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostContent_viewerCanViewSupporterOnlyContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.PostEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.PostEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalNPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostLike_id(ctx context.Context, field graphql.CollectedField, obj *types.PostLike) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostLike_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostLike_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostLike",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostLike_likedAt(ctx context.Context, field graphql.CollectedField, obj *types.PostLike) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostLike_likedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LikedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostLike_likedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostLike",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostLike_post(ctx context.Context, field graphql.CollectedField, obj *types.PostLike) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostLike_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalNPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostLike_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostLike",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostLike_account(ctx context.Context, field graphql.CollectedField, obj *types.PostLike) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostLike_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostLike_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostLike",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clubsLimit":
				return ec.fieldContext_Account_clubsLimit(ctx, field)
			case "clubsCount":
				return ec.fieldContext_Account_clubsCount(ctx, field)
			case "hasNonTerminatedClubs":
				return ec.fieldContext_Account_hasNonTerminatedClubs(ctx, field)
			case "clubs":
				return ec.fieldContext_Account_clubs(ctx, field)
			case "clubMembershipsLimit":
				return ec.fieldContext_Account_clubMembershipsLimit(ctx, field)
			case "clubMembershipsCount":
				return ec.fieldContext_Account_clubMembershipsCount(ctx, field)
			case "clubMemberships":
				return ec.fieldContext_Account_clubMemberships(ctx, field)
			case "curationProfile":
				return ec.fieldContext_Account_curationProfile(ctx, field)
			case "clubMembersPostsFeed":
				return ec.fieldContext_Account_clubMembersPostsFeed(ctx, field)
			case "posts":
				return ec.fieldContext_Account_posts(ctx, field)
			case "likedPosts":
				return ec.fieldContext_Account_likedPosts(ctx, field)
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PromoteClubSlugAliasToDefaultPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.PromoteClubSlugAliasToDefaultPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PromoteClubSlugAliasToDefaultPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PromoteClubSlugAliasToDefaultPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PromoteClubSlugAliasToDefaultPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_categories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Categories(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["slugs"].([]string), fc.Args["title"].(*string), fc.Args["excludeEmpty"].(bool), fc.Args["sortBy"].(types.CategoriesSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CategoryConnection)
	fc.Result = res
	return ec.marshalNCategoryConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CategoryConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CategoryConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_categories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Category(rctx, fc.Args["slug"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Category)
	fc.Result = res
	return ec.marshalOCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_category_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_audiences(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_audiences(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Audiences(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["slugs"].([]string), fc.Args["title"].(*string), fc.Args["sortBy"].(types.AudiencesSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.AudienceConnection)
	fc.Result = res
	return ec.marshalNAudienceConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_audiences(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AudienceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AudienceConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AudienceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_audiences_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_audience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Audience(rctx, fc.Args["slug"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Audience)
	fc.Result = res
	return ec.marshalOAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_audience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Audience_id(ctx, field)
			case "reference":
				return ec.fieldContext_Audience_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Audience_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Audience_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Audience_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Audience_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Audience_title(ctx, field)
			case "standard":
				return ec.fieldContext_Audience_standard(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Audience_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Audience_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Audience_totalPosts(ctx, field)
			case "posts":
				return ec.fieldContext_Audience_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audience", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_audience_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_characters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_characters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Characters(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["clubCharacters"].(*bool), fc.Args["slugs"].([]string), fc.Args["seriesSlug"].(*string), fc.Args["clubSlug"].(*string), fc.Args["name"].(*string), fc.Args["excludeEmpty"].(bool), fc.Args["sortBy"].(types.CharactersSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CharacterConnection)
	fc.Result = res
	return ec.marshalNCharacterConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_characters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CharacterConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CharacterConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CharacterConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_characters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_character(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_character(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Character(rctx, fc.Args["slug"].(string), fc.Args["seriesSlug"].(*string), fc.Args["clubSlug"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Character)
	fc.Result = res
	return ec.marshalOCharacter2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_character(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Character_id(ctx, field)
			case "reference":
				return ec.fieldContext_Character_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Character_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Character_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Character_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Character_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Character_name(ctx, field)
			case "nameTranslations":
				return ec.fieldContext_Character_nameTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Character_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Character_totalPosts(ctx, field)
			case "series":
				return ec.fieldContext_Character_series(ctx, field)
			case "club":
				return ec.fieldContext_Character_club(ctx, field)
			case "posts":
				return ec.fieldContext_Character_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Character", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_character_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_discoverClubs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_discoverClubs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DiscoverClubs(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubConnection)
	fc.Result = res
	return ec.marshalNClubConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_discoverClubs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ClubConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ClubConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_discoverClubs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_clubs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_clubs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Clubs(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["slugs"].([]string), fc.Args["name"].(*string), fc.Args["suspended"].(*bool), fc.Args["terminated"].(*bool), fc.Args["excludeEmpty"].(bool), fc.Args["sortBy"].(types.ClubsSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ClubConnection)
	fc.Result = res
	return ec.marshalNClubConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_clubs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ClubConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ClubConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_clubs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_club(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Club(rctx, fc.Args["slug"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_club_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_gameSessionStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gameSessionStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GameSessionStatus(rctx, fc.Args["reference"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.GameSessionStatus)
	fc.Result = res
	return ec.marshalOGameSessionStatus2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameSessionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gameSessionStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GameSessionStatus does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gameSessionStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_search(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_search(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Search(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["query"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.SearchConnection)
	fc.Result = res
	return ec.marshalNSearchConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSearchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_search(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SearchConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SearchConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_search_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_postsFeed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_postsFeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PostsFeed(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["seed"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_postsFeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_postsFeed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_post(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Post(rctx, fc.Args["reference"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_post_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_posts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_posts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Posts(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["audienceSlugs"].([]string), fc.Args["categorySlugs"].([]string), fc.Args["characterSlugs"].([]string), fc.Args["seriesSlugs"].([]string), fc.Args["state"].(*types.PostState), fc.Args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), fc.Args["seed"].(*string), fc.Args["sortBy"].(types.PostsSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_posts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_posts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_series(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_series(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Series(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["slugs"].([]string), fc.Args["title"].(*string), fc.Args["excludeEmpty"].(bool), fc.Args["sortBy"].(types.SeriesSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.SeriesConnection)
	fc.Result = res
	return ec.marshalNSeriesConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_series(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SeriesConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_SeriesConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SeriesConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_series_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_serial(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_serial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Serial(rctx, fc.Args["slug"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Series)
	fc.Result = res
	return ec.marshalOSeries2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_serial(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Series_id(ctx, field)
			case "reference":
				return ec.fieldContext_Series_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Series_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Series_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Series_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Series_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Series_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Series_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Series_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Series_totalPosts(ctx, field)
			case "characters":
				return ec.fieldContext_Series_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Series_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Series", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_serial_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_topics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_topics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Topics(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.TopicConnection)
	fc.Result = res
	return ec.marshalNTopicConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopicConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_topics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TopicConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TopicConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_topics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_topic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Topic(rctx, fc.Args["slug"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Topic)
	fc.Result = res
	return ec.marshalOTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "reference":
				return ec.fieldContext_Topic_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "banner":
				return ec.fieldContext_Topic_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Topic_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Topic_titleTranslations(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Topic_descriptionTranslations(ctx, field)
			case "weight":
				return ec.fieldContext_Topic_weight(ctx, field)
			case "categories":
				return ec.fieldContext_Topic_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_topic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query__entities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__entities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve_entities(ctx, fc.Args["representations"].([]map[string]interface{})), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]fedruntime.Entity)
	fc.Result = res
	return ec.marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__entities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type _Entity does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query__entities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__service(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__service(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sdl":
				return ec.fieldContext__Service_sdl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _Service", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RawMedia_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.RawMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RawMedia_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RawMedia_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RawMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RawMedia_originalFileName(ctx context.Context, field graphql.CollectedField, obj *graphql1.RawMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RawMedia_originalFileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalFileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RawMedia_originalFileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RawMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RawMedia_failed(ctx context.Context, field graphql.CollectedField, obj *graphql1.RawMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RawMedia_failed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Failed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RawMedia_failed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RawMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RawMedia_progress(ctx context.Context, field graphql.CollectedField, obj *graphql1.RawMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RawMedia_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.MediaProgress)
	fc.Result = res
	return ec.marshalOMediaProgress2ᚖoverdollᚋlibrariesᚋgraphqlᚐMediaProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RawMedia_progress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RawMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MediaProgress_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaProgress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveCategoryAlternativeTitlePayload_category(ctx context.Context, field graphql.CollectedField, obj *types.RemoveCategoryAlternativeTitlePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveCategoryAlternativeTitlePayload_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Category)
	fc.Result = res
	return ec.marshalOCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveCategoryAlternativeTitlePayload_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveCategoryAlternativeTitlePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveClubSlugAliasPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.RemoveClubSlugAliasPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveClubSlugAliasPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveClubSlugAliasPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveClubSlugAliasPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemovePostContentPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.RemovePostContentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemovePostContentPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemovePostContentPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemovePostContentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_type(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.ResourceType)
	fc.Result = res
	return ec.marshalNResourceType2overdollᚋlibrariesᚋgraphqlᚐResourceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ResourceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_processed(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_processed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_processed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_urls(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_urls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Urls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.ResourceURL)
	fc.Result = res
	return ec.marshalNResourceUrl2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURLᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_urls(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_ResourceUrl_url(ctx, field)
			case "mimeType":
				return ec.fieldContext_ResourceUrl_mimeType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResourceUrl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_width(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_height(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_videoDuration(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_videoDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_videoDuration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_videoThumbnail(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_videoThumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoThumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.ResourceURL)
	fc.Result = res
	return ec.marshalOResourceUrl2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURL(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_videoThumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_ResourceUrl_url(ctx, field)
			case "mimeType":
				return ec.fieldContext_ResourceUrl_mimeType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResourceUrl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_videoNoAudio(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_videoNoAudio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoNoAudio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_videoNoAudio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_preview(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_preview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_preview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_progress(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.ResourceProgress)
	fc.Result = res
	return ec.marshalOResourceProgress2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_progress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ResourceProgress_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ResourceProgress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_failed(ctx context.Context, field graphql.CollectedField, obj *graphql1.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_failed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Failed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_failed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceProgress_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.ResourceProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceProgress_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceProgress_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceUrl_url(ctx context.Context, field graphql.CollectedField, obj *graphql1.ResourceURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceUrl_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql1.URI)
	fc.Result = res
	return ec.marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceUrl_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceUrl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ResourceUrl_mimeType(ctx context.Context, field graphql.CollectedField, obj *graphql1.ResourceURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ResourceUrl_mimeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ResourceUrl_mimeType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ResourceUrl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteGameState_id(ctx context.Context, field graphql.CollectedField, obj *types.RouletteGameState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteGameState_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteGameState_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteGameState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteGameState_diceOne(ctx context.Context, field graphql.CollectedField, obj *types.RouletteGameState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteGameState_diceOne(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiceOne, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteGameState_diceOne(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteGameState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteGameState_diceTwo(ctx context.Context, field graphql.CollectedField, obj *types.RouletteGameState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteGameState_diceTwo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiceTwo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteGameState_diceTwo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteGameState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteGameState_diceThree(ctx context.Context, field graphql.CollectedField, obj *types.RouletteGameState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteGameState_diceThree(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiceThree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteGameState_diceThree(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteGameState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteGameState_post(ctx context.Context, field graphql.CollectedField, obj *types.RouletteGameState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteGameState_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RouletteGameState().Post(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalNPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteGameState_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteGameState",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteStatus_gameSession(ctx context.Context, field graphql.CollectedField, obj *types.RouletteStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteStatus_gameSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameSession, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.GameSession)
	fc.Result = res
	return ec.marshalNGameSession2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteStatus_gameSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameSession_id(ctx, field)
			case "reference":
				return ec.fieldContext_GameSession_reference(ctx, field)
			case "isClosed":
				return ec.fieldContext_GameSession_isClosed(ctx, field)
			case "viewerIsPlayer":
				return ec.fieldContext_GameSession_viewerIsPlayer(ctx, field)
			case "gameType":
				return ec.fieldContext_GameSession_gameType(ctx, field)
			case "seed":
				return ec.fieldContext_GameSession_seed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameSession", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteStatus_gameState(ctx context.Context, field graphql.CollectedField, obj *types.RouletteStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteStatus_gameState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.RouletteGameState)
	fc.Result = res
	return ec.marshalORouletteGameState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRouletteGameState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteStatus_gameState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RouletteGameState_id(ctx, field)
			case "diceOne":
				return ec.fieldContext_RouletteGameState_diceOne(ctx, field)
			case "diceTwo":
				return ec.fieldContext_RouletteGameState_diceTwo(ctx, field)
			case "diceThree":
				return ec.fieldContext_RouletteGameState_diceThree(ctx, field)
			case "post":
				return ec.fieldContext_RouletteGameState_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RouletteGameState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteStatus_totalRolls(ctx context.Context, field graphql.CollectedField, obj *types.RouletteStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteStatus_totalRolls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRolls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteStatus_totalRolls(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteStatus_totalDoubles(ctx context.Context, field graphql.CollectedField, obj *types.RouletteStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteStatus_totalDoubles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDoubles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteStatus_totalDoubles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RouletteStatus_score(ctx context.Context, field graphql.CollectedField, obj *types.RouletteStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RouletteStatus_score(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RouletteStatus_score(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RouletteStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.SearchConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.SearchEdge)
	fc.Result = res
	return ec.marshalNSearchEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSearchEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_SearchEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_SearchEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.SearchConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.SearchEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.SearchEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SearchEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.Search)
	fc.Result = res
	return ec.marshalNSearch2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSearch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SearchEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Search does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_id(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_reference(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_slug(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_thumbnail(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_banner(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_banner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Banner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_banner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_bannerMedia(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_bannerMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BannerMedia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphql1.Media)
	fc.Result = res
	return ec.marshalOMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_bannerMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Media does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_title(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Series().Title(rctx, obj, fc.Args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Series_title_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Series_titleTranslations(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_titleTranslations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TitleTranslations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.Translation)
	fc.Result = res
	return ec.marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_titleTranslations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Translation_language(ctx, field)
			case "text":
				return ec.fieldContext_Translation_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Translation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_totalLikes(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_totalLikes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalLikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_totalLikes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_totalPosts(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_totalPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPosts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_totalPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Series_characters(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_characters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Series().Characters(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["slugs"].([]string), fc.Args["name"].(*string), fc.Args["sortBy"].(types.CharactersSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CharacterConnection)
	fc.Result = res
	return ec.marshalNCharacterConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_characters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CharacterConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CharacterConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CharacterConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Series_characters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Series_posts(ctx context.Context, field graphql.CollectedField, obj *types.Series) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Series_posts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Series().Posts(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["audienceSlugs"].([]string), fc.Args["categorySlugs"].([]string), fc.Args["characterSlugs"].([]string), fc.Args["state"].(*types.PostState), fc.Args["supporterOnlyStatus"].([]types.SupporterOnlyStatus), fc.Args["seed"].(*string), fc.Args["sortBy"].(types.PostsSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Series_posts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Series",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Series_posts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _SeriesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.SeriesConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SeriesConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.SeriesEdge)
	fc.Result = res
	return ec.marshalNSeriesEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SeriesConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SeriesConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_SeriesEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_SeriesEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SeriesEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SeriesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.SeriesConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SeriesConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SeriesConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SeriesConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SeriesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.SeriesEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SeriesEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SeriesEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SeriesEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SeriesEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.SeriesEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SeriesEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Series)
	fc.Result = res
	return ec.marshalNSeries2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SeriesEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SeriesEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Series_id(ctx, field)
			case "reference":
				return ec.fieldContext_Series_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Series_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Series_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Series_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Series_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Series_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Series_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Series_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Series_totalPosts(ctx, field)
			case "characters":
				return ec.fieldContext_Series_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Series_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Series", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SpinRoulettePayload_rouletteGameState(ctx context.Context, field graphql.CollectedField, obj *types.SpinRoulettePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SpinRoulettePayload_rouletteGameState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RouletteGameState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.RouletteGameState)
	fc.Result = res
	return ec.marshalORouletteGameState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRouletteGameState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SpinRoulettePayload_rouletteGameState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SpinRoulettePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RouletteGameState_id(ctx, field)
			case "diceOne":
				return ec.fieldContext_RouletteGameState_diceOne(ctx, field)
			case "diceTwo":
				return ec.fieldContext_RouletteGameState_diceTwo(ctx, field)
			case "diceThree":
				return ec.fieldContext_RouletteGameState_diceThree(ctx, field)
			case "post":
				return ec.fieldContext_RouletteGameState_post(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RouletteGameState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubmitPostPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.SubmitPostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubmitPostPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubmitPostPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubmitPostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SuspendClubPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.SuspendClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SuspendClubPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SuspendClubPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SuspendClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerminateClubPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.TerminateClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerminateClubPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerminateClubPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerminateClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_id(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_reference(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_slug(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_banner(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_banner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Banner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphql1.Resource)
	fc.Result = res
	return ec.marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_banner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Resource_id(ctx, field)
			case "type":
				return ec.fieldContext_Resource_type(ctx, field)
			case "processed":
				return ec.fieldContext_Resource_processed(ctx, field)
			case "urls":
				return ec.fieldContext_Resource_urls(ctx, field)
			case "width":
				return ec.fieldContext_Resource_width(ctx, field)
			case "height":
				return ec.fieldContext_Resource_height(ctx, field)
			case "videoDuration":
				return ec.fieldContext_Resource_videoDuration(ctx, field)
			case "videoThumbnail":
				return ec.fieldContext_Resource_videoThumbnail(ctx, field)
			case "videoNoAudio":
				return ec.fieldContext_Resource_videoNoAudio(ctx, field)
			case "preview":
				return ec.fieldContext_Resource_preview(ctx, field)
			case "progress":
				return ec.fieldContext_Resource_progress(ctx, field)
			case "failed":
				return ec.fieldContext_Resource_failed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_bannerMedia(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_bannerMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BannerMedia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphql1.Media)
	fc.Result = res
	return ec.marshalOMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_bannerMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Media does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_title(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Title(rctx, obj, fc.Args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_title_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Topic_titleTranslations(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_titleTranslations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TitleTranslations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.Translation)
	fc.Result = res
	return ec.marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_titleTranslations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Translation_language(ctx, field)
			case "text":
				return ec.fieldContext_Translation_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Translation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_description(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Description(rctx, obj, fc.Args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_description_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Topic_descriptionTranslations(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_descriptionTranslations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionTranslations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graphql1.Translation)
	fc.Result = res
	return ec.marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_descriptionTranslations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Translation_language(ctx, field)
			case "text":
				return ec.fieldContext_Translation_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Translation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_weight(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_weight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_categories(ctx context.Context, field graphql.CollectedField, obj *types.Topic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Topic_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Topic().Categories(rctx, obj, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["first"].(*int), fc.Args["last"].(*int), fc.Args["slugs"].([]string), fc.Args["title"].(*string), fc.Args["sortBy"].(types.CategoriesSort))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.CategoryConnection)
	fc.Result = res
	return ec.marshalNCategoryConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Topic_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CategoryConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CategoryConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Topic_categories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TopicConnection_edges(ctx context.Context, field graphql.CollectedField, obj *types.TopicConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopicConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.TopicEdge)
	fc.Result = res
	return ec.marshalNTopicEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopicEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopicConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_TopicEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_TopicEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *types.TopicConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopicConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*relay.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopicConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *types.TopicEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopicEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopicEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicEdge_node(ctx context.Context, field graphql.CollectedField, obj *types.TopicEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopicEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Topic)
	fc.Result = res
	return ec.marshalNTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopicEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "reference":
				return ec.fieldContext_Topic_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "banner":
				return ec.fieldContext_Topic_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Topic_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Topic_titleTranslations(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Topic_descriptionTranslations(ctx, field)
			case "weight":
				return ec.fieldContext_Topic_weight(ctx, field)
			case "categories":
				return ec.fieldContext_Topic_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferClubOwnershipPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.TransferClubOwnershipPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransferClubOwnershipPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransferClubOwnershipPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferClubOwnershipPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Translation_language(ctx context.Context, field graphql.CollectedField, obj *graphql1.Translation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Translation_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.Language)
	fc.Result = res
	return ec.marshalNLanguage2ᚖoverdollᚋlibrariesᚋgraphqlᚐLanguage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Translation_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Translation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "locale":
				return ec.fieldContext_Language_locale(ctx, field)
			case "name":
				return ec.fieldContext_Language_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Language", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Translation_text(ctx context.Context, field graphql.CollectedField, obj *graphql1.Translation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Translation_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Translation_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Translation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnArchivePostPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.UnArchivePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnArchivePostPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnArchivePostPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnArchivePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnSuspendClubPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.UnSuspendClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnSuspendClubPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnSuspendClubPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnSuspendClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnTerminateClubPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.UnTerminateClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnTerminateClubPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnTerminateClubPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnTerminateClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UndoLikePostPayload_postLikeId(ctx context.Context, field graphql.CollectedField, obj *types.UndoLikePostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UndoLikePostPayload_postLikeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostLikeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*relay.ID)
	fc.Result = res
	return ec.marshalOID2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UndoLikePostPayload_postLikeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UndoLikePostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateAudienceBannerPayload_audience(ctx context.Context, field graphql.CollectedField, obj *types.UpdateAudienceBannerPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateAudienceBannerPayload_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Audience)
	fc.Result = res
	return ec.marshalOAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateAudienceBannerPayload_audience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateAudienceBannerPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Audience_id(ctx, field)
			case "reference":
				return ec.fieldContext_Audience_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Audience_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Audience_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Audience_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Audience_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Audience_title(ctx, field)
			case "standard":
				return ec.fieldContext_Audience_standard(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Audience_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Audience_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Audience_totalPosts(ctx, field)
			case "posts":
				return ec.fieldContext_Audience_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audience", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateAudienceIsStandardPayload_audience(ctx context.Context, field graphql.CollectedField, obj *types.UpdateAudienceIsStandardPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateAudienceIsStandardPayload_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Audience)
	fc.Result = res
	return ec.marshalOAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateAudienceIsStandardPayload_audience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateAudienceIsStandardPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Audience_id(ctx, field)
			case "reference":
				return ec.fieldContext_Audience_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Audience_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Audience_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Audience_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Audience_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Audience_title(ctx, field)
			case "standard":
				return ec.fieldContext_Audience_standard(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Audience_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Audience_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Audience_totalPosts(ctx, field)
			case "posts":
				return ec.fieldContext_Audience_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audience", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateAudienceTitlePayload_audience(ctx context.Context, field graphql.CollectedField, obj *types.UpdateAudienceTitlePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateAudienceTitlePayload_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Audience)
	fc.Result = res
	return ec.marshalOAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateAudienceTitlePayload_audience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateAudienceTitlePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Audience_id(ctx, field)
			case "reference":
				return ec.fieldContext_Audience_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Audience_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Audience_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Audience_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Audience_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Audience_title(ctx, field)
			case "standard":
				return ec.fieldContext_Audience_standard(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Audience_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Audience_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Audience_totalPosts(ctx, field)
			case "posts":
				return ec.fieldContext_Audience_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audience", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCategoryTitlePayload_category(ctx context.Context, field graphql.CollectedField, obj *types.UpdateCategoryTitlePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCategoryTitlePayload_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Category)
	fc.Result = res
	return ec.marshalOCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCategoryTitlePayload_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCategoryTitlePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCategoryTopicPayload_category(ctx context.Context, field graphql.CollectedField, obj *types.UpdateCategoryTopicPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCategoryTopicPayload_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Category)
	fc.Result = res
	return ec.marshalOCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCategoryTopicPayload_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCategoryTopicPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Category_id(ctx, field)
			case "reference":
				return ec.fieldContext_Category_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Category_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Category_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Category_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Category_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Category_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Category_titleTranslations(ctx, field)
			case "alternativeTitles":
				return ec.fieldContext_Category_alternativeTitles(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Category_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Category_totalPosts(ctx, field)
			case "topic":
				return ec.fieldContext_Category_topic(ctx, field)
			case "posts":
				return ec.fieldContext_Category_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Category", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCharacterNamePayload_character(ctx context.Context, field graphql.CollectedField, obj *types.UpdateCharacterNamePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCharacterNamePayload_character(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Character, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Character)
	fc.Result = res
	return ec.marshalOCharacter2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCharacterNamePayload_character(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCharacterNamePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Character_id(ctx, field)
			case "reference":
				return ec.fieldContext_Character_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Character_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Character_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Character_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Character_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Character_name(ctx, field)
			case "nameTranslations":
				return ec.fieldContext_Character_nameTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Character_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Character_totalPosts(ctx, field)
			case "series":
				return ec.fieldContext_Character_series(ctx, field)
			case "club":
				return ec.fieldContext_Character_club(ctx, field)
			case "posts":
				return ec.fieldContext_Character_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Character", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateClubCharactersLimitPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.UpdateClubCharactersLimitPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateClubCharactersLimitPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateClubCharactersLimitPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateClubCharactersLimitPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateClubNamePayload_club(ctx context.Context, field graphql.CollectedField, obj *types.UpdateClubNamePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateClubNamePayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateClubNamePayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateClubNamePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateClubThumbnailPayload_club(ctx context.Context, field graphql.CollectedField, obj *types.UpdateClubThumbnailPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateClubThumbnailPayload_club(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Club, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Club)
	fc.Result = res
	return ec.marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateClubThumbnailPayload_club(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateClubThumbnailPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Club_id(ctx, field)
			case "reference":
				return ec.fieldContext_Club_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Club_slug(ctx, field)
			case "slugAliasesLimit":
				return ec.fieldContext_Club_slugAliasesLimit(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Club_totalPosts(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Club_totalLikes(ctx, field)
			case "slugAliases":
				return ec.fieldContext_Club_slugAliases(ctx, field)
			case "links":
				return ec.fieldContext_Club_links(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Club_thumbnail(ctx, field)
			case "thumbnailMedia":
				return ec.fieldContext_Club_thumbnailMedia(ctx, field)
			case "banner":
				return ec.fieldContext_Club_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Club_bannerMedia(ctx, field)
			case "name":
				return ec.fieldContext_Club_name(ctx, field)
			case "owner":
				return ec.fieldContext_Club_owner(ctx, field)
			case "termination":
				return ec.fieldContext_Club_termination(ctx, field)
			case "suspension":
				return ec.fieldContext_Club_suspension(ctx, field)
			case "suspensionLogs":
				return ec.fieldContext_Club_suspensionLogs(ctx, field)
			case "viewerIsOwner":
				return ec.fieldContext_Club_viewerIsOwner(ctx, field)
			case "canCreateSupporterOnlyPosts":
				return ec.fieldContext_Club_canCreateSupporterOnlyPosts(ctx, field)
			case "canSupport":
				return ec.fieldContext_Club_canSupport(ctx, field)
			case "nextSupporterPostTime":
				return ec.fieldContext_Club_nextSupporterPostTime(ctx, field)
			case "viewerMember":
				return ec.fieldContext_Club_viewerMember(ctx, field)
			case "membersIsSupporterCount":
				return ec.fieldContext_Club_membersIsSupporterCount(ctx, field)
			case "membersCount":
				return ec.fieldContext_Club_membersCount(ctx, field)
			case "members":
				return ec.fieldContext_Club_members(ctx, field)
			case "charactersEnabled":
				return ec.fieldContext_Club_charactersEnabled(ctx, field)
			case "charactersLimit":
				return ec.fieldContext_Club_charactersLimit(ctx, field)
			case "charactersCount":
				return ec.fieldContext_Club_charactersCount(ctx, field)
			case "characters":
				return ec.fieldContext_Club_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Club_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Club", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCurationProfileAudiencePayload_curationProfile(ctx context.Context, field graphql.CollectedField, obj *types.UpdateCurationProfileAudiencePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCurationProfileAudiencePayload_curationProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurationProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CurationProfile)
	fc.Result = res
	return ec.marshalOCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCurationProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCurationProfileAudiencePayload_curationProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCurationProfileAudiencePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CurationProfile_id(ctx, field)
			case "completed":
				return ec.fieldContext_CurationProfile_completed(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_CurationProfile_dateOfBirth(ctx, field)
			case "audience":
				return ec.fieldContext_CurationProfile_audience(ctx, field)
			case "category":
				return ec.fieldContext_CurationProfile_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CurationProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCurationProfileCategoryPayload_curationProfile(ctx context.Context, field graphql.CollectedField, obj *types.UpdateCurationProfileCategoryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCurationProfileCategoryPayload_curationProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurationProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CurationProfile)
	fc.Result = res
	return ec.marshalOCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCurationProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCurationProfileCategoryPayload_curationProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCurationProfileCategoryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CurationProfile_id(ctx, field)
			case "completed":
				return ec.fieldContext_CurationProfile_completed(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_CurationProfile_dateOfBirth(ctx, field)
			case "audience":
				return ec.fieldContext_CurationProfile_audience(ctx, field)
			case "category":
				return ec.fieldContext_CurationProfile_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CurationProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCurationProfileDateOfBirthPayload_curationProfile(ctx context.Context, field graphql.CollectedField, obj *types.UpdateCurationProfileDateOfBirthPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCurationProfileDateOfBirthPayload_curationProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurationProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.CurationProfile)
	fc.Result = res
	return ec.marshalOCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCurationProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCurationProfileDateOfBirthPayload_curationProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCurationProfileDateOfBirthPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CurationProfile_id(ctx, field)
			case "completed":
				return ec.fieldContext_CurationProfile_completed(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_CurationProfile_dateOfBirth(ctx, field)
			case "audience":
				return ec.fieldContext_CurationProfile_audience(ctx, field)
			case "category":
				return ec.fieldContext_CurationProfile_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CurationProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePostAudiencePayload_post(ctx context.Context, field graphql.CollectedField, obj *types.UpdatePostAudiencePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePostAudiencePayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePostAudiencePayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePostAudiencePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePostCategoriesPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.UpdatePostCategoriesPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePostCategoriesPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePostCategoriesPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePostCategoriesPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePostCharactersPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.UpdatePostCharactersPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePostCharactersPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePostCharactersPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePostCharactersPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePostClubPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.UpdatePostClubPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePostClubPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePostClubPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePostClubPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePostContentIsSupporterOnlyPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.UpdatePostContentIsSupporterOnlyPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePostContentIsSupporterOnlyPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePostContentIsSupporterOnlyPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePostContentIsSupporterOnlyPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePostContentOrderPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.UpdatePostContentOrderPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePostContentOrderPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePostContentOrderPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePostContentOrderPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePostDescriptionPayload_post(ctx context.Context, field graphql.CollectedField, obj *types.UpdatePostDescriptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePostDescriptionPayload_post(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Post)
	fc.Result = res
	return ec.marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePostDescriptionPayload_post(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePostDescriptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Post_id(ctx, field)
			case "reference":
				return ec.fieldContext_Post_reference(ctx, field)
			case "state":
				return ec.fieldContext_Post_state(ctx, field)
			case "supporterOnlyStatus":
				return ec.fieldContext_Post_supporterOnlyStatus(ctx, field)
			case "contributor":
				return ec.fieldContext_Post_contributor(ctx, field)
			case "club":
				return ec.fieldContext_Post_club(ctx, field)
			case "content":
				return ec.fieldContext_Post_content(ctx, field)
			case "description":
				return ec.fieldContext_Post_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Post_descriptionTranslations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Post_createdAt(ctx, field)
			case "postedAt":
				return ec.fieldContext_Post_postedAt(ctx, field)
			case "suggestedPosts":
				return ec.fieldContext_Post_suggestedPosts(ctx, field)
			case "audience":
				return ec.fieldContext_Post_audience(ctx, field)
			case "categories":
				return ec.fieldContext_Post_categories(ctx, field)
			case "characters":
				return ec.fieldContext_Post_characters(ctx, field)
			case "likes":
				return ec.fieldContext_Post_likes(ctx, field)
			case "viewerLiked":
				return ec.fieldContext_Post_viewerLiked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Post", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateSeriesTitlePayload_series(ctx context.Context, field graphql.CollectedField, obj *types.UpdateSeriesTitlePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateSeriesTitlePayload_series(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Series, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Series)
	fc.Result = res
	return ec.marshalOSeries2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateSeriesTitlePayload_series(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateSeriesTitlePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Series_id(ctx, field)
			case "reference":
				return ec.fieldContext_Series_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Series_slug(ctx, field)
			case "thumbnail":
				return ec.fieldContext_Series_thumbnail(ctx, field)
			case "banner":
				return ec.fieldContext_Series_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Series_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Series_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Series_titleTranslations(ctx, field)
			case "totalLikes":
				return ec.fieldContext_Series_totalLikes(ctx, field)
			case "totalPosts":
				return ec.fieldContext_Series_totalPosts(ctx, field)
			case "characters":
				return ec.fieldContext_Series_characters(ctx, field)
			case "posts":
				return ec.fieldContext_Series_posts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Series", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTopicBannerPayload_topic(ctx context.Context, field graphql.CollectedField, obj *types.UpdateTopicBannerPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTopicBannerPayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Topic)
	fc.Result = res
	return ec.marshalOTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTopicBannerPayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTopicBannerPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "reference":
				return ec.fieldContext_Topic_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "banner":
				return ec.fieldContext_Topic_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Topic_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Topic_titleTranslations(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Topic_descriptionTranslations(ctx, field)
			case "weight":
				return ec.fieldContext_Topic_weight(ctx, field)
			case "categories":
				return ec.fieldContext_Topic_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTopicDescriptionPayload_topic(ctx context.Context, field graphql.CollectedField, obj *types.UpdateTopicDescriptionPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTopicDescriptionPayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Topic)
	fc.Result = res
	return ec.marshalOTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTopicDescriptionPayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTopicDescriptionPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "reference":
				return ec.fieldContext_Topic_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "banner":
				return ec.fieldContext_Topic_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Topic_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Topic_titleTranslations(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Topic_descriptionTranslations(ctx, field)
			case "weight":
				return ec.fieldContext_Topic_weight(ctx, field)
			case "categories":
				return ec.fieldContext_Topic_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTopicTitlePayload_topic(ctx context.Context, field graphql.CollectedField, obj *types.UpdateTopicTitlePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTopicTitlePayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Topic)
	fc.Result = res
	return ec.marshalOTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTopicTitlePayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTopicTitlePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "reference":
				return ec.fieldContext_Topic_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "banner":
				return ec.fieldContext_Topic_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Topic_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Topic_titleTranslations(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Topic_descriptionTranslations(ctx, field)
			case "weight":
				return ec.fieldContext_Topic_weight(ctx, field)
			case "categories":
				return ec.fieldContext_Topic_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateTopicWeightPayload_topic(ctx context.Context, field graphql.CollectedField, obj *types.UpdateTopicWeightPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateTopicWeightPayload_topic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Topic)
	fc.Result = res
	return ec.marshalOTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateTopicWeightPayload_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateTopicWeightPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "reference":
				return ec.fieldContext_Topic_reference(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "banner":
				return ec.fieldContext_Topic_banner(ctx, field)
			case "bannerMedia":
				return ec.fieldContext_Topic_bannerMedia(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "titleTranslations":
				return ec.fieldContext_Topic_titleTranslations(ctx, field)
			case "description":
				return ec.fieldContext_Topic_description(ctx, field)
			case "descriptionTranslations":
				return ec.fieldContext_Topic_descriptionTranslations(ctx, field)
			case "weight":
				return ec.fieldContext_Topic_weight(ctx, field)
			case "categories":
				return ec.fieldContext_Topic_categories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(relay.ID)
	fc.Result = res
	return ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_cover(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_cover(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cover, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.ImageMedia)
	fc.Result = res
	return ec.marshalNImageMedia2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_cover(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ImageMedia_id(ctx, field)
			case "variants":
				return ec.fieldContext_ImageMedia_variants(ctx, field)
			case "colorPalettes":
				return ec.fieldContext_ImageMedia_colorPalettes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMedia", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_aspectRatio(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_aspectRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AspectRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.AspectRatio)
	fc.Result = res
	return ec.marshalNAspectRatio2ᚖoverdollᚋlibrariesᚋgraphqlᚐAspectRatio(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_aspectRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_AspectRatio_width(ctx, field)
			case "height":
				return ec.fieldContext_AspectRatio_height(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AspectRatio", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_containers(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_containers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Containers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]graphql1.VideoContainer)
	fc.Result = res
	return ec.marshalNVideoContainer2ᚕoverdollᚋlibrariesᚋgraphqlᚐVideoContainerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_containers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VideoContainer does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_duration(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoMedia_hasAudio(ctx context.Context, field graphql.CollectedField, obj *graphql1.VideoMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoMedia_hasAudio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAudio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoMedia_hasAudio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__Service_sdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__Service_sdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddCategoryAlternativeTitleInput(ctx context.Context, obj interface{}) (types.AddCategoryAlternativeTitleInput, error) {
	var it types.AddCategoryAlternativeTitleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNBCP472string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddClubSlugAliasInput(ctx context.Context, obj interface{}) (types.AddClubSlugAliasInput, error) {
	var it types.AddClubSlugAliasInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "slug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			it.Slug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddPostContentInput(ctx context.Context, obj interface{}) (types.AddPostContentInput, error) {
	var it types.AddPostContentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArchivePostInput(ctx context.Context, obj interface{}) (types.ArchivePostInput, error) {
	var it types.ArchivePostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAudienceInput(ctx context.Context, obj interface{}) (types.CreateAudienceInput, error) {
	var it types.CreateAudienceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "slug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			it.Slug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard"))
			it.Standard, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCategoryInput(ctx context.Context, obj interface{}) (types.CreateCategoryInput, error) {
	var it types.CreateCategoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "slug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			it.Slug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			it.TopicID, err = ec.unmarshalOID2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCharacterInput(ctx context.Context, obj interface{}) (types.CreateCharacterInput, error) {
	var it types.CreateCharacterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "seriesId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seriesId"))
			it.SeriesID, err = ec.unmarshalOID2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalOID2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "slug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			it.Slug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateClubInput(ctx context.Context, obj interface{}) (types.CreateClubInput, error) {
	var it types.CreateClubInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "slug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			it.Slug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateGameSessionInput(ctx context.Context, obj interface{}) (types.CreateGameSessionInput, error) {
	var it types.CreateGameSessionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "gameType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameType"))
			it.GameType, err = ec.unmarshalNGameType2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameType(ctx, v)
			if err != nil {
				return it, err
			}
		case "seed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed"))
			it.Seed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePostInput(ctx context.Context, obj interface{}) (types.CreatePostInput, error) {
	var it types.CreatePostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSeriesInput(ctx context.Context, obj interface{}) (types.CreateSeriesInput, error) {
	var it types.CreateSeriesInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "slug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			it.Slug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTopicInput(ctx context.Context, obj interface{}) (types.CreateTopicInput, error) {
	var it types.CreateTopicInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "slug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			it.Slug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeletePostInput(ctx context.Context, obj interface{}) (types.DeletePostInput, error) {
	var it types.DeletePostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisableClubCharactersInput(ctx context.Context, obj interface{}) (types.DisableClubCharactersInput, error) {
	var it types.DisableClubCharactersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisableClubSupporterOnlyPostsInput(ctx context.Context, obj interface{}) (types.DisableClubSupporterOnlyPostsInput, error) {
	var it types.DisableClubSupporterOnlyPostsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnableClubCharactersInput(ctx context.Context, obj interface{}) (types.EnableClubCharactersInput, error) {
	var it types.EnableClubCharactersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "charactersLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("charactersLimit"))
			it.CharactersLimit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnableClubSupporterOnlyPostsInput(ctx context.Context, obj interface{}) (types.EnableClubSupporterOnlyPostsInput, error) {
	var it types.EnableClubSupporterOnlyPostsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJoinClubInput(ctx context.Context, obj interface{}) (types.JoinClubInput, error) {
	var it types.JoinClubInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLeaveClubInput(ctx context.Context, obj interface{}) (types.LeaveClubInput, error) {
	var it types.LeaveClubInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLikePostInput(ctx context.Context, obj interface{}) (types.LikePostInput, error) {
	var it types.LikePostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPromoteClubSlugAliasToDefaultInput(ctx context.Context, obj interface{}) (types.PromoteClubSlugAliasToDefaultInput, error) {
	var it types.PromoteClubSlugAliasToDefaultInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "slug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			it.Slug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemoveCategoryAlternativeTitleInput(ctx context.Context, obj interface{}) (types.RemoveCategoryAlternativeTitleInput, error) {
	var it types.RemoveCategoryAlternativeTitleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemoveClubSlugAliasInput(ctx context.Context, obj interface{}) (types.RemoveClubSlugAliasInput, error) {
	var it types.RemoveClubSlugAliasInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "slug":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			it.Slug, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemovePostContentInput(ctx context.Context, obj interface{}) (types.RemovePostContentInput, error) {
	var it types.RemovePostContentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "contentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentIds"))
			it.ContentIds, err = ec.unmarshalNID2ᚕoverdollᚋlibrariesᚋgraphqlᚋrelayᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpinRouletteInput(ctx context.Context, obj interface{}) (types.SpinRouletteInput, error) {
	var it types.SpinRouletteInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "gameSessionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameSessionId"))
			it.GameSessionID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubmitPostInput(ctx context.Context, obj interface{}) (types.SubmitPostInput, error) {
	var it types.SubmitPostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSuspendClubInput(ctx context.Context, obj interface{}) (types.SuspendClubInput, error) {
	var it types.SuspendClubInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			it.EndTime, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTerminateClubInput(ctx context.Context, obj interface{}) (types.TerminateClubInput, error) {
	var it types.TerminateClubInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTransferClubOwnershipInput(ctx context.Context, obj interface{}) (types.TransferClubOwnershipInput, error) {
	var it types.TransferClubOwnershipInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			it.AccountID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUnArchivePostInput(ctx context.Context, obj interface{}) (types.UnArchivePostInput, error) {
	var it types.UnArchivePostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUnSuspendClubInput(ctx context.Context, obj interface{}) (types.UnSuspendClubInput, error) {
	var it types.UnSuspendClubInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUnTerminateClubInput(ctx context.Context, obj interface{}) (types.UnTerminateClubInput, error) {
	var it types.UnTerminateClubInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUndoLikePostInput(ctx context.Context, obj interface{}) (types.UndoLikePostInput, error) {
	var it types.UndoLikePostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAudienceBannerInput(ctx context.Context, obj interface{}) (types.UpdateAudienceBannerInput, error) {
	var it types.UpdateAudienceBannerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "banner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banner"))
			it.Banner, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAudienceIsStandardInput(ctx context.Context, obj interface{}) (types.UpdateAudienceIsStandardInput, error) {
	var it types.UpdateAudienceIsStandardInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard"))
			it.Standard, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAudienceTitleInput(ctx context.Context, obj interface{}) (types.UpdateAudienceTitleInput, error) {
	var it types.UpdateAudienceTitleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNBCP472string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCategoryTitleInput(ctx context.Context, obj interface{}) (types.UpdateCategoryTitleInput, error) {
	var it types.UpdateCategoryTitleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNBCP472string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCategoryTopicInput(ctx context.Context, obj interface{}) (types.UpdateCategoryTopicInput, error) {
	var it types.UpdateCategoryTopicInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "topicId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			it.TopicID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCharacterNameInput(ctx context.Context, obj interface{}) (types.UpdateCharacterNameInput, error) {
	var it types.UpdateCharacterNameInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNBCP472string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateClubCharactersLimitInput(ctx context.Context, obj interface{}) (types.UpdateClubCharactersLimitInput, error) {
	var it types.UpdateClubCharactersLimitInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clubId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubId"))
			it.ClubID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "charactersLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("charactersLimit"))
			it.CharactersLimit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateClubNameInput(ctx context.Context, obj interface{}) (types.UpdateClubNameInput, error) {
	var it types.UpdateClubNameInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateClubThumbnailInput(ctx context.Context, obj interface{}) (types.UpdateClubThumbnailInput, error) {
	var it types.UpdateClubThumbnailInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "thumbnail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnail"))
			it.Thumbnail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCurationProfileAudienceInput(ctx context.Context, obj interface{}) (types.UpdateCurationProfileAudienceInput, error) {
	var it types.UpdateCurationProfileAudienceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "audienceIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audienceIds"))
			it.AudienceIds, err = ec.unmarshalNID2ᚕoverdollᚋlibrariesᚋgraphqlᚋrelayᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "skipped":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skipped"))
			it.Skipped, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCurationProfileCategoryInput(ctx context.Context, obj interface{}) (types.UpdateCurationProfileCategoryInput, error) {
	var it types.UpdateCurationProfileCategoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "categoryIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIds"))
			it.CategoryIds, err = ec.unmarshalNID2ᚕoverdollᚋlibrariesᚋgraphqlᚋrelayᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "skipped":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skipped"))
			it.Skipped, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCurationProfileDateOfBirthInput(ctx context.Context, obj interface{}) (types.UpdateCurationProfileDateOfBirthInput, error) {
	var it types.UpdateCurationProfileDateOfBirthInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "skipped":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skipped"))
			it.Skipped, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePostAudienceInput(ctx context.Context, obj interface{}) (types.UpdatePostAudienceInput, error) {
	var it types.UpdatePostAudienceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "audienceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audienceId"))
			it.AudienceID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePostCategoriesInput(ctx context.Context, obj interface{}) (types.UpdatePostCategoriesInput, error) {
	var it types.UpdatePostCategoriesInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "categoryIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryIds"))
			it.CategoryIds, err = ec.unmarshalNID2ᚕoverdollᚋlibrariesᚋgraphqlᚋrelayᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePostCharactersInput(ctx context.Context, obj interface{}) (types.UpdatePostCharactersInput, error) {
	var it types.UpdatePostCharactersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "characterIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("characterIds"))
			it.CharacterIds, err = ec.unmarshalNID2ᚕoverdollᚋlibrariesᚋgraphqlᚋrelayᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePostContentIsSupporterOnlyInput(ctx context.Context, obj interface{}) (types.UpdatePostContentIsSupporterOnlyInput, error) {
	var it types.UpdatePostContentIsSupporterOnlyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "contentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentIds"))
			it.ContentIds, err = ec.unmarshalNID2ᚕoverdollᚋlibrariesᚋgraphqlᚋrelayᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSupporterOnly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSupporterOnly"))
			it.IsSupporterOnly, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePostContentOrderInput(ctx context.Context, obj interface{}) (types.UpdatePostContentOrderInput, error) {
	var it types.UpdatePostContentOrderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "contentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentIds"))
			it.ContentIds, err = ec.unmarshalNID2ᚕoverdollᚋlibrariesᚋgraphqlᚋrelayᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePostDescriptionInput(ctx context.Context, obj interface{}) (types.UpdatePostDescriptionInput, error) {
	var it types.UpdatePostDescriptionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNBCP472string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSeriesTitleInput(ctx context.Context, obj interface{}) (types.UpdateSeriesTitleInput, error) {
	var it types.UpdateSeriesTitleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNBCP472string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopicBannerInput(ctx context.Context, obj interface{}) (types.UpdateTopicBannerInput, error) {
	var it types.UpdateTopicBannerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "banner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banner"))
			it.Banner, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopicDescriptionInput(ctx context.Context, obj interface{}) (types.UpdateTopicDescriptionInput, error) {
	var it types.UpdateTopicDescriptionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNBCP472string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopicTitleInput(ctx context.Context, obj interface{}) (types.UpdateTopicTitleInput, error) {
	var it types.UpdateTopicTitleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locale":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			it.Locale, err = ec.unmarshalNBCP472string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopicWeightInput(ctx context.Context, obj interface{}) (types.UpdateTopicWeightInput, error) {
	var it types.UpdateTopicWeightInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _ClubSuspensionLog(ctx context.Context, sel ast.SelectionSet, obj types.ClubSuspensionLog) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.ClubIssuedSuspensionLog:
		return ec._ClubIssuedSuspensionLog(ctx, sel, &obj)
	case *types.ClubIssuedSuspensionLog:
		if obj == nil {
			return graphql.Null
		}
		return ec._ClubIssuedSuspensionLog(ctx, sel, obj)
	case types.ClubRemovedSuspensionLog:
		return ec._ClubRemovedSuspensionLog(ctx, sel, &obj)
	case *types.ClubRemovedSuspensionLog:
		if obj == nil {
			return graphql.Null
		}
		return ec._ClubRemovedSuspensionLog(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _GameSessionStatus(ctx context.Context, sel ast.SelectionSet, obj types.GameSessionStatus) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.RouletteStatus:
		return ec._RouletteStatus(ctx, sel, &obj)
	case *types.RouletteStatus:
		if obj == nil {
			return graphql.Null
		}
		return ec._RouletteStatus(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Media(ctx context.Context, sel ast.SelectionSet, obj graphql1.Media) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graphql1.VideoMedia:
		return ec._VideoMedia(ctx, sel, &obj)
	case *graphql1.VideoMedia:
		if obj == nil {
			return graphql.Null
		}
		return ec._VideoMedia(ctx, sel, obj)
	case graphql1.ImageMedia:
		return ec._ImageMedia(ctx, sel, &obj)
	case *graphql1.ImageMedia:
		if obj == nil {
			return graphql.Null
		}
		return ec._ImageMedia(ctx, sel, obj)
	case graphql1.RawMedia:
		return ec._RawMedia(ctx, sel, &obj)
	case *graphql1.RawMedia:
		if obj == nil {
			return graphql.Null
		}
		return ec._RawMedia(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj relay.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Audience:
		return ec._Audience(ctx, sel, &obj)
	case *types.Audience:
		if obj == nil {
			return graphql.Null
		}
		return ec._Audience(ctx, sel, obj)
	case types.Category:
		return ec._Category(ctx, sel, &obj)
	case *types.Category:
		if obj == nil {
			return graphql.Null
		}
		return ec._Category(ctx, sel, obj)
	case types.Character:
		return ec._Character(ctx, sel, &obj)
	case *types.Character:
		if obj == nil {
			return graphql.Null
		}
		return ec._Character(ctx, sel, obj)
	case types.Club:
		return ec._Club(ctx, sel, &obj)
	case *types.Club:
		if obj == nil {
			return graphql.Null
		}
		return ec._Club(ctx, sel, obj)
	case types.ClubMember:
		return ec._ClubMember(ctx, sel, &obj)
	case *types.ClubMember:
		if obj == nil {
			return graphql.Null
		}
		return ec._ClubMember(ctx, sel, obj)
	case types.PostLike:
		return ec._PostLike(ctx, sel, &obj)
	case *types.PostLike:
		if obj == nil {
			return graphql.Null
		}
		return ec._PostLike(ctx, sel, obj)
	case types.Post:
		return ec._Post(ctx, sel, &obj)
	case *types.Post:
		if obj == nil {
			return graphql.Null
		}
		return ec._Post(ctx, sel, obj)
	case types.Series:
		return ec._Series(ctx, sel, &obj)
	case *types.Series:
		if obj == nil {
			return graphql.Null
		}
		return ec._Series(ctx, sel, obj)
	case types.Topic:
		return ec._Topic(ctx, sel, &obj)
	case *types.Topic:
		if obj == nil {
			return graphql.Null
		}
		return ec._Topic(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Search(ctx context.Context, sel ast.SelectionSet, obj types.Search) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Category:
		return ec._Category(ctx, sel, &obj)
	case *types.Category:
		if obj == nil {
			return graphql.Null
		}
		return ec._Category(ctx, sel, obj)
	case types.Character:
		return ec._Character(ctx, sel, &obj)
	case *types.Character:
		if obj == nil {
			return graphql.Null
		}
		return ec._Character(ctx, sel, obj)
	case types.Series:
		return ec._Series(ctx, sel, &obj)
	case *types.Series:
		if obj == nil {
			return graphql.Null
		}
		return ec._Series(ctx, sel, obj)
	case types.Club:
		return ec._Club(ctx, sel, &obj)
	case *types.Club:
		if obj == nil {
			return graphql.Null
		}
		return ec._Club(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _VideoContainer(ctx context.Context, sel ast.SelectionSet, obj graphql1.VideoContainer) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graphql1.HLSVideoContainer:
		return ec._HLSVideoContainer(ctx, sel, &obj)
	case *graphql1.HLSVideoContainer:
		if obj == nil {
			return graphql.Null
		}
		return ec._HLSVideoContainer(ctx, sel, obj)
	case graphql1.MP4VideoContainer:
		return ec._MP4VideoContainer(ctx, sel, &obj)
	case *graphql1.MP4VideoContainer:
		if obj == nil {
			return graphql.Null
		}
		return ec._MP4VideoContainer(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) __Entity(ctx context.Context, sel ast.SelectionSet, obj fedruntime.Entity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case types.Account:
		return ec._Account(ctx, sel, &obj)
	case *types.Account:
		if obj == nil {
			return graphql.Null
		}
		return ec._Account(ctx, sel, obj)
	case types.Audience:
		return ec._Audience(ctx, sel, &obj)
	case *types.Audience:
		if obj == nil {
			return graphql.Null
		}
		return ec._Audience(ctx, sel, obj)
	case types.Category:
		return ec._Category(ctx, sel, &obj)
	case *types.Category:
		if obj == nil {
			return graphql.Null
		}
		return ec._Category(ctx, sel, obj)
	case types.Character:
		return ec._Character(ctx, sel, &obj)
	case *types.Character:
		if obj == nil {
			return graphql.Null
		}
		return ec._Character(ctx, sel, obj)
	case types.Club:
		return ec._Club(ctx, sel, &obj)
	case *types.Club:
		if obj == nil {
			return graphql.Null
		}
		return ec._Club(ctx, sel, obj)
	case types.ClubMember:
		return ec._ClubMember(ctx, sel, &obj)
	case *types.ClubMember:
		if obj == nil {
			return graphql.Null
		}
		return ec._ClubMember(ctx, sel, obj)
	case graphql1.MediaProgress:
		return ec._MediaProgress(ctx, sel, &obj)
	case *graphql1.MediaProgress:
		if obj == nil {
			return graphql.Null
		}
		return ec._MediaProgress(ctx, sel, obj)
	case types.Post:
		return ec._Post(ctx, sel, &obj)
	case *types.Post:
		if obj == nil {
			return graphql.Null
		}
		return ec._Post(ctx, sel, obj)
	case types.PostLike:
		return ec._PostLike(ctx, sel, &obj)
	case *types.PostLike:
		if obj == nil {
			return graphql.Null
		}
		return ec._PostLike(ctx, sel, obj)
	case graphql1.ResourceProgress:
		return ec._ResourceProgress(ctx, sel, &obj)
	case *graphql1.ResourceProgress:
		if obj == nil {
			return graphql.Null
		}
		return ec._ResourceProgress(ctx, sel, obj)
	case types.Series:
		return ec._Series(ctx, sel, &obj)
	case *types.Series:
		if obj == nil {
			return graphql.Null
		}
		return ec._Series(ctx, sel, obj)
	case types.Topic:
		return ec._Topic(ctx, sel, &obj)
	case *types.Topic:
		if obj == nil {
			return graphql.Null
		}
		return ec._Topic(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountImplementors = []string{"Account", "_Entity"}

func (ec *executionContext) _Account(ctx context.Context, sel ast.SelectionSet, obj *types.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "clubsLimit":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_clubsLimit(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "clubsCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_clubsCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hasNonTerminatedClubs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_hasNonTerminatedClubs(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "clubs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_clubs(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "clubMembershipsLimit":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_clubMembershipsLimit(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "clubMembershipsCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_clubMembershipsCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "clubMemberships":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_clubMemberships(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "curationProfile":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_curationProfile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "clubMembersPostsFeed":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_clubMembersPostsFeed(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "posts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_posts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "likedPosts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_likedPosts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._Account_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addCategoryAlternativeTitlePayloadImplementors = []string{"AddCategoryAlternativeTitlePayload"}

func (ec *executionContext) _AddCategoryAlternativeTitlePayload(ctx context.Context, sel ast.SelectionSet, obj *types.AddCategoryAlternativeTitlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addCategoryAlternativeTitlePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddCategoryAlternativeTitlePayload")
		case "category":

			out.Values[i] = ec._AddCategoryAlternativeTitlePayload_category(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addClubSlugAliasPayloadImplementors = []string{"AddClubSlugAliasPayload"}

func (ec *executionContext) _AddClubSlugAliasPayload(ctx context.Context, sel ast.SelectionSet, obj *types.AddClubSlugAliasPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addClubSlugAliasPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddClubSlugAliasPayload")
		case "club":

			out.Values[i] = ec._AddClubSlugAliasPayload_club(ctx, field, obj)

		case "validation":

			out.Values[i] = ec._AddClubSlugAliasPayload_validation(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addPostContentPayloadImplementors = []string{"AddPostContentPayload"}

func (ec *executionContext) _AddPostContentPayload(ctx context.Context, sel ast.SelectionSet, obj *types.AddPostContentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addPostContentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddPostContentPayload")
		case "post":

			out.Values[i] = ec._AddPostContentPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var archivePostPayloadImplementors = []string{"ArchivePostPayload"}

func (ec *executionContext) _ArchivePostPayload(ctx context.Context, sel ast.SelectionSet, obj *types.ArchivePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, archivePostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArchivePostPayload")
		case "post":

			out.Values[i] = ec._ArchivePostPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var aspectRatioImplementors = []string{"AspectRatio"}

func (ec *executionContext) _AspectRatio(ctx context.Context, sel ast.SelectionSet, obj *graphql1.AspectRatio) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aspectRatioImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AspectRatio")
		case "width":

			out.Values[i] = ec._AspectRatio_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._AspectRatio_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var audienceImplementors = []string{"Audience", "Node", "_Entity"}

func (ec *executionContext) _Audience(ctx context.Context, sel ast.SelectionSet, obj *types.Audience) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, audienceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Audience")
		case "id":

			out.Values[i] = ec._Audience_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._Audience_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slug":

			out.Values[i] = ec._Audience_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "thumbnail":

			out.Values[i] = ec._Audience_thumbnail(ctx, field, obj)

		case "banner":

			out.Values[i] = ec._Audience_banner(ctx, field, obj)

		case "bannerMedia":

			out.Values[i] = ec._Audience_bannerMedia(ctx, field, obj)

		case "title":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Audience_title(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "standard":

			out.Values[i] = ec._Audience_standard(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "titleTranslations":

			out.Values[i] = ec._Audience_titleTranslations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalLikes":

			out.Values[i] = ec._Audience_totalLikes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalPosts":

			out.Values[i] = ec._Audience_totalPosts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "posts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Audience_posts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var audienceConnectionImplementors = []string{"AudienceConnection"}

func (ec *executionContext) _AudienceConnection(ctx context.Context, sel ast.SelectionSet, obj *types.AudienceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, audienceConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AudienceConnection")
		case "edges":

			out.Values[i] = ec._AudienceConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._AudienceConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var audienceCurationProfileImplementors = []string{"AudienceCurationProfile"}

func (ec *executionContext) _AudienceCurationProfile(ctx context.Context, sel ast.SelectionSet, obj *types.AudienceCurationProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, audienceCurationProfileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AudienceCurationProfile")
		case "completed":

			out.Values[i] = ec._AudienceCurationProfile_completed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipped":

			out.Values[i] = ec._AudienceCurationProfile_skipped(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "audiences":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AudienceCurationProfile_audiences(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var audienceEdgeImplementors = []string{"AudienceEdge"}

func (ec *executionContext) _AudienceEdge(ctx context.Context, sel ast.SelectionSet, obj *types.AudienceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, audienceEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AudienceEdge")
		case "cursor":

			out.Values[i] = ec._AudienceEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._AudienceEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoryImplementors = []string{"Category", "Node", "Search", "_Entity"}

func (ec *executionContext) _Category(ctx context.Context, sel ast.SelectionSet, obj *types.Category) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Category")
		case "id":

			out.Values[i] = ec._Category_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._Category_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slug":

			out.Values[i] = ec._Category_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "thumbnail":

			out.Values[i] = ec._Category_thumbnail(ctx, field, obj)

		case "banner":

			out.Values[i] = ec._Category_banner(ctx, field, obj)

		case "bannerMedia":

			out.Values[i] = ec._Category_bannerMedia(ctx, field, obj)

		case "title":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Category_title(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "titleTranslations":

			out.Values[i] = ec._Category_titleTranslations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "alternativeTitles":

			out.Values[i] = ec._Category_alternativeTitles(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalLikes":

			out.Values[i] = ec._Category_totalLikes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalPosts":

			out.Values[i] = ec._Category_totalPosts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "topic":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Category_topic(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "posts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Category_posts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoryConnectionImplementors = []string{"CategoryConnection"}

func (ec *executionContext) _CategoryConnection(ctx context.Context, sel ast.SelectionSet, obj *types.CategoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryConnection")
		case "edges":

			out.Values[i] = ec._CategoryConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._CategoryConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoryCurationProfileImplementors = []string{"CategoryCurationProfile"}

func (ec *executionContext) _CategoryCurationProfile(ctx context.Context, sel ast.SelectionSet, obj *types.CategoryCurationProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryCurationProfileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryCurationProfile")
		case "completed":

			out.Values[i] = ec._CategoryCurationProfile_completed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipped":

			out.Values[i] = ec._CategoryCurationProfile_skipped(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "categories":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CategoryCurationProfile_categories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoryEdgeImplementors = []string{"CategoryEdge"}

func (ec *executionContext) _CategoryEdge(ctx context.Context, sel ast.SelectionSet, obj *types.CategoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryEdge")
		case "cursor":

			out.Values[i] = ec._CategoryEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CategoryEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var characterImplementors = []string{"Character", "Node", "Search", "_Entity"}

func (ec *executionContext) _Character(ctx context.Context, sel ast.SelectionSet, obj *types.Character) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, characterImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Character")
		case "id":

			out.Values[i] = ec._Character_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._Character_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slug":

			out.Values[i] = ec._Character_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "thumbnail":

			out.Values[i] = ec._Character_thumbnail(ctx, field, obj)

		case "banner":

			out.Values[i] = ec._Character_banner(ctx, field, obj)

		case "bannerMedia":

			out.Values[i] = ec._Character_bannerMedia(ctx, field, obj)

		case "name":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Character_name(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "nameTranslations":

			out.Values[i] = ec._Character_nameTranslations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalLikes":

			out.Values[i] = ec._Character_totalLikes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalPosts":

			out.Values[i] = ec._Character_totalPosts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "series":

			out.Values[i] = ec._Character_series(ctx, field, obj)

		case "club":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Character_club(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "posts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Character_posts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var characterConnectionImplementors = []string{"CharacterConnection"}

func (ec *executionContext) _CharacterConnection(ctx context.Context, sel ast.SelectionSet, obj *types.CharacterConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, characterConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterConnection")
		case "edges":

			out.Values[i] = ec._CharacterConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._CharacterConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var characterEdgeImplementors = []string{"CharacterEdge"}

func (ec *executionContext) _CharacterEdge(ctx context.Context, sel ast.SelectionSet, obj *types.CharacterEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, characterEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterEdge")
		case "cursor":

			out.Values[i] = ec._CharacterEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CharacterEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubImplementors = []string{"Club", "Node", "Search", "_Entity"}

func (ec *executionContext) _Club(ctx context.Context, sel ast.SelectionSet, obj *types.Club) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Club")
		case "id":

			out.Values[i] = ec._Club_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._Club_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slug":

			out.Values[i] = ec._Club_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slugAliasesLimit":

			out.Values[i] = ec._Club_slugAliasesLimit(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalPosts":

			out.Values[i] = ec._Club_totalPosts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalLikes":

			out.Values[i] = ec._Club_totalLikes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slugAliases":

			out.Values[i] = ec._Club_slugAliases(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "links":

			out.Values[i] = ec._Club_links(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "thumbnail":

			out.Values[i] = ec._Club_thumbnail(ctx, field, obj)

		case "thumbnailMedia":

			out.Values[i] = ec._Club_thumbnailMedia(ctx, field, obj)

		case "banner":

			out.Values[i] = ec._Club_banner(ctx, field, obj)

		case "bannerMedia":

			out.Values[i] = ec._Club_bannerMedia(ctx, field, obj)

		case "name":

			out.Values[i] = ec._Club_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "owner":

			out.Values[i] = ec._Club_owner(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "termination":

			out.Values[i] = ec._Club_termination(ctx, field, obj)

		case "suspension":

			out.Values[i] = ec._Club_suspension(ctx, field, obj)

		case "suspensionLogs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_suspensionLogs(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "viewerIsOwner":

			out.Values[i] = ec._Club_viewerIsOwner(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "canCreateSupporterOnlyPosts":

			out.Values[i] = ec._Club_canCreateSupporterOnlyPosts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "canSupport":

			out.Values[i] = ec._Club_canSupport(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "nextSupporterPostTime":

			out.Values[i] = ec._Club_nextSupporterPostTime(ctx, field, obj)

		case "viewerMember":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_viewerMember(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "membersIsSupporterCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_membersIsSupporterCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "membersCount":

			out.Values[i] = ec._Club_membersCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "members":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_members(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "charactersEnabled":

			out.Values[i] = ec._Club_charactersEnabled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "charactersLimit":

			out.Values[i] = ec._Club_charactersLimit(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "charactersCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_charactersCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "characters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_characters(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "posts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Club_posts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubConnectionImplementors = []string{"ClubConnection"}

func (ec *executionContext) _ClubConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ClubConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubConnection")
		case "edges":

			out.Values[i] = ec._ClubConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._ClubConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubEdgeImplementors = []string{"ClubEdge"}

func (ec *executionContext) _ClubEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ClubEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubEdge")
		case "cursor":

			out.Values[i] = ec._ClubEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._ClubEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubIssuedSuspensionLogImplementors = []string{"ClubIssuedSuspensionLog", "ClubSuspensionLog"}

func (ec *executionContext) _ClubIssuedSuspensionLog(ctx context.Context, sel ast.SelectionSet, obj *types.ClubIssuedSuspensionLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubIssuedSuspensionLogImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubIssuedSuspensionLog")
		case "id":

			out.Values[i] = ec._ClubIssuedSuspensionLog_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account":

			out.Values[i] = ec._ClubIssuedSuspensionLog_account(ctx, field, obj)

		case "reason":

			out.Values[i] = ec._ClubIssuedSuspensionLog_reason(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suspendedUntil":

			out.Values[i] = ec._ClubIssuedSuspensionLog_suspendedUntil(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubLinkImplementors = []string{"ClubLink"}

func (ec *executionContext) _ClubLink(ctx context.Context, sel ast.SelectionSet, obj *types.ClubLink) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubLinkImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubLink")
		case "url":

			out.Values[i] = ec._ClubLink_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubMemberImplementors = []string{"ClubMember", "Node", "_Entity"}

func (ec *executionContext) _ClubMember(ctx context.Context, sel ast.SelectionSet, obj *types.ClubMember) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubMemberImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubMember")
		case "id":

			out.Values[i] = ec._ClubMember_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "joinedAt":

			out.Values[i] = ec._ClubMember_joinedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "club":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ClubMember_club(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "account":

			out.Values[i] = ec._ClubMember_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isSupporter":

			out.Values[i] = ec._ClubMember_isSupporter(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supporterSince":

			out.Values[i] = ec._ClubMember_supporterSince(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubMemberConnectionImplementors = []string{"ClubMemberConnection"}

func (ec *executionContext) _ClubMemberConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ClubMemberConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubMemberConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubMemberConnection")
		case "edges":

			out.Values[i] = ec._ClubMemberConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._ClubMemberConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubMemberEdgeImplementors = []string{"ClubMemberEdge"}

func (ec *executionContext) _ClubMemberEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ClubMemberEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubMemberEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubMemberEdge")
		case "cursor":

			out.Values[i] = ec._ClubMemberEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._ClubMemberEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubRemovedSuspensionLogImplementors = []string{"ClubRemovedSuspensionLog", "ClubSuspensionLog"}

func (ec *executionContext) _ClubRemovedSuspensionLog(ctx context.Context, sel ast.SelectionSet, obj *types.ClubRemovedSuspensionLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubRemovedSuspensionLogImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubRemovedSuspensionLog")
		case "id":

			out.Values[i] = ec._ClubRemovedSuspensionLog_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account":

			out.Values[i] = ec._ClubRemovedSuspensionLog_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubSlugAliasImplementors = []string{"ClubSlugAlias"}

func (ec *executionContext) _ClubSlugAlias(ctx context.Context, sel ast.SelectionSet, obj *types.ClubSlugAlias) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubSlugAliasImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubSlugAlias")
		case "slug":

			out.Values[i] = ec._ClubSlugAlias_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubSuspensionImplementors = []string{"ClubSuspension"}

func (ec *executionContext) _ClubSuspension(ctx context.Context, sel ast.SelectionSet, obj *types.ClubSuspension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubSuspensionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubSuspension")
		case "expires":

			out.Values[i] = ec._ClubSuspension_expires(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubSuspensionLogConnectionImplementors = []string{"ClubSuspensionLogConnection"}

func (ec *executionContext) _ClubSuspensionLogConnection(ctx context.Context, sel ast.SelectionSet, obj *types.ClubSuspensionLogConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubSuspensionLogConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubSuspensionLogConnection")
		case "edges":

			out.Values[i] = ec._ClubSuspensionLogConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._ClubSuspensionLogConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubSuspensionLogEdgeImplementors = []string{"ClubSuspensionLogEdge"}

func (ec *executionContext) _ClubSuspensionLogEdge(ctx context.Context, sel ast.SelectionSet, obj *types.ClubSuspensionLogEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubSuspensionLogEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubSuspensionLogEdge")
		case "cursor":

			out.Values[i] = ec._ClubSuspensionLogEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._ClubSuspensionLogEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubTerminationImplementors = []string{"ClubTermination"}

func (ec *executionContext) _ClubTermination(ctx context.Context, sel ast.SelectionSet, obj *types.ClubTermination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubTerminationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubTermination")
		case "account":

			out.Values[i] = ec._ClubTermination_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var colorPaletteImplementors = []string{"ColorPalette"}

func (ec *executionContext) _ColorPalette(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ColorPalette) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, colorPaletteImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ColorPalette")
		case "percent":

			out.Values[i] = ec._ColorPalette_percent(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "red":

			out.Values[i] = ec._ColorPalette_red(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "green":

			out.Values[i] = ec._ColorPalette_green(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blue":

			out.Values[i] = ec._ColorPalette_blue(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createAudiencePayloadImplementors = []string{"CreateAudiencePayload"}

func (ec *executionContext) _CreateAudiencePayload(ctx context.Context, sel ast.SelectionSet, obj *types.CreateAudiencePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createAudiencePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateAudiencePayload")
		case "audience":

			out.Values[i] = ec._CreateAudiencePayload_audience(ctx, field, obj)

		case "validation":

			out.Values[i] = ec._CreateAudiencePayload_validation(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createCategoryPayloadImplementors = []string{"CreateCategoryPayload"}

func (ec *executionContext) _CreateCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CreateCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCategoryPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCategoryPayload")
		case "category":

			out.Values[i] = ec._CreateCategoryPayload_category(ctx, field, obj)

		case "validation":

			out.Values[i] = ec._CreateCategoryPayload_validation(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createCharacterPayloadImplementors = []string{"CreateCharacterPayload"}

func (ec *executionContext) _CreateCharacterPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CreateCharacterPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCharacterPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCharacterPayload")
		case "character":

			out.Values[i] = ec._CreateCharacterPayload_character(ctx, field, obj)

		case "validation":

			out.Values[i] = ec._CreateCharacterPayload_validation(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createClubPayloadImplementors = []string{"CreateClubPayload"}

func (ec *executionContext) _CreateClubPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CreateClubPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createClubPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateClubPayload")
		case "club":

			out.Values[i] = ec._CreateClubPayload_club(ctx, field, obj)

		case "validation":

			out.Values[i] = ec._CreateClubPayload_validation(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createGameSessionPayloadImplementors = []string{"CreateGameSessionPayload"}

func (ec *executionContext) _CreateGameSessionPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CreateGameSessionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createGameSessionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateGameSessionPayload")
		case "gameSession":

			out.Values[i] = ec._CreateGameSessionPayload_gameSession(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createPostPayloadImplementors = []string{"CreatePostPayload"}

func (ec *executionContext) _CreatePostPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CreatePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePostPayload")
		case "post":

			out.Values[i] = ec._CreatePostPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createSeriesPayloadImplementors = []string{"CreateSeriesPayload"}

func (ec *executionContext) _CreateSeriesPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CreateSeriesPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createSeriesPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateSeriesPayload")
		case "series":

			out.Values[i] = ec._CreateSeriesPayload_series(ctx, field, obj)

		case "validation":

			out.Values[i] = ec._CreateSeriesPayload_validation(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createTopicPayloadImplementors = []string{"CreateTopicPayload"}

func (ec *executionContext) _CreateTopicPayload(ctx context.Context, sel ast.SelectionSet, obj *types.CreateTopicPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createTopicPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateTopicPayload")
		case "topic":

			out.Values[i] = ec._CreateTopicPayload_topic(ctx, field, obj)

		case "validation":

			out.Values[i] = ec._CreateTopicPayload_validation(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var curationProfileImplementors = []string{"CurationProfile"}

func (ec *executionContext) _CurationProfile(ctx context.Context, sel ast.SelectionSet, obj *types.CurationProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, curationProfileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CurationProfile")
		case "id":

			out.Values[i] = ec._CurationProfile_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completed":

			out.Values[i] = ec._CurationProfile_completed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateOfBirth":

			out.Values[i] = ec._CurationProfile_dateOfBirth(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "audience":

			out.Values[i] = ec._CurationProfile_audience(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":

			out.Values[i] = ec._CurationProfile_category(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dateOfBirthCurationProfileImplementors = []string{"DateOfBirthCurationProfile"}

func (ec *executionContext) _DateOfBirthCurationProfile(ctx context.Context, sel ast.SelectionSet, obj *types.DateOfBirthCurationProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dateOfBirthCurationProfileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DateOfBirthCurationProfile")
		case "skipped":

			out.Values[i] = ec._DateOfBirthCurationProfile_skipped(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completed":

			out.Values[i] = ec._DateOfBirthCurationProfile_completed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateOfBirth":

			out.Values[i] = ec._DateOfBirthCurationProfile_dateOfBirth(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deletePostPayloadImplementors = []string{"DeletePostPayload"}

func (ec *executionContext) _DeletePostPayload(ctx context.Context, sel ast.SelectionSet, obj *types.DeletePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePostPayload")
		case "postId":

			out.Values[i] = ec._DeletePostPayload_postId(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disableClubCharactersPayloadImplementors = []string{"DisableClubCharactersPayload"}

func (ec *executionContext) _DisableClubCharactersPayload(ctx context.Context, sel ast.SelectionSet, obj *types.DisableClubCharactersPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disableClubCharactersPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisableClubCharactersPayload")
		case "club":

			out.Values[i] = ec._DisableClubCharactersPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disableClubSupporterOnlyPostsPayloadImplementors = []string{"DisableClubSupporterOnlyPostsPayload"}

func (ec *executionContext) _DisableClubSupporterOnlyPostsPayload(ctx context.Context, sel ast.SelectionSet, obj *types.DisableClubSupporterOnlyPostsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disableClubSupporterOnlyPostsPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisableClubSupporterOnlyPostsPayload")
		case "club":

			out.Values[i] = ec._DisableClubSupporterOnlyPostsPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enableClubCharactersPayloadImplementors = []string{"EnableClubCharactersPayload"}

func (ec *executionContext) _EnableClubCharactersPayload(ctx context.Context, sel ast.SelectionSet, obj *types.EnableClubCharactersPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enableClubCharactersPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnableClubCharactersPayload")
		case "club":

			out.Values[i] = ec._EnableClubCharactersPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enableClubSupporterOnlyPostsPayloadImplementors = []string{"EnableClubSupporterOnlyPostsPayload"}

func (ec *executionContext) _EnableClubSupporterOnlyPostsPayload(ctx context.Context, sel ast.SelectionSet, obj *types.EnableClubSupporterOnlyPostsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enableClubSupporterOnlyPostsPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnableClubSupporterOnlyPostsPayload")
		case "club":

			out.Values[i] = ec._EnableClubSupporterOnlyPostsPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entityImplementors = []string{"Entity"}

func (ec *executionContext) _Entity(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Entity",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Entity")
		case "findAccountByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findAccountByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findAudienceByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findAudienceByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findCategoryByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findCategoryByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findCharacterByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findCharacterByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findClubByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findClubByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findClubMemberByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findClubMemberByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findPostByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findPostByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findPostLikeByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findPostLikeByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findSeriesByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findSeriesByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findTopicByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findTopicByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gameSessionImplementors = []string{"GameSession"}

func (ec *executionContext) _GameSession(ctx context.Context, sel ast.SelectionSet, obj *types.GameSession) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameSessionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameSession")
		case "id":

			out.Values[i] = ec._GameSession_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reference":

			out.Values[i] = ec._GameSession_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isClosed":

			out.Values[i] = ec._GameSession_isClosed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "viewerIsPlayer":

			out.Values[i] = ec._GameSession_viewerIsPlayer(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gameType":

			out.Values[i] = ec._GameSession_gameType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "seed":

			out.Values[i] = ec._GameSession_seed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hLSVideoContainerImplementors = []string{"HLSVideoContainer", "VideoContainer"}

func (ec *executionContext) _HLSVideoContainer(ctx context.Context, sel ast.SelectionSet, obj *graphql1.HLSVideoContainer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hLSVideoContainerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HLSVideoContainer")
		case "url":

			out.Values[i] = ec._HLSVideoContainer_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetDevice":

			out.Values[i] = ec._HLSVideoContainer_targetDevice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageMediaImplementors = []string{"ImageMedia", "Media"}

func (ec *executionContext) _ImageMedia(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ImageMedia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageMediaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageMedia")
		case "id":

			out.Values[i] = ec._ImageMedia_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "variants":

			out.Values[i] = ec._ImageMedia_variants(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colorPalettes":

			out.Values[i] = ec._ImageMedia_colorPalettes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageMediaAccessImplementors = []string{"ImageMediaAccess"}

func (ec *executionContext) _ImageMediaAccess(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ImageMediaAccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageMediaAccessImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageMediaAccess")
		case "width":

			out.Values[i] = ec._ImageMediaAccess_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._ImageMediaAccess_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":

			out.Values[i] = ec._ImageMediaAccess_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageMediaVariantsImplementors = []string{"ImageMediaVariants"}

func (ec *executionContext) _ImageMediaVariants(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ImageMediaVariants) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageMediaVariantsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageMediaVariants")
		case "mini":

			out.Values[i] = ec._ImageMediaVariants_mini(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":

			out.Values[i] = ec._ImageMediaVariants_icon(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thumbnail":

			out.Values[i] = ec._ImageMediaVariants_thumbnail(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "small":

			out.Values[i] = ec._ImageMediaVariants_small(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "medium":

			out.Values[i] = ec._ImageMediaVariants_medium(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "large":

			out.Values[i] = ec._ImageMediaVariants_large(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hd":

			out.Values[i] = ec._ImageMediaVariants_hd(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "banner":

			out.Values[i] = ec._ImageMediaVariants_banner(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "smallBanner":

			out.Values[i] = ec._ImageMediaVariants_smallBanner(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var joinClubPayloadImplementors = []string{"JoinClubPayload"}

func (ec *executionContext) _JoinClubPayload(ctx context.Context, sel ast.SelectionSet, obj *types.JoinClubPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, joinClubPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JoinClubPayload")
		case "clubMember":

			out.Values[i] = ec._JoinClubPayload_clubMember(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var languageImplementors = []string{"Language"}

func (ec *executionContext) _Language(ctx context.Context, sel ast.SelectionSet, obj *graphql1.Language) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, languageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Language")
		case "locale":

			out.Values[i] = ec._Language_locale(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Language_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var leaveClubPayloadImplementors = []string{"LeaveClubPayload"}

func (ec *executionContext) _LeaveClubPayload(ctx context.Context, sel ast.SelectionSet, obj *types.LeaveClubPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leaveClubPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeaveClubPayload")
		case "clubMemberId":

			out.Values[i] = ec._LeaveClubPayload_clubMemberId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var likePostPayloadImplementors = []string{"LikePostPayload"}

func (ec *executionContext) _LikePostPayload(ctx context.Context, sel ast.SelectionSet, obj *types.LikePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, likePostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LikePostPayload")
		case "postLike":

			out.Values[i] = ec._LikePostPayload_postLike(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mP4VideoContainerImplementors = []string{"MP4VideoContainer", "VideoContainer"}

func (ec *executionContext) _MP4VideoContainer(ctx context.Context, sel ast.SelectionSet, obj *graphql1.MP4VideoContainer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mP4VideoContainerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MP4VideoContainer")
		case "url":

			out.Values[i] = ec._MP4VideoContainer_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bitrate":

			out.Values[i] = ec._MP4VideoContainer_bitrate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "width":

			out.Values[i] = ec._MP4VideoContainer_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._MP4VideoContainer_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mediaProgressImplementors = []string{"MediaProgress", "_Entity"}

func (ec *executionContext) _MediaProgress(ctx context.Context, sel ast.SelectionSet, obj *graphql1.MediaProgress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaProgressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaProgress")
		case "id":

			out.Values[i] = ec._MediaProgress_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createCategory":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCategory(ctx, field)
			})

		case "updateCategoryTitle":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCategoryTitle(ctx, field)
			})

		case "updateCategoryTopic":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCategoryTopic(ctx, field)
			})

		case "addCategoryAlternativeTitle":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addCategoryAlternativeTitle(ctx, field)
			})

		case "removeCategoryAlternativeTitle":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeCategoryAlternativeTitle(ctx, field)
			})

		case "createAudience":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAudience(ctx, field)
			})

		case "updateAudienceTitle":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAudienceTitle(ctx, field)
			})

		case "updateAudienceBanner":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAudienceBanner(ctx, field)
			})

		case "updateAudienceIsStandard":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAudienceIsStandard(ctx, field)
			})

		case "createCharacter":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCharacter(ctx, field)
			})

		case "updateCharacterName":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCharacterName(ctx, field)
			})

		case "joinClub":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_joinClub(ctx, field)
			})

		case "leaveClub":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_leaveClub(ctx, field)
			})

		case "createClub":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createClub(ctx, field)
			})

		case "addClubSlugAlias":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addClubSlugAlias(ctx, field)
			})

		case "removeClubSlugAlias":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeClubSlugAlias(ctx, field)
			})

		case "promoteClubSlugAliasToDefault":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_promoteClubSlugAliasToDefault(ctx, field)
			})

		case "updateClubName":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateClubName(ctx, field)
			})

		case "updateClubThumbnail":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateClubThumbnail(ctx, field)
			})

		case "suspendClub":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_suspendClub(ctx, field)
			})

		case "unSuspendClub":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unSuspendClub(ctx, field)
			})

		case "terminateClub":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_terminateClub(ctx, field)
			})

		case "unTerminateClub":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unTerminateClub(ctx, field)
			})

		case "enableClubSupporterOnlyPosts":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_enableClubSupporterOnlyPosts(ctx, field)
			})

		case "disableClubSupporterOnlyPosts":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_disableClubSupporterOnlyPosts(ctx, field)
			})

		case "disableClubCharacters":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_disableClubCharacters(ctx, field)
			})

		case "enableClubCharacters":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_enableClubCharacters(ctx, field)
			})

		case "updateClubCharactersLimit":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateClubCharactersLimit(ctx, field)
			})

		case "transferClubOwnership":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_transferClubOwnership(ctx, field)
			})

		case "updateCurationProfileAudience":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCurationProfileAudience(ctx, field)
			})

		case "updateCurationProfileCategory":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCurationProfileCategory(ctx, field)
			})

		case "updateCurationProfileDateOfBirth":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCurationProfileDateOfBirth(ctx, field)
			})

		case "createGameSession":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGameSession(ctx, field)
			})

		case "spinRoulette":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_spinRoulette(ctx, field)
			})

		case "likePost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_likePost(ctx, field)
			})

		case "undoLikePost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_undoLikePost(ctx, field)
			})

		case "createPost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPost(ctx, field)
			})

		case "updatePostAudience":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePostAudience(ctx, field)
			})

		case "addPostContent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addPostContent(ctx, field)
			})

		case "removePostContent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removePostContent(ctx, field)
			})

		case "updatePostContentOrder":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePostContentOrder(ctx, field)
			})

		case "updatePostContentIsSupporterOnly":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePostContentIsSupporterOnly(ctx, field)
			})

		case "updatePostCharacters":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePostCharacters(ctx, field)
			})

		case "updatePostCategories":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePostCategories(ctx, field)
			})

		case "updatePostDescription":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePostDescription(ctx, field)
			})

		case "submitPost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_submitPost(ctx, field)
			})

		case "deletePost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePost(ctx, field)
			})

		case "archivePost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_archivePost(ctx, field)
			})

		case "unArchivePost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unArchivePost(ctx, field)
			})

		case "createSeries":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSeries(ctx, field)
			})

		case "updateSeriesTitle":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSeriesTitle(ctx, field)
			})

		case "createTopic":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTopic(ctx, field)
			})

		case "updateTopicTitle":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTopicTitle(ctx, field)
			})

		case "updateTopicDescription":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTopicDescription(ctx, field)
			})

		case "updateTopicWeight":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTopicWeight(ctx, field)
			})

		case "updateTopicBanner":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTopicBanner(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *relay.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":

			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":

			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":

			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)

		case "endCursor":

			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postImplementors = []string{"Post", "Node", "_Entity"}

func (ec *executionContext) _Post(ctx context.Context, sel ast.SelectionSet, obj *types.Post) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Post")
		case "id":

			out.Values[i] = ec._Post_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._Post_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "state":

			out.Values[i] = ec._Post_state(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supporterOnlyStatus":

			out.Values[i] = ec._Post_supporterOnlyStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "contributor":

			out.Values[i] = ec._Post_contributor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "club":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Post_club(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "content":

			out.Values[i] = ec._Post_content(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Post_description(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "descriptionTranslations":

			out.Values[i] = ec._Post_descriptionTranslations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._Post_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "postedAt":

			out.Values[i] = ec._Post_postedAt(ctx, field, obj)

		case "suggestedPosts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Post_suggestedPosts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "audience":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Post_audience(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "categories":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Post_categories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "characters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Post_characters(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "likes":

			out.Values[i] = ec._Post_likes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "viewerLiked":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Post_viewerLiked(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postConnectionImplementors = []string{"PostConnection"}

func (ec *executionContext) _PostConnection(ctx context.Context, sel ast.SelectionSet, obj *types.PostConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostConnection")
		case "edges":

			out.Values[i] = ec._PostConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._PostConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postContentImplementors = []string{"PostContent"}

func (ec *executionContext) _PostContent(ctx context.Context, sel ast.SelectionSet, obj *types.PostContent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postContentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostContent")
		case "id":

			out.Values[i] = ec._PostContent_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resource":

			out.Values[i] = ec._PostContent_resource(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "media":

			out.Values[i] = ec._PostContent_media(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supporterOnlyVideoMediaDuration":

			out.Values[i] = ec._PostContent_supporterOnlyVideoMediaDuration(ctx, field, obj)

		case "supporterOnlyVideoMediaHasAudio":

			out.Values[i] = ec._PostContent_supporterOnlyVideoMediaHasAudio(ctx, field, obj)

		case "supporterOnlyResource":

			out.Values[i] = ec._PostContent_supporterOnlyResource(ctx, field, obj)

		case "isSupporterOnly":

			out.Values[i] = ec._PostContent_isSupporterOnly(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "viewerCanViewSupporterOnlyContent":

			out.Values[i] = ec._PostContent_viewerCanViewSupporterOnlyContent(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postEdgeImplementors = []string{"PostEdge"}

func (ec *executionContext) _PostEdge(ctx context.Context, sel ast.SelectionSet, obj *types.PostEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostEdge")
		case "cursor":

			out.Values[i] = ec._PostEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._PostEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postLikeImplementors = []string{"PostLike", "Node", "_Entity"}

func (ec *executionContext) _PostLike(ctx context.Context, sel ast.SelectionSet, obj *types.PostLike) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postLikeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostLike")
		case "id":

			out.Values[i] = ec._PostLike_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "likedAt":

			out.Values[i] = ec._PostLike_likedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "post":

			out.Values[i] = ec._PostLike_post(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account":

			out.Values[i] = ec._PostLike_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var promoteClubSlugAliasToDefaultPayloadImplementors = []string{"PromoteClubSlugAliasToDefaultPayload"}

func (ec *executionContext) _PromoteClubSlugAliasToDefaultPayload(ctx context.Context, sel ast.SelectionSet, obj *types.PromoteClubSlugAliasToDefaultPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, promoteClubSlugAliasToDefaultPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PromoteClubSlugAliasToDefaultPayload")
		case "club":

			out.Values[i] = ec._PromoteClubSlugAliasToDefaultPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "categories":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_categories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "category":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_category(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "audiences":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_audiences(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "audience":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_audience(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "characters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_characters(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "character":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_character(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "discoverClubs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_discoverClubs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "clubs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_clubs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "club":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_club(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "gameSessionStatus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gameSessionStatus(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "search":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_search(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "postsFeed":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_postsFeed(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "post":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_post(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "posts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_posts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "series":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_series(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "serial":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serial(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "topics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_topics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "topic":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_topic(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "_entities":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__entities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "_service":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rawMediaImplementors = []string{"RawMedia", "Media"}

func (ec *executionContext) _RawMedia(ctx context.Context, sel ast.SelectionSet, obj *graphql1.RawMedia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rawMediaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RawMedia")
		case "id":

			out.Values[i] = ec._RawMedia_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "originalFileName":

			out.Values[i] = ec._RawMedia_originalFileName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "failed":

			out.Values[i] = ec._RawMedia_failed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "progress":

			out.Values[i] = ec._RawMedia_progress(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var removeCategoryAlternativeTitlePayloadImplementors = []string{"RemoveCategoryAlternativeTitlePayload"}

func (ec *executionContext) _RemoveCategoryAlternativeTitlePayload(ctx context.Context, sel ast.SelectionSet, obj *types.RemoveCategoryAlternativeTitlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removeCategoryAlternativeTitlePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoveCategoryAlternativeTitlePayload")
		case "category":

			out.Values[i] = ec._RemoveCategoryAlternativeTitlePayload_category(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var removeClubSlugAliasPayloadImplementors = []string{"RemoveClubSlugAliasPayload"}

func (ec *executionContext) _RemoveClubSlugAliasPayload(ctx context.Context, sel ast.SelectionSet, obj *types.RemoveClubSlugAliasPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removeClubSlugAliasPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoveClubSlugAliasPayload")
		case "club":

			out.Values[i] = ec._RemoveClubSlugAliasPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var removePostContentPayloadImplementors = []string{"RemovePostContentPayload"}

func (ec *executionContext) _RemovePostContentPayload(ctx context.Context, sel ast.SelectionSet, obj *types.RemovePostContentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removePostContentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemovePostContentPayload")
		case "post":

			out.Values[i] = ec._RemovePostContentPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceImplementors = []string{"Resource"}

func (ec *executionContext) _Resource(ctx context.Context, sel ast.SelectionSet, obj *graphql1.Resource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Resource")
		case "id":

			out.Values[i] = ec._Resource_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Resource_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processed":

			out.Values[i] = ec._Resource_processed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "urls":

			out.Values[i] = ec._Resource_urls(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "width":

			out.Values[i] = ec._Resource_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._Resource_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoDuration":

			out.Values[i] = ec._Resource_videoDuration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoThumbnail":

			out.Values[i] = ec._Resource_videoThumbnail(ctx, field, obj)

		case "videoNoAudio":

			out.Values[i] = ec._Resource_videoNoAudio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preview":

			out.Values[i] = ec._Resource_preview(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "progress":

			out.Values[i] = ec._Resource_progress(ctx, field, obj)

		case "failed":

			out.Values[i] = ec._Resource_failed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceProgressImplementors = []string{"ResourceProgress", "_Entity"}

func (ec *executionContext) _ResourceProgress(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ResourceProgress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceProgressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceProgress")
		case "id":

			out.Values[i] = ec._ResourceProgress_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceUrlImplementors = []string{"ResourceUrl"}

func (ec *executionContext) _ResourceUrl(ctx context.Context, sel ast.SelectionSet, obj *graphql1.ResourceURL) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceUrlImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceUrl")
		case "url":

			out.Values[i] = ec._ResourceUrl_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mimeType":

			out.Values[i] = ec._ResourceUrl_mimeType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rouletteGameStateImplementors = []string{"RouletteGameState"}

func (ec *executionContext) _RouletteGameState(ctx context.Context, sel ast.SelectionSet, obj *types.RouletteGameState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rouletteGameStateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RouletteGameState")
		case "id":

			out.Values[i] = ec._RouletteGameState_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "diceOne":

			out.Values[i] = ec._RouletteGameState_diceOne(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "diceTwo":

			out.Values[i] = ec._RouletteGameState_diceTwo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "diceThree":

			out.Values[i] = ec._RouletteGameState_diceThree(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "post":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RouletteGameState_post(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rouletteStatusImplementors = []string{"RouletteStatus", "GameSessionStatus"}

func (ec *executionContext) _RouletteStatus(ctx context.Context, sel ast.SelectionSet, obj *types.RouletteStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rouletteStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RouletteStatus")
		case "gameSession":

			out.Values[i] = ec._RouletteStatus_gameSession(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gameState":

			out.Values[i] = ec._RouletteStatus_gameState(ctx, field, obj)

		case "totalRolls":

			out.Values[i] = ec._RouletteStatus_totalRolls(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalDoubles":

			out.Values[i] = ec._RouletteStatus_totalDoubles(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":

			out.Values[i] = ec._RouletteStatus_score(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var searchConnectionImplementors = []string{"SearchConnection"}

func (ec *executionContext) _SearchConnection(ctx context.Context, sel ast.SelectionSet, obj *types.SearchConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchConnection")
		case "edges":

			out.Values[i] = ec._SearchConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._SearchConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var searchEdgeImplementors = []string{"SearchEdge"}

func (ec *executionContext) _SearchEdge(ctx context.Context, sel ast.SelectionSet, obj *types.SearchEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchEdge")
		case "cursor":

			out.Values[i] = ec._SearchEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._SearchEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriesImplementors = []string{"Series", "Search", "Node", "_Entity"}

func (ec *executionContext) _Series(ctx context.Context, sel ast.SelectionSet, obj *types.Series) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Series")
		case "id":

			out.Values[i] = ec._Series_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._Series_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slug":

			out.Values[i] = ec._Series_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "thumbnail":

			out.Values[i] = ec._Series_thumbnail(ctx, field, obj)

		case "banner":

			out.Values[i] = ec._Series_banner(ctx, field, obj)

		case "bannerMedia":

			out.Values[i] = ec._Series_bannerMedia(ctx, field, obj)

		case "title":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Series_title(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "titleTranslations":

			out.Values[i] = ec._Series_titleTranslations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalLikes":

			out.Values[i] = ec._Series_totalLikes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalPosts":

			out.Values[i] = ec._Series_totalPosts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "characters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Series_characters(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "posts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Series_posts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriesConnectionImplementors = []string{"SeriesConnection"}

func (ec *executionContext) _SeriesConnection(ctx context.Context, sel ast.SelectionSet, obj *types.SeriesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriesConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriesConnection")
		case "edges":

			out.Values[i] = ec._SeriesConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._SeriesConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriesEdgeImplementors = []string{"SeriesEdge"}

func (ec *executionContext) _SeriesEdge(ctx context.Context, sel ast.SelectionSet, obj *types.SeriesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriesEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriesEdge")
		case "cursor":

			out.Values[i] = ec._SeriesEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._SeriesEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spinRoulettePayloadImplementors = []string{"SpinRoulettePayload"}

func (ec *executionContext) _SpinRoulettePayload(ctx context.Context, sel ast.SelectionSet, obj *types.SpinRoulettePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spinRoulettePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpinRoulettePayload")
		case "rouletteGameState":

			out.Values[i] = ec._SpinRoulettePayload_rouletteGameState(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var submitPostPayloadImplementors = []string{"SubmitPostPayload"}

func (ec *executionContext) _SubmitPostPayload(ctx context.Context, sel ast.SelectionSet, obj *types.SubmitPostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, submitPostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubmitPostPayload")
		case "post":

			out.Values[i] = ec._SubmitPostPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var suspendClubPayloadImplementors = []string{"SuspendClubPayload"}

func (ec *executionContext) _SuspendClubPayload(ctx context.Context, sel ast.SelectionSet, obj *types.SuspendClubPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, suspendClubPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SuspendClubPayload")
		case "club":

			out.Values[i] = ec._SuspendClubPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var terminateClubPayloadImplementors = []string{"TerminateClubPayload"}

func (ec *executionContext) _TerminateClubPayload(ctx context.Context, sel ast.SelectionSet, obj *types.TerminateClubPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, terminateClubPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TerminateClubPayload")
		case "club":

			out.Values[i] = ec._TerminateClubPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicImplementors = []string{"Topic", "Node", "_Entity"}

func (ec *executionContext) _Topic(ctx context.Context, sel ast.SelectionSet, obj *types.Topic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Topic")
		case "id":

			out.Values[i] = ec._Topic_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference":

			out.Values[i] = ec._Topic_reference(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slug":

			out.Values[i] = ec._Topic_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "banner":

			out.Values[i] = ec._Topic_banner(ctx, field, obj)

		case "bannerMedia":

			out.Values[i] = ec._Topic_bannerMedia(ctx, field, obj)

		case "title":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_title(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "titleTranslations":

			out.Values[i] = ec._Topic_titleTranslations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_description(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "descriptionTranslations":

			out.Values[i] = ec._Topic_descriptionTranslations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "weight":

			out.Values[i] = ec._Topic_weight(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "categories":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_categories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicConnectionImplementors = []string{"TopicConnection"}

func (ec *executionContext) _TopicConnection(ctx context.Context, sel ast.SelectionSet, obj *types.TopicConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicConnection")
		case "edges":

			out.Values[i] = ec._TopicConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._TopicConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicEdgeImplementors = []string{"TopicEdge"}

func (ec *executionContext) _TopicEdge(ctx context.Context, sel ast.SelectionSet, obj *types.TopicEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicEdge")
		case "cursor":

			out.Values[i] = ec._TopicEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._TopicEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var transferClubOwnershipPayloadImplementors = []string{"TransferClubOwnershipPayload"}

func (ec *executionContext) _TransferClubOwnershipPayload(ctx context.Context, sel ast.SelectionSet, obj *types.TransferClubOwnershipPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferClubOwnershipPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferClubOwnershipPayload")
		case "club":

			out.Values[i] = ec._TransferClubOwnershipPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var translationImplementors = []string{"Translation"}

func (ec *executionContext) _Translation(ctx context.Context, sel ast.SelectionSet, obj *graphql1.Translation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, translationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Translation")
		case "language":

			out.Values[i] = ec._Translation_language(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":

			out.Values[i] = ec._Translation_text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var unArchivePostPayloadImplementors = []string{"UnArchivePostPayload"}

func (ec *executionContext) _UnArchivePostPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UnArchivePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, unArchivePostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UnArchivePostPayload")
		case "post":

			out.Values[i] = ec._UnArchivePostPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var unSuspendClubPayloadImplementors = []string{"UnSuspendClubPayload"}

func (ec *executionContext) _UnSuspendClubPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UnSuspendClubPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, unSuspendClubPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UnSuspendClubPayload")
		case "club":

			out.Values[i] = ec._UnSuspendClubPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var unTerminateClubPayloadImplementors = []string{"UnTerminateClubPayload"}

func (ec *executionContext) _UnTerminateClubPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UnTerminateClubPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, unTerminateClubPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UnTerminateClubPayload")
		case "club":

			out.Values[i] = ec._UnTerminateClubPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var undoLikePostPayloadImplementors = []string{"UndoLikePostPayload"}

func (ec *executionContext) _UndoLikePostPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UndoLikePostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, undoLikePostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UndoLikePostPayload")
		case "postLikeId":

			out.Values[i] = ec._UndoLikePostPayload_postLikeId(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateAudienceBannerPayloadImplementors = []string{"UpdateAudienceBannerPayload"}

func (ec *executionContext) _UpdateAudienceBannerPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateAudienceBannerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateAudienceBannerPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateAudienceBannerPayload")
		case "audience":

			out.Values[i] = ec._UpdateAudienceBannerPayload_audience(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateAudienceIsStandardPayloadImplementors = []string{"UpdateAudienceIsStandardPayload"}

func (ec *executionContext) _UpdateAudienceIsStandardPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateAudienceIsStandardPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateAudienceIsStandardPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateAudienceIsStandardPayload")
		case "audience":

			out.Values[i] = ec._UpdateAudienceIsStandardPayload_audience(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateAudienceTitlePayloadImplementors = []string{"UpdateAudienceTitlePayload"}

func (ec *executionContext) _UpdateAudienceTitlePayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateAudienceTitlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateAudienceTitlePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateAudienceTitlePayload")
		case "audience":

			out.Values[i] = ec._UpdateAudienceTitlePayload_audience(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCategoryTitlePayloadImplementors = []string{"UpdateCategoryTitlePayload"}

func (ec *executionContext) _UpdateCategoryTitlePayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateCategoryTitlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCategoryTitlePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCategoryTitlePayload")
		case "category":

			out.Values[i] = ec._UpdateCategoryTitlePayload_category(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCategoryTopicPayloadImplementors = []string{"UpdateCategoryTopicPayload"}

func (ec *executionContext) _UpdateCategoryTopicPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateCategoryTopicPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCategoryTopicPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCategoryTopicPayload")
		case "category":

			out.Values[i] = ec._UpdateCategoryTopicPayload_category(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCharacterNamePayloadImplementors = []string{"UpdateCharacterNamePayload"}

func (ec *executionContext) _UpdateCharacterNamePayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateCharacterNamePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCharacterNamePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCharacterNamePayload")
		case "character":

			out.Values[i] = ec._UpdateCharacterNamePayload_character(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateClubCharactersLimitPayloadImplementors = []string{"UpdateClubCharactersLimitPayload"}

func (ec *executionContext) _UpdateClubCharactersLimitPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateClubCharactersLimitPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateClubCharactersLimitPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateClubCharactersLimitPayload")
		case "club":

			out.Values[i] = ec._UpdateClubCharactersLimitPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateClubNamePayloadImplementors = []string{"UpdateClubNamePayload"}

func (ec *executionContext) _UpdateClubNamePayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateClubNamePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateClubNamePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateClubNamePayload")
		case "club":

			out.Values[i] = ec._UpdateClubNamePayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateClubThumbnailPayloadImplementors = []string{"UpdateClubThumbnailPayload"}

func (ec *executionContext) _UpdateClubThumbnailPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateClubThumbnailPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateClubThumbnailPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateClubThumbnailPayload")
		case "club":

			out.Values[i] = ec._UpdateClubThumbnailPayload_club(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCurationProfileAudiencePayloadImplementors = []string{"UpdateCurationProfileAudiencePayload"}

func (ec *executionContext) _UpdateCurationProfileAudiencePayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateCurationProfileAudiencePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCurationProfileAudiencePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCurationProfileAudiencePayload")
		case "curationProfile":

			out.Values[i] = ec._UpdateCurationProfileAudiencePayload_curationProfile(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCurationProfileCategoryPayloadImplementors = []string{"UpdateCurationProfileCategoryPayload"}

func (ec *executionContext) _UpdateCurationProfileCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateCurationProfileCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCurationProfileCategoryPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCurationProfileCategoryPayload")
		case "curationProfile":

			out.Values[i] = ec._UpdateCurationProfileCategoryPayload_curationProfile(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCurationProfileDateOfBirthPayloadImplementors = []string{"UpdateCurationProfileDateOfBirthPayload"}

func (ec *executionContext) _UpdateCurationProfileDateOfBirthPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateCurationProfileDateOfBirthPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCurationProfileDateOfBirthPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCurationProfileDateOfBirthPayload")
		case "curationProfile":

			out.Values[i] = ec._UpdateCurationProfileDateOfBirthPayload_curationProfile(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePostAudiencePayloadImplementors = []string{"UpdatePostAudiencePayload"}

func (ec *executionContext) _UpdatePostAudiencePayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdatePostAudiencePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePostAudiencePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePostAudiencePayload")
		case "post":

			out.Values[i] = ec._UpdatePostAudiencePayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePostCategoriesPayloadImplementors = []string{"UpdatePostCategoriesPayload"}

func (ec *executionContext) _UpdatePostCategoriesPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdatePostCategoriesPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePostCategoriesPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePostCategoriesPayload")
		case "post":

			out.Values[i] = ec._UpdatePostCategoriesPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePostCharactersPayloadImplementors = []string{"UpdatePostCharactersPayload"}

func (ec *executionContext) _UpdatePostCharactersPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdatePostCharactersPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePostCharactersPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePostCharactersPayload")
		case "post":

			out.Values[i] = ec._UpdatePostCharactersPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePostClubPayloadImplementors = []string{"UpdatePostClubPayload"}

func (ec *executionContext) _UpdatePostClubPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdatePostClubPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePostClubPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePostClubPayload")
		case "post":

			out.Values[i] = ec._UpdatePostClubPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePostContentIsSupporterOnlyPayloadImplementors = []string{"UpdatePostContentIsSupporterOnlyPayload"}

func (ec *executionContext) _UpdatePostContentIsSupporterOnlyPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdatePostContentIsSupporterOnlyPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePostContentIsSupporterOnlyPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePostContentIsSupporterOnlyPayload")
		case "post":

			out.Values[i] = ec._UpdatePostContentIsSupporterOnlyPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePostContentOrderPayloadImplementors = []string{"UpdatePostContentOrderPayload"}

func (ec *executionContext) _UpdatePostContentOrderPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdatePostContentOrderPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePostContentOrderPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePostContentOrderPayload")
		case "post":

			out.Values[i] = ec._UpdatePostContentOrderPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatePostDescriptionPayloadImplementors = []string{"UpdatePostDescriptionPayload"}

func (ec *executionContext) _UpdatePostDescriptionPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdatePostDescriptionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePostDescriptionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePostDescriptionPayload")
		case "post":

			out.Values[i] = ec._UpdatePostDescriptionPayload_post(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateSeriesTitlePayloadImplementors = []string{"UpdateSeriesTitlePayload"}

func (ec *executionContext) _UpdateSeriesTitlePayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateSeriesTitlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateSeriesTitlePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateSeriesTitlePayload")
		case "series":

			out.Values[i] = ec._UpdateSeriesTitlePayload_series(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateTopicBannerPayloadImplementors = []string{"UpdateTopicBannerPayload"}

func (ec *executionContext) _UpdateTopicBannerPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateTopicBannerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateTopicBannerPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateTopicBannerPayload")
		case "topic":

			out.Values[i] = ec._UpdateTopicBannerPayload_topic(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateTopicDescriptionPayloadImplementors = []string{"UpdateTopicDescriptionPayload"}

func (ec *executionContext) _UpdateTopicDescriptionPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateTopicDescriptionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateTopicDescriptionPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateTopicDescriptionPayload")
		case "topic":

			out.Values[i] = ec._UpdateTopicDescriptionPayload_topic(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateTopicTitlePayloadImplementors = []string{"UpdateTopicTitlePayload"}

func (ec *executionContext) _UpdateTopicTitlePayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateTopicTitlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateTopicTitlePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateTopicTitlePayload")
		case "topic":

			out.Values[i] = ec._UpdateTopicTitlePayload_topic(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateTopicWeightPayloadImplementors = []string{"UpdateTopicWeightPayload"}

func (ec *executionContext) _UpdateTopicWeightPayload(ctx context.Context, sel ast.SelectionSet, obj *types.UpdateTopicWeightPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateTopicWeightPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateTopicWeightPayload")
		case "topic":

			out.Values[i] = ec._UpdateTopicWeightPayload_topic(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoMediaImplementors = []string{"VideoMedia", "Media"}

func (ec *executionContext) _VideoMedia(ctx context.Context, sel ast.SelectionSet, obj *graphql1.VideoMedia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoMediaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoMedia")
		case "id":

			out.Values[i] = ec._VideoMedia_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cover":

			out.Values[i] = ec._VideoMedia_cover(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "aspectRatio":

			out.Values[i] = ec._VideoMedia_aspectRatio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "containers":

			out.Values[i] = ec._VideoMedia_containers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "duration":

			out.Values[i] = ec._VideoMedia_duration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasAudio":

			out.Values[i] = ec._VideoMedia_hasAudio(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":

			out.Values[i] = ec.__Service_sdl(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccount2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx context.Context, sel ast.SelectionSet, v types.Account) graphql.Marshaler {
	return ec._Account(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx context.Context, sel ast.SelectionSet, v *types.Account) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAddCategoryAlternativeTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddCategoryAlternativeTitleInput(ctx context.Context, v interface{}) (types.AddCategoryAlternativeTitleInput, error) {
	res, err := ec.unmarshalInputAddCategoryAlternativeTitleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddClubSlugAliasInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddClubSlugAliasInput(ctx context.Context, v interface{}) (types.AddClubSlugAliasInput, error) {
	res, err := ec.unmarshalInputAddClubSlugAliasInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddPostContentInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddPostContentInput(ctx context.Context, v interface{}) (types.AddPostContentInput, error) {
	res, err := ec.unmarshalInputAddPostContentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNArchivePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐArchivePostInput(ctx context.Context, v interface{}) (types.ArchivePostInput, error) {
	res, err := ec.unmarshalInputArchivePostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAspectRatio2ᚖoverdollᚋlibrariesᚋgraphqlᚐAspectRatio(ctx context.Context, sel ast.SelectionSet, v *graphql1.AspectRatio) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AspectRatio(ctx, sel, v)
}

func (ec *executionContext) marshalNAudience2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx context.Context, sel ast.SelectionSet, v types.Audience) graphql.Marshaler {
	return ec._Audience(ctx, sel, &v)
}

func (ec *executionContext) marshalNAudience2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Audience) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx context.Context, sel ast.SelectionSet, v *types.Audience) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Audience(ctx, sel, v)
}

func (ec *executionContext) marshalNAudienceConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceConnection(ctx context.Context, sel ast.SelectionSet, v types.AudienceConnection) graphql.Marshaler {
	return ec._AudienceConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAudienceConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceConnection(ctx context.Context, sel ast.SelectionSet, v *types.AudienceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AudienceConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNAudienceCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceCurationProfile(ctx context.Context, sel ast.SelectionSet, v *types.AudienceCurationProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AudienceCurationProfile(ctx, sel, v)
}

func (ec *executionContext) marshalNAudienceEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.AudienceEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAudienceEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAudienceEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudienceEdge(ctx context.Context, sel ast.SelectionSet, v *types.AudienceEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AudienceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAudiencesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudiencesSort(ctx context.Context, v interface{}) (types.AudiencesSort, error) {
	var res types.AudiencesSort
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAudiencesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudiencesSort(ctx context.Context, sel ast.SelectionSet, v types.AudiencesSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBCP472string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBCP472string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCategoriesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoriesSort(ctx context.Context, v interface{}) (types.CategoriesSort, error) {
	var res types.CategoriesSort
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCategoriesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoriesSort(ctx context.Context, sel ast.SelectionSet, v types.CategoriesSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCategory2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx context.Context, sel ast.SelectionSet, v types.Category) graphql.Marshaler {
	return ec._Category(ctx, sel, &v)
}

func (ec *executionContext) marshalNCategory2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Category) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx context.Context, sel ast.SelectionSet, v *types.Category) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Category(ctx, sel, v)
}

func (ec *executionContext) marshalNCategoryConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryConnection(ctx context.Context, sel ast.SelectionSet, v types.CategoryConnection) graphql.Marshaler {
	return ec._CategoryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCategoryConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryConnection(ctx context.Context, sel ast.SelectionSet, v *types.CategoryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CategoryConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCategoryCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryCurationProfile(ctx context.Context, sel ast.SelectionSet, v *types.CategoryCurationProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CategoryCurationProfile(ctx, sel, v)
}

func (ec *executionContext) marshalNCategoryEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.CategoryEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCategoryEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCategoryEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategoryEdge(ctx context.Context, sel ast.SelectionSet, v *types.CategoryEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CategoryEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNCharacter2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacter(ctx context.Context, sel ast.SelectionSet, v types.Character) graphql.Marshaler {
	return ec._Character(ctx, sel, &v)
}

func (ec *executionContext) marshalNCharacter2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.Character) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCharacter2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCharacter2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacter(ctx context.Context, sel ast.SelectionSet, v *types.Character) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Character(ctx, sel, v)
}

func (ec *executionContext) marshalNCharacterConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterConnection(ctx context.Context, sel ast.SelectionSet, v types.CharacterConnection) graphql.Marshaler {
	return ec._CharacterConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCharacterConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterConnection(ctx context.Context, sel ast.SelectionSet, v *types.CharacterConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CharacterConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCharacterEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.CharacterEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCharacterEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCharacterEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacterEdge(ctx context.Context, sel ast.SelectionSet, v *types.CharacterEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CharacterEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCharactersSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharactersSort(ctx context.Context, v interface{}) (types.CharactersSort, error) {
	var res types.CharactersSort
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCharactersSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharactersSort(ctx context.Context, sel ast.SelectionSet, v types.CharactersSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNClub2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx context.Context, sel ast.SelectionSet, v types.Club) graphql.Marshaler {
	return ec._Club(ctx, sel, &v)
}

func (ec *executionContext) marshalNClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx context.Context, sel ast.SelectionSet, v *types.Club) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Club(ctx, sel, v)
}

func (ec *executionContext) marshalNClubConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubConnection(ctx context.Context, sel ast.SelectionSet, v types.ClubConnection) graphql.Marshaler {
	return ec._ClubConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNClubConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubConnection(ctx context.Context, sel ast.SelectionSet, v *types.ClubConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNClubEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ClubEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClubEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClubEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubEdge(ctx context.Context, sel ast.SelectionSet, v *types.ClubEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNClubLink2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubLinkᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ClubLink) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClubLink2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClubLink2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubLink(ctx context.Context, sel ast.SelectionSet, v *types.ClubLink) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubLink(ctx, sel, v)
}

func (ec *executionContext) marshalNClubMember2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx context.Context, sel ast.SelectionSet, v types.ClubMember) graphql.Marshaler {
	return ec._ClubMember(ctx, sel, &v)
}

func (ec *executionContext) marshalNClubMember2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx context.Context, sel ast.SelectionSet, v *types.ClubMember) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubMember(ctx, sel, v)
}

func (ec *executionContext) marshalNClubMemberConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMemberConnection(ctx context.Context, sel ast.SelectionSet, v types.ClubMemberConnection) graphql.Marshaler {
	return ec._ClubMemberConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNClubMemberConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMemberConnection(ctx context.Context, sel ast.SelectionSet, v *types.ClubMemberConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubMemberConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNClubMemberEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMemberEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ClubMemberEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClubMemberEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMemberEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClubMemberEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMemberEdge(ctx context.Context, sel ast.SelectionSet, v *types.ClubMemberEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubMemberEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNClubMembersSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMembersSort(ctx context.Context, v interface{}) (types.ClubMembersSort, error) {
	var res types.ClubMembersSort
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClubMembersSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMembersSort(ctx context.Context, sel ast.SelectionSet, v types.ClubMembersSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNClubSlugAlias2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSlugAliasᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ClubSlugAlias) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClubSlugAlias2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSlugAlias(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClubSlugAlias2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSlugAlias(ctx context.Context, sel ast.SelectionSet, v *types.ClubSlugAlias) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubSlugAlias(ctx, sel, v)
}

func (ec *executionContext) marshalNClubSuspensionLog2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionLog(ctx context.Context, sel ast.SelectionSet, v types.ClubSuspensionLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubSuspensionLog(ctx, sel, v)
}

func (ec *executionContext) marshalNClubSuspensionLogConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionLogConnection(ctx context.Context, sel ast.SelectionSet, v types.ClubSuspensionLogConnection) graphql.Marshaler {
	return ec._ClubSuspensionLogConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNClubSuspensionLogConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionLogConnection(ctx context.Context, sel ast.SelectionSet, v *types.ClubSuspensionLogConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubSuspensionLogConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNClubSuspensionLogEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionLogEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.ClubSuspensionLogEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClubSuspensionLogEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionLogEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClubSuspensionLogEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionLogEdge(ctx context.Context, sel ast.SelectionSet, v *types.ClubSuspensionLogEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubSuspensionLogEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNClubSuspensionReason2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionReason(ctx context.Context, v interface{}) (types.ClubSuspensionReason, error) {
	var res types.ClubSuspensionReason
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClubSuspensionReason2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspensionReason(ctx context.Context, sel ast.SelectionSet, v types.ClubSuspensionReason) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNClubsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubsSort(ctx context.Context, v interface{}) (types.ClubsSort, error) {
	var res types.ClubsSort
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClubsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubsSort(ctx context.Context, sel ast.SelectionSet, v types.ClubsSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNColorPalette2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐColorPaletteᚄ(ctx context.Context, sel ast.SelectionSet, v []*graphql1.ColorPalette) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNColorPalette2ᚖoverdollᚋlibrariesᚋgraphqlᚐColorPalette(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNColorPalette2ᚖoverdollᚋlibrariesᚋgraphqlᚐColorPalette(ctx context.Context, sel ast.SelectionSet, v *graphql1.ColorPalette) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ColorPalette(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateAudienceInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateAudienceInput(ctx context.Context, v interface{}) (types.CreateAudienceInput, error) {
	res, err := ec.unmarshalInputCreateAudienceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCategoryInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCategoryInput(ctx context.Context, v interface{}) (types.CreateCategoryInput, error) {
	res, err := ec.unmarshalInputCreateCategoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCharacterInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCharacterInput(ctx context.Context, v interface{}) (types.CreateCharacterInput, error) {
	res, err := ec.unmarshalInputCreateCharacterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateClubInput(ctx context.Context, v interface{}) (types.CreateClubInput, error) {
	res, err := ec.unmarshalInputCreateClubInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateGameSessionInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateGameSessionInput(ctx context.Context, v interface{}) (types.CreateGameSessionInput, error) {
	res, err := ec.unmarshalInputCreateGameSessionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreatePostInput(ctx context.Context, v interface{}) (types.CreatePostInput, error) {
	res, err := ec.unmarshalInputCreatePostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSeriesInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateSeriesInput(ctx context.Context, v interface{}) (types.CreateSeriesInput, error) {
	res, err := ec.unmarshalInputCreateSeriesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTopicInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateTopicInput(ctx context.Context, v interface{}) (types.CreateTopicInput, error) {
	res, err := ec.unmarshalInputCreateTopicInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCurationProfile2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCurationProfile(ctx context.Context, sel ast.SelectionSet, v types.CurationProfile) graphql.Marshaler {
	return ec._CurationProfile(ctx, sel, &v)
}

func (ec *executionContext) marshalNCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCurationProfile(ctx context.Context, sel ast.SelectionSet, v *types.CurationProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CurationProfile(ctx, sel, v)
}

func (ec *executionContext) marshalNDateOfBirthCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDateOfBirthCurationProfile(ctx context.Context, sel ast.SelectionSet, v *types.DateOfBirthCurationProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DateOfBirthCurationProfile(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeletePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDeletePostInput(ctx context.Context, v interface{}) (types.DeletePostInput, error) {
	res, err := ec.unmarshalInputDeletePostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDisableClubCharactersInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDisableClubCharactersInput(ctx context.Context, v interface{}) (types.DisableClubCharactersInput, error) {
	res, err := ec.unmarshalInputDisableClubCharactersInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDisableClubSupporterOnlyPostsInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDisableClubSupporterOnlyPostsInput(ctx context.Context, v interface{}) (types.DisableClubSupporterOnlyPostsInput, error) {
	res, err := ec.unmarshalInputDisableClubSupporterOnlyPostsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnableClubCharactersInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐEnableClubCharactersInput(ctx context.Context, v interface{}) (types.EnableClubCharactersInput, error) {
	res, err := ec.unmarshalInputEnableClubCharactersInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnableClubSupporterOnlyPostsInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐEnableClubSupporterOnlyPostsInput(ctx context.Context, v interface{}) (types.EnableClubSupporterOnlyPostsInput, error) {
	res, err := ec.unmarshalInputEnableClubSupporterOnlyPostsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNGameSession2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameSession(ctx context.Context, sel ast.SelectionSet, v *types.GameSession) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameSession(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGameType2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameType(ctx context.Context, v interface{}) (types.GameType, error) {
	var res types.GameType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGameType2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameType(ctx context.Context, sel ast.SelectionSet, v types.GameType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx context.Context, v interface{}) (relay.ID, error) {
	var res relay.ID
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx context.Context, sel ast.SelectionSet, v relay.ID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2ᚕoverdollᚋlibrariesᚋgraphqlᚋrelayᚐIDᚄ(ctx context.Context, v interface{}) ([]relay.ID, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]relay.ID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕoverdollᚋlibrariesᚋgraphqlᚋrelayᚐIDᚄ(ctx context.Context, sel ast.SelectionSet, v []relay.ID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2overdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNImageMedia2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMedia(ctx context.Context, sel ast.SelectionSet, v *graphql1.ImageMedia) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ImageMedia(ctx, sel, v)
}

func (ec *executionContext) marshalNImageMediaAccess2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaAccess(ctx context.Context, sel ast.SelectionSet, v *graphql1.ImageMediaAccess) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ImageMediaAccess(ctx, sel, v)
}

func (ec *executionContext) marshalNImageMediaVariants2ᚖoverdollᚋlibrariesᚋgraphqlᚐImageMediaVariants(ctx context.Context, sel ast.SelectionSet, v *graphql1.ImageMediaVariants) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ImageMediaVariants(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJoinClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐJoinClubInput(ctx context.Context, v interface{}) (types.JoinClubInput, error) {
	res, err := ec.unmarshalInputJoinClubInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLanguage2ᚖoverdollᚋlibrariesᚋgraphqlᚐLanguage(ctx context.Context, sel ast.SelectionSet, v *graphql1.Language) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Language(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLeaveClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐLeaveClubInput(ctx context.Context, v interface{}) (types.LeaveClubInput, error) {
	res, err := ec.unmarshalInputLeaveClubInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLikePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐLikePostInput(ctx context.Context, v interface{}) (types.LikePostInput, error) {
	res, err := ec.unmarshalInputLikePostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx context.Context, sel ast.SelectionSet, v graphql1.Media) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Media(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMediaDeviceType2overdollᚋlibrariesᚋgraphqlᚐMediaDeviceType(ctx context.Context, v interface{}) (graphql1.MediaDeviceType, error) {
	var res graphql1.MediaDeviceType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMediaDeviceType2overdollᚋlibrariesᚋgraphqlᚐMediaDeviceType(ctx context.Context, sel ast.SelectionSet, v graphql1.MediaDeviceType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *relay.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPost2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx context.Context, sel ast.SelectionSet, v types.Post) graphql.Marshaler {
	return ec._Post(ctx, sel, &v)
}

func (ec *executionContext) marshalNPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx context.Context, sel ast.SelectionSet, v *types.Post) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Post(ctx, sel, v)
}

func (ec *executionContext) marshalNPostConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx context.Context, sel ast.SelectionSet, v types.PostConnection) graphql.Marshaler {
	return ec._PostConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostConnection(ctx context.Context, sel ast.SelectionSet, v *types.PostConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PostConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPostContent2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostContentᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.PostContent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPostContent2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostContent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPostContent2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostContent(ctx context.Context, sel ast.SelectionSet, v *types.PostContent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PostContent(ctx, sel, v)
}

func (ec *executionContext) marshalNPostEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.PostEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPostEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPostEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostEdge(ctx context.Context, sel ast.SelectionSet, v *types.PostEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PostEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNPostLike2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostLike(ctx context.Context, sel ast.SelectionSet, v types.PostLike) graphql.Marshaler {
	return ec._PostLike(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostLike2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostLike(ctx context.Context, sel ast.SelectionSet, v *types.PostLike) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PostLike(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPostState2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx context.Context, v interface{}) (types.PostState, error) {
	var res types.PostState
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPostState2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx context.Context, sel ast.SelectionSet, v types.PostState) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPostsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostsSort(ctx context.Context, v interface{}) (types.PostsSort, error) {
	var res types.PostsSort
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPostsSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostsSort(ctx context.Context, sel ast.SelectionSet, v types.PostsSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPromoteClubSlugAliasToDefaultInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPromoteClubSlugAliasToDefaultInput(ctx context.Context, v interface{}) (types.PromoteClubSlugAliasToDefaultInput, error) {
	res, err := ec.unmarshalInputPromoteClubSlugAliasToDefaultInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRemoveCategoryAlternativeTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemoveCategoryAlternativeTitleInput(ctx context.Context, v interface{}) (types.RemoveCategoryAlternativeTitleInput, error) {
	res, err := ec.unmarshalInputRemoveCategoryAlternativeTitleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRemoveClubSlugAliasInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemoveClubSlugAliasInput(ctx context.Context, v interface{}) (types.RemoveClubSlugAliasInput, error) {
	res, err := ec.unmarshalInputRemoveClubSlugAliasInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRemovePostContentInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemovePostContentInput(ctx context.Context, v interface{}) (types.RemovePostContentInput, error) {
	res, err := ec.unmarshalInputRemovePostContentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx context.Context, sel ast.SelectionSet, v *graphql1.Resource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Resource(ctx, sel, v)
}

func (ec *executionContext) unmarshalNResourceType2overdollᚋlibrariesᚋgraphqlᚐResourceType(ctx context.Context, v interface{}) (graphql1.ResourceType, error) {
	var res graphql1.ResourceType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResourceType2overdollᚋlibrariesᚋgraphqlᚐResourceType(ctx context.Context, sel ast.SelectionSet, v graphql1.ResourceType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNResourceUrl2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURLᚄ(ctx context.Context, sel ast.SelectionSet, v []*graphql1.ResourceURL) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResourceUrl2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURL(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNResourceUrl2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURL(ctx context.Context, sel ast.SelectionSet, v *graphql1.ResourceURL) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ResourceUrl(ctx, sel, v)
}

func (ec *executionContext) marshalNSearch2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSearch(ctx context.Context, sel ast.SelectionSet, v types.Search) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Search(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSearchConnection(ctx context.Context, sel ast.SelectionSet, v types.SearchConnection) graphql.Marshaler {
	return ec._SearchConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNSearchConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSearchConnection(ctx context.Context, sel ast.SelectionSet, v *types.SearchConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSearchEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.SearchEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSearchEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSearchEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSearchEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSearchEdge(ctx context.Context, sel ast.SelectionSet, v *types.SearchEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNSeries2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeries(ctx context.Context, sel ast.SelectionSet, v types.Series) graphql.Marshaler {
	return ec._Series(ctx, sel, &v)
}

func (ec *executionContext) marshalNSeries2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeries(ctx context.Context, sel ast.SelectionSet, v *types.Series) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Series(ctx, sel, v)
}

func (ec *executionContext) marshalNSeriesConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesConnection(ctx context.Context, sel ast.SelectionSet, v types.SeriesConnection) graphql.Marshaler {
	return ec._SeriesConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNSeriesConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesConnection(ctx context.Context, sel ast.SelectionSet, v *types.SeriesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SeriesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSeriesEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.SeriesEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSeriesEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSeriesEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesEdge(ctx context.Context, sel ast.SelectionSet, v *types.SeriesEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SeriesEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSeriesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesSort(ctx context.Context, v interface{}) (types.SeriesSort, error) {
	var res types.SeriesSort
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSeriesSort2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeriesSort(ctx context.Context, sel ast.SelectionSet, v types.SeriesSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSpinRouletteInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSpinRouletteInput(ctx context.Context, v interface{}) (types.SpinRouletteInput, error) {
	res, err := ec.unmarshalInputSpinRouletteInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSubmitPostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSubmitPostInput(ctx context.Context, v interface{}) (types.SubmitPostInput, error) {
	res, err := ec.unmarshalInputSubmitPostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSupporterOnlyStatus2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatus(ctx context.Context, v interface{}) (types.SupporterOnlyStatus, error) {
	var res types.SupporterOnlyStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSupporterOnlyStatus2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatus(ctx context.Context, sel ast.SelectionSet, v types.SupporterOnlyStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSuspendClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSuspendClubInput(ctx context.Context, v interface{}) (types.SuspendClubInput, error) {
	res, err := ec.unmarshalInputSuspendClubInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTerminateClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTerminateClubInput(ctx context.Context, v interface{}) (types.TerminateClubInput, error) {
	res, err := ec.unmarshalInputTerminateClubInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTopic2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx context.Context, sel ast.SelectionSet, v types.Topic) graphql.Marshaler {
	return ec._Topic(ctx, sel, &v)
}

func (ec *executionContext) marshalNTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx context.Context, sel ast.SelectionSet, v *types.Topic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Topic(ctx, sel, v)
}

func (ec *executionContext) marshalNTopicConnection2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopicConnection(ctx context.Context, sel ast.SelectionSet, v types.TopicConnection) graphql.Marshaler {
	return ec._TopicConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNTopicConnection2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopicConnection(ctx context.Context, sel ast.SelectionSet, v *types.TopicConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopicConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNTopicEdge2ᚕᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopicEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*types.TopicEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopicEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopicEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTopicEdge2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopicEdge(ctx context.Context, sel ast.SelectionSet, v *types.TopicEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopicEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTransferClubOwnershipInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTransferClubOwnershipInput(ctx context.Context, v interface{}) (types.TransferClubOwnershipInput, error) {
	res, err := ec.unmarshalInputTransferClubOwnershipInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTranslation2ᚕᚖoverdollᚋlibrariesᚋgraphqlᚐTranslationᚄ(ctx context.Context, sel ast.SelectionSet, v []*graphql1.Translation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTranslation2ᚖoverdollᚋlibrariesᚋgraphqlᚐTranslation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTranslation2ᚖoverdollᚋlibrariesᚋgraphqlᚐTranslation(ctx context.Context, sel ast.SelectionSet, v *graphql1.Translation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Translation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx context.Context, v interface{}) (graphql1.URI, error) {
	var res graphql1.URI
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNURI2overdollᚋlibrariesᚋgraphqlᚐURI(ctx context.Context, sel ast.SelectionSet, v graphql1.URI) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUnArchivePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnArchivePostInput(ctx context.Context, v interface{}) (types.UnArchivePostInput, error) {
	res, err := ec.unmarshalInputUnArchivePostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUnSuspendClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnSuspendClubInput(ctx context.Context, v interface{}) (types.UnSuspendClubInput, error) {
	res, err := ec.unmarshalInputUnSuspendClubInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUnTerminateClubInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnTerminateClubInput(ctx context.Context, v interface{}) (types.UnTerminateClubInput, error) {
	res, err := ec.unmarshalInputUnTerminateClubInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUndoLikePostInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUndoLikePostInput(ctx context.Context, v interface{}) (types.UndoLikePostInput, error) {
	res, err := ec.unmarshalInputUndoLikePostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateAudienceBannerInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceBannerInput(ctx context.Context, v interface{}) (types.UpdateAudienceBannerInput, error) {
	res, err := ec.unmarshalInputUpdateAudienceBannerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateAudienceIsStandardInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceIsStandardInput(ctx context.Context, v interface{}) (types.UpdateAudienceIsStandardInput, error) {
	res, err := ec.unmarshalInputUpdateAudienceIsStandardInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateAudienceTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceTitleInput(ctx context.Context, v interface{}) (types.UpdateAudienceTitleInput, error) {
	res, err := ec.unmarshalInputUpdateAudienceTitleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCategoryTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCategoryTitleInput(ctx context.Context, v interface{}) (types.UpdateCategoryTitleInput, error) {
	res, err := ec.unmarshalInputUpdateCategoryTitleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCategoryTopicInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCategoryTopicInput(ctx context.Context, v interface{}) (types.UpdateCategoryTopicInput, error) {
	res, err := ec.unmarshalInputUpdateCategoryTopicInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCharacterNameInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCharacterNameInput(ctx context.Context, v interface{}) (types.UpdateCharacterNameInput, error) {
	res, err := ec.unmarshalInputUpdateCharacterNameInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateClubCharactersLimitInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubCharactersLimitInput(ctx context.Context, v interface{}) (types.UpdateClubCharactersLimitInput, error) {
	res, err := ec.unmarshalInputUpdateClubCharactersLimitInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateClubNameInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubNameInput(ctx context.Context, v interface{}) (types.UpdateClubNameInput, error) {
	res, err := ec.unmarshalInputUpdateClubNameInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateClubThumbnailInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubThumbnailInput(ctx context.Context, v interface{}) (types.UpdateClubThumbnailInput, error) {
	res, err := ec.unmarshalInputUpdateClubThumbnailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCurationProfileAudienceInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileAudienceInput(ctx context.Context, v interface{}) (types.UpdateCurationProfileAudienceInput, error) {
	res, err := ec.unmarshalInputUpdateCurationProfileAudienceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCurationProfileCategoryInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileCategoryInput(ctx context.Context, v interface{}) (types.UpdateCurationProfileCategoryInput, error) {
	res, err := ec.unmarshalInputUpdateCurationProfileCategoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCurationProfileDateOfBirthInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileDateOfBirthInput(ctx context.Context, v interface{}) (types.UpdateCurationProfileDateOfBirthInput, error) {
	res, err := ec.unmarshalInputUpdateCurationProfileDateOfBirthInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePostAudienceInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostAudienceInput(ctx context.Context, v interface{}) (types.UpdatePostAudienceInput, error) {
	res, err := ec.unmarshalInputUpdatePostAudienceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePostCategoriesInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostCategoriesInput(ctx context.Context, v interface{}) (types.UpdatePostCategoriesInput, error) {
	res, err := ec.unmarshalInputUpdatePostCategoriesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePostCharactersInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostCharactersInput(ctx context.Context, v interface{}) (types.UpdatePostCharactersInput, error) {
	res, err := ec.unmarshalInputUpdatePostCharactersInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePostContentIsSupporterOnlyInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostContentIsSupporterOnlyInput(ctx context.Context, v interface{}) (types.UpdatePostContentIsSupporterOnlyInput, error) {
	res, err := ec.unmarshalInputUpdatePostContentIsSupporterOnlyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePostContentOrderInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostContentOrderInput(ctx context.Context, v interface{}) (types.UpdatePostContentOrderInput, error) {
	res, err := ec.unmarshalInputUpdatePostContentOrderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePostDescriptionInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostDescriptionInput(ctx context.Context, v interface{}) (types.UpdatePostDescriptionInput, error) {
	res, err := ec.unmarshalInputUpdatePostDescriptionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSeriesTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateSeriesTitleInput(ctx context.Context, v interface{}) (types.UpdateSeriesTitleInput, error) {
	res, err := ec.unmarshalInputUpdateSeriesTitleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopicBannerInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicBannerInput(ctx context.Context, v interface{}) (types.UpdateTopicBannerInput, error) {
	res, err := ec.unmarshalInputUpdateTopicBannerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopicDescriptionInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicDescriptionInput(ctx context.Context, v interface{}) (types.UpdateTopicDescriptionInput, error) {
	res, err := ec.unmarshalInputUpdateTopicDescriptionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopicTitleInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicTitleInput(ctx context.Context, v interface{}) (types.UpdateTopicTitleInput, error) {
	res, err := ec.unmarshalInputUpdateTopicTitleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopicWeightInput2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicWeightInput(ctx context.Context, v interface{}) (types.UpdateTopicWeightInput, error) {
	res, err := ec.unmarshalInputUpdateTopicWeightInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVideoContainer2overdollᚋlibrariesᚋgraphqlᚐVideoContainer(ctx context.Context, sel ast.SelectionSet, v graphql1.VideoContainer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VideoContainer(ctx, sel, v)
}

func (ec *executionContext) marshalNVideoContainer2ᚕoverdollᚋlibrariesᚋgraphqlᚐVideoContainerᚄ(ctx context.Context, sel ast.SelectionSet, v []graphql1.VideoContainer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVideoContainer2overdollᚋlibrariesᚋgraphqlᚐVideoContainer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN_Any2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_Any2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_Any2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_Any2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN_Any2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_Any2map(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v []fedruntime.Entity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccount2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAccount(ctx context.Context, sel ast.SelectionSet, v *types.Account) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) marshalOAddCategoryAlternativeTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddCategoryAlternativeTitlePayload(ctx context.Context, sel ast.SelectionSet, v *types.AddCategoryAlternativeTitlePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddCategoryAlternativeTitlePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAddClubSlugAliasPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddClubSlugAliasPayload(ctx context.Context, sel ast.SelectionSet, v *types.AddClubSlugAliasPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddClubSlugAliasPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAddClubSlugAliasValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddClubSlugAliasValidation(ctx context.Context, v interface{}) (*types.AddClubSlugAliasValidation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.AddClubSlugAliasValidation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAddClubSlugAliasValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddClubSlugAliasValidation(ctx context.Context, sel ast.SelectionSet, v *types.AddClubSlugAliasValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAddPostContentPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAddPostContentPayload(ctx context.Context, sel ast.SelectionSet, v *types.AddPostContentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddPostContentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOArchivePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐArchivePostPayload(ctx context.Context, sel ast.SelectionSet, v *types.ArchivePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArchivePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAudience2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐAudience(ctx context.Context, sel ast.SelectionSet, v *types.Audience) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Audience(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBCP472ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBCP472ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCategory2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCategory(ctx context.Context, sel ast.SelectionSet, v *types.Category) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Category(ctx, sel, v)
}

func (ec *executionContext) marshalOCharacter2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCharacter(ctx context.Context, sel ast.SelectionSet, v *types.Character) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Character(ctx, sel, v)
}

func (ec *executionContext) marshalOClub2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClub(ctx context.Context, sel ast.SelectionSet, v *types.Club) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Club(ctx, sel, v)
}

func (ec *executionContext) marshalOClubMember2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubMember(ctx context.Context, sel ast.SelectionSet, v *types.ClubMember) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClubMember(ctx, sel, v)
}

func (ec *executionContext) marshalOClubSuspension2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubSuspension(ctx context.Context, sel ast.SelectionSet, v *types.ClubSuspension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClubSuspension(ctx, sel, v)
}

func (ec *executionContext) marshalOClubTermination2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐClubTermination(ctx context.Context, sel ast.SelectionSet, v *types.ClubTermination) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClubTermination(ctx, sel, v)
}

func (ec *executionContext) marshalOCreateAudiencePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateAudiencePayload(ctx context.Context, sel ast.SelectionSet, v *types.CreateAudiencePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateAudiencePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCreateAudienceValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateAudienceValidation(ctx context.Context, v interface{}) (*types.CreateAudienceValidation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.CreateAudienceValidation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCreateAudienceValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateAudienceValidation(ctx context.Context, sel ast.SelectionSet, v *types.CreateAudienceValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCreateCategoryPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *types.CreateCategoryPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCreateCategoryValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCategoryValidation(ctx context.Context, v interface{}) (*types.CreateCategoryValidation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.CreateCategoryValidation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCreateCategoryValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCategoryValidation(ctx context.Context, sel ast.SelectionSet, v *types.CreateCategoryValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCreateCharacterPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCharacterPayload(ctx context.Context, sel ast.SelectionSet, v *types.CreateCharacterPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateCharacterPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCreateCharacterValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCharacterValidation(ctx context.Context, v interface{}) (*types.CreateCharacterValidation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.CreateCharacterValidation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCreateCharacterValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateCharacterValidation(ctx context.Context, sel ast.SelectionSet, v *types.CreateCharacterValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCreateClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateClubPayload(ctx context.Context, sel ast.SelectionSet, v *types.CreateClubPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateClubPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCreateClubValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateClubValidation(ctx context.Context, v interface{}) (*types.CreateClubValidation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.CreateClubValidation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCreateClubValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateClubValidation(ctx context.Context, sel ast.SelectionSet, v *types.CreateClubValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCreateGameSessionPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateGameSessionPayload(ctx context.Context, sel ast.SelectionSet, v *types.CreateGameSessionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateGameSessionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCreatePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreatePostPayload(ctx context.Context, sel ast.SelectionSet, v *types.CreatePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreatePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCreateSeriesPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateSeriesPayload(ctx context.Context, sel ast.SelectionSet, v *types.CreateSeriesPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateSeriesPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCreateSeriesValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateSeriesValidation(ctx context.Context, v interface{}) (*types.CreateSeriesValidation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.CreateSeriesValidation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCreateSeriesValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateSeriesValidation(ctx context.Context, sel ast.SelectionSet, v *types.CreateSeriesValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCreateTopicPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateTopicPayload(ctx context.Context, sel ast.SelectionSet, v *types.CreateTopicPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateTopicPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCreateTopicValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateTopicValidation(ctx context.Context, v interface{}) (*types.CreateTopicValidation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.CreateTopicValidation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCreateTopicValidation2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCreateTopicValidation(ctx context.Context, sel ast.SelectionSet, v *types.CreateTopicValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCurationProfile2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐCurationProfile(ctx context.Context, sel ast.SelectionSet, v *types.CurationProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CurationProfile(ctx, sel, v)
}

func (ec *executionContext) marshalODeletePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDeletePostPayload(ctx context.Context, sel ast.SelectionSet, v *types.DeletePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeletePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODisableClubCharactersPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDisableClubCharactersPayload(ctx context.Context, sel ast.SelectionSet, v *types.DisableClubCharactersPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisableClubCharactersPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODisableClubSupporterOnlyPostsPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐDisableClubSupporterOnlyPostsPayload(ctx context.Context, sel ast.SelectionSet, v *types.DisableClubSupporterOnlyPostsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisableClubSupporterOnlyPostsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOEnableClubCharactersPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐEnableClubCharactersPayload(ctx context.Context, sel ast.SelectionSet, v *types.EnableClubCharactersPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnableClubCharactersPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOEnableClubSupporterOnlyPostsPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐEnableClubSupporterOnlyPostsPayload(ctx context.Context, sel ast.SelectionSet, v *types.EnableClubSupporterOnlyPostsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnableClubSupporterOnlyPostsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOGameSession2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameSession(ctx context.Context, sel ast.SelectionSet, v *types.GameSession) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GameSession(ctx, sel, v)
}

func (ec *executionContext) marshalOGameSessionStatus2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐGameSessionStatus(ctx context.Context, sel ast.SelectionSet, v types.GameSessionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GameSessionStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx context.Context, v interface{}) (*relay.ID, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(relay.ID)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖoverdollᚋlibrariesᚋgraphqlᚋrelayᚐID(ctx context.Context, sel ast.SelectionSet, v *relay.ID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOJoinClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐJoinClubPayload(ctx context.Context, sel ast.SelectionSet, v *types.JoinClubPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JoinClubPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOLeaveClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐLeaveClubPayload(ctx context.Context, sel ast.SelectionSet, v *types.LeaveClubPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LeaveClubPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOLikePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐLikePostPayload(ctx context.Context, sel ast.SelectionSet, v *types.LikePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LikePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOMedia2overdollᚋlibrariesᚋgraphqlᚐMedia(ctx context.Context, sel ast.SelectionSet, v graphql1.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Media(ctx, sel, v)
}

func (ec *executionContext) marshalOMediaProgress2ᚖoverdollᚋlibrariesᚋgraphqlᚐMediaProgress(ctx context.Context, sel ast.SelectionSet, v *graphql1.MediaProgress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MediaProgress(ctx, sel, v)
}

func (ec *executionContext) marshalOPost2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPost(ctx context.Context, sel ast.SelectionSet, v *types.Post) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Post(ctx, sel, v)
}

func (ec *executionContext) marshalOPostLike2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostLike(ctx context.Context, sel ast.SelectionSet, v *types.PostLike) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PostLike(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPostState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx context.Context, v interface{}) (*types.PostState, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(types.PostState)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPostState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPostState(ctx context.Context, sel ast.SelectionSet, v *types.PostState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPromoteClubSlugAliasToDefaultPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐPromoteClubSlugAliasToDefaultPayload(ctx context.Context, sel ast.SelectionSet, v *types.PromoteClubSlugAliasToDefaultPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PromoteClubSlugAliasToDefaultPayload(ctx, sel, v)
}

func (ec *executionContext) marshalORemoveCategoryAlternativeTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemoveCategoryAlternativeTitlePayload(ctx context.Context, sel ast.SelectionSet, v *types.RemoveCategoryAlternativeTitlePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RemoveCategoryAlternativeTitlePayload(ctx, sel, v)
}

func (ec *executionContext) marshalORemoveClubSlugAliasPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemoveClubSlugAliasPayload(ctx context.Context, sel ast.SelectionSet, v *types.RemoveClubSlugAliasPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RemoveClubSlugAliasPayload(ctx, sel, v)
}

func (ec *executionContext) marshalORemovePostContentPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRemovePostContentPayload(ctx context.Context, sel ast.SelectionSet, v *types.RemovePostContentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RemovePostContentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOResource2ᚖoverdollᚋlibrariesᚋgraphqlᚐResource(ctx context.Context, sel ast.SelectionSet, v *graphql1.Resource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Resource(ctx, sel, v)
}

func (ec *executionContext) marshalOResourceProgress2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceProgress(ctx context.Context, sel ast.SelectionSet, v *graphql1.ResourceProgress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ResourceProgress(ctx, sel, v)
}

func (ec *executionContext) marshalOResourceUrl2ᚖoverdollᚋlibrariesᚋgraphqlᚐResourceURL(ctx context.Context, sel ast.SelectionSet, v *graphql1.ResourceURL) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ResourceUrl(ctx, sel, v)
}

func (ec *executionContext) marshalORouletteGameState2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐRouletteGameState(ctx context.Context, sel ast.SelectionSet, v *types.RouletteGameState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RouletteGameState(ctx, sel, v)
}

func (ec *executionContext) marshalOSeries2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSeries(ctx context.Context, sel ast.SelectionSet, v *types.Series) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Series(ctx, sel, v)
}

func (ec *executionContext) marshalOSpinRoulettePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSpinRoulettePayload(ctx context.Context, sel ast.SelectionSet, v *types.SpinRoulettePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SpinRoulettePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSubmitPostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSubmitPostPayload(ctx context.Context, sel ast.SelectionSet, v *types.SubmitPostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SubmitPostPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSupporterOnlyStatus2ᚕoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatusᚄ(ctx context.Context, v interface{}) ([]types.SupporterOnlyStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]types.SupporterOnlyStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSupporterOnlyStatus2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSupporterOnlyStatus2ᚕoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []types.SupporterOnlyStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupporterOnlyStatus2overdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSupporterOnlyStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSuspendClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐSuspendClubPayload(ctx context.Context, sel ast.SelectionSet, v *types.SuspendClubPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SuspendClubPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOTerminateClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTerminateClubPayload(ctx context.Context, sel ast.SelectionSet, v *types.TerminateClubPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TerminateClubPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOTopic2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTopic(ctx context.Context, sel ast.SelectionSet, v *types.Topic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Topic(ctx, sel, v)
}

func (ec *executionContext) marshalOTransferClubOwnershipPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐTransferClubOwnershipPayload(ctx context.Context, sel ast.SelectionSet, v *types.TransferClubOwnershipPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransferClubOwnershipPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUnArchivePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnArchivePostPayload(ctx context.Context, sel ast.SelectionSet, v *types.UnArchivePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UnArchivePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUnSuspendClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnSuspendClubPayload(ctx context.Context, sel ast.SelectionSet, v *types.UnSuspendClubPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UnSuspendClubPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUnTerminateClubPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUnTerminateClubPayload(ctx context.Context, sel ast.SelectionSet, v *types.UnTerminateClubPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UnTerminateClubPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUndoLikePostPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUndoLikePostPayload(ctx context.Context, sel ast.SelectionSet, v *types.UndoLikePostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UndoLikePostPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateAudienceBannerPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceBannerPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateAudienceBannerPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateAudienceBannerPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateAudienceIsStandardPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceIsStandardPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateAudienceIsStandardPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateAudienceIsStandardPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateAudienceTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateAudienceTitlePayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateAudienceTitlePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateAudienceTitlePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateCategoryTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCategoryTitlePayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateCategoryTitlePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCategoryTitlePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateCategoryTopicPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCategoryTopicPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateCategoryTopicPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCategoryTopicPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateCharacterNamePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCharacterNamePayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateCharacterNamePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCharacterNamePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateClubCharactersLimitPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubCharactersLimitPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateClubCharactersLimitPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateClubCharactersLimitPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateClubNamePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubNamePayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateClubNamePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateClubNamePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateClubThumbnailPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateClubThumbnailPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateClubThumbnailPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateClubThumbnailPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateCurationProfileAudiencePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileAudiencePayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateCurationProfileAudiencePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCurationProfileAudiencePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateCurationProfileCategoryPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateCurationProfileCategoryPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCurationProfileCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateCurationProfileDateOfBirthPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateCurationProfileDateOfBirthPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateCurationProfileDateOfBirthPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateCurationProfileDateOfBirthPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdatePostAudiencePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostAudiencePayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdatePostAudiencePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdatePostAudiencePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdatePostCategoriesPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostCategoriesPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdatePostCategoriesPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdatePostCategoriesPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdatePostCharactersPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostCharactersPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdatePostCharactersPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdatePostCharactersPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdatePostContentIsSupporterOnlyPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostContentIsSupporterOnlyPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdatePostContentIsSupporterOnlyPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdatePostContentIsSupporterOnlyPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdatePostContentOrderPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostContentOrderPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdatePostContentOrderPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdatePostContentOrderPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdatePostDescriptionPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdatePostDescriptionPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdatePostDescriptionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdatePostDescriptionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateSeriesTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateSeriesTitlePayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateSeriesTitlePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateSeriesTitlePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateTopicBannerPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicBannerPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateTopicBannerPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateTopicBannerPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateTopicDescriptionPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicDescriptionPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateTopicDescriptionPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateTopicDescriptionPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateTopicTitlePayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicTitlePayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateTopicTitlePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateTopicTitlePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateTopicWeightPayload2ᚖoverdollᚋapplicationsᚋstingᚋinternalᚋportsᚋgraphqlᚋtypesᚐUpdateTopicWeightPayload(ctx context.Context, sel ast.SelectionSet, v *types.UpdateTopicWeightPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateTopicWeightPayload(ctx, sel, v)
}

func (ec *executionContext) marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v fedruntime.Entity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__Entity(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
