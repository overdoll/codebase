type Audience implements Node @key(fields: "id") {
  """An ID pointing to this audience."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail(size: Int): Resource @goField(forceResolver: true)

  """A title for this audience."""
  title: String!
}

type AudienceEdge {
  cursor: String!
  node: Audience!
}

type AudienceConnection {
  edges: [AudienceEdge!]!
  pageInfo: PageInfo!
}

"""Ordering options for audiences"""
input AudiencesOrder {
  """The field to order audiences by."""
  field: AudiencesOrderField!
}

"""Properties by which audience connections can be ordered."""
enum AudiencesOrderField {
  """Audience by created time"""
  CREATED_AT
}

extend type Query {
  """Search all audiences."""
  audiences(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    slugs: [String!]

    """Search by title of the audience."""
    title: String

    """Ordering options for audiences."""
    orderBy: AudiencesOrder! = { field: CREATED_AT }
  ): AudienceConnection!

  """Get a single audience."""
  audience(
    """Search by slug of the audience."""
    slug: String!
  ): Audience
}

extend type Post {
  """Represents the audience that this post belongs to"""
  audience: Audience
}
