type AudienceTitleTranslation {
  """Localization formatted in BCP47."""
  locale: BCP47!

  """A title for this audience."""
  title: String!
}

type Audience implements Node @key(fields: "id") {
  """An ID pointing to this audience."""
  id: ID!

  """A url-friendly ID. Should be used when searching."""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A title for this audience."""
  title: String!

  """All translations for this title."""
  titleTranslations: [AudienceTitleTranslation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!
}

type AudienceEdge {
  cursor: String!
  node: Audience!
}

type AudienceConnection {
  edges: [AudienceEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which audience connections can be sorted."""
enum AudiencesSort {
  """Audience by newest first"""
  NEW

  """Audience by top likes"""
  TOP

  """Audience by most posts"""
  POPULAR
}

extend type Query {
  """Search all audiences."""
  audiences(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    slugs: [String!]

    """Search by title of the audience."""
    title: String

    """Sorting options for audiences."""
    sortBy: AudiencesSort! = POPULAR
  ): AudienceConnection!

  """Get a single audience."""
  audience(
    """Search by slug of the audience."""
    slug: String!
  ): Audience
}

extend type Post {
  """Represents the audience that this post belongs to"""
  audience: Audience
}

"""Create a new audience."""
input CreateAudienceInput {
  """The chosen slug for the audience."""
  slug: String!

  """The chosen title for the audience."""
  title: String!

  """If the audience is standard or not."""
  standard: Boolean!
}

"""Payload for a new audience"""
type CreateAudiencePayload {
  """The audience after creation"""
  audience: Audience

  """Validation for creating a new audience"""
  validation: CreateAudienceValidation
}

"""Validation for creating a new audience"""
enum CreateAudienceValidation {
  SLUG_TAKEN
}

"""Update audience."""
input UpdateAudienceTitleInput {
  """The audience to update"""
  id: ID!

  """The title to update"""
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update audience."""
input UpdateAudienceThumbnailInput {
  """The audience to update"""
  id: ID!

  """The thumbnail"""
  thumbnail: String!
}

"""Update audience."""
input UpdateAudienceIsStandardInput {
  """The audience to update"""
  id: ID!

  """Standard"""
  standard: Boolean!
}

"""Payload for updating audience"""
type UpdateAudienceTitlePayload {
  """The audience after update"""
  audience: Audience
}

"""Payload for updating audience"""
type UpdateAudienceThumbnailPayload {
  """The audience after update"""
  audience: Audience
}

"""Payload for updating audience"""
type UpdateAudienceIsStandardPayload {
  """The audience after update"""
  audience: Audience
}

extend type Mutation {
  """
  Create a new audience
  """
  createAudience(input: CreateAudienceInput!): CreateAudiencePayload

  """
  Update audience title
  """
  updateAudienceTitle(input: UpdateAudienceTitleInput!): UpdateAudienceTitlePayload

  """
  Update audience thumbnail
  """
  updateAudienceThumbnail(input: UpdateAudienceThumbnailInput!): UpdateAudienceThumbnailPayload

  """
  Update audience standard
  """
  updateAudienceIsStandard(input: UpdateAudienceIsStandardInput!): UpdateAudienceIsStandardPayload
}
