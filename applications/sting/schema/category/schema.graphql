type Category implements Node @key(fields: "id") {
  """An ID pointing to this category."""
  id: ID!

  """An ID that can be used to uniquely-identify this category. Never changes."""
  reference: String!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A URL pointing to the object's banner."""
  banner: Resource

  """
  A title for this category.

  Optionally pass a locale to display it in a specific language. English by default.
  """
  title(locale: BCP47): String! @goField(forceResolver: true)

  """All translations for this title."""
  titleTranslations: [Translation!]!

  """Alternative titles for this category."""
  alternativeTitles: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """The topic linked this category. If no topic is linked, field is null."""
  topic: Topic @goField(forceResolver: true)
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which categories connections can be sorted."""
enum CategoriesSort {
  """Categories by newest first"""
  NEW

  """Categories by top likes"""
  TOP

  """Categories by most posts"""
  POPULAR
}

type Query {
  """Search all categories."""
  categories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    slugs: [String!]

    """Filter by the title of the category."""
    title: String

    """Sorting options for categories."""
    sortBy: CategoriesSort! = POPULAR
  ): CategoryConnection!

  """Get a single category."""
  category(
    """Search by slug of the category."""
    slug: String!
  ): Category
}

extend type Post {
  """Categories that belong to this post"""
  categories: [Category!]! @goField(forceResolver: true)
}

"""Create a new category."""
input CreateCategoryInput {
  """
  The chosen slug for the category.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen title for the category.

  Validation: Max 25 characters.
  """
  title: String!

  """
  Optionally assign a topic to this category.
  """
  topicId: ID
}

"""Payload for a new category"""
type CreateCategoryPayload {
  """The category after creation"""
  category: Category

  """Validation for creating a new category"""
  validation: CreateCategoryValidation
}

"""Validation for creating a new category"""
enum CreateCategoryValidation {
  SLUG_TAKEN
}

"""Update category."""
input UpdateCategoryTitleInput {
  """The category to update"""
  id: ID!

  """
  The title to update.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update category."""
input AddCategoryAlternativeTitleInput {
  """The category to update"""
  id: ID!

  """
  The title to add.

  Validation: Max 25 characters.
  """
  title: String!

  """The localization for this title"""
  locale: BCP47!
}

"""Update category."""
input RemoveCategoryAlternativeTitleInput {
  """The category to update"""
  id: ID!

  """
  The title to remove.
  """
  title: String!
}

"""Update category topic."""
input UpdateCategoryTopicInput {
  """The category to update"""
  id: ID!

  """
  The topic to assign to this category.
  """
  topicId: ID!
}

"""Update category."""
input UpdateCategoryThumbnailInput {
  """The category to update"""
  id: ID!

  """The thumbnail"""
  thumbnail: String!
}

"""Payload for updating category"""
type UpdateCategoryTopicPayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type AddCategoryAlternativeTitlePayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type RemoveCategoryAlternativeTitlePayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type UpdateCategoryTitlePayload {
  """The category after update"""
  category: Category
}

"""Payload for updating category"""
type UpdateCategoryThumbnailPayload {
  """The category after update"""
  category: Category
}

type Mutation {
  """
  Create a new category
  """
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload

  """
  Update category title
  """
  updateCategoryTitle(input: UpdateCategoryTitleInput!): UpdateCategoryTitlePayload

  """
  Update category thumbnail
  """
  updateCategoryThumbnail(input: UpdateCategoryThumbnailInput!): UpdateCategoryThumbnailPayload

  """
  Update the category topic
  """
  updateCategoryTopic(input: UpdateCategoryTopicInput!): UpdateCategoryTopicPayload

  """
  Add an alternative title to the category.
  """
  addCategoryAlternativeTitle(input: AddCategoryAlternativeTitleInput!): AddCategoryAlternativeTitlePayload

  """
  Remove an alternative title from the category.
  """
  removeCategoryAlternativeTitle(input: RemoveCategoryAlternativeTitleInput!): RemoveCategoryAlternativeTitlePayload
}
