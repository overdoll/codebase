type Character implements Node @key(fields: "id") {
  """An ID pointing to this character."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A name for this character."""
  name: String!

  """All translations for this name."""
  nameTranslations: [Translation!]!

  """Total amount of likes."""
  totalLikes: Int!

  """Total amount of posts."""
  totalPosts: Int!

  """The series linked to this character."""
  series: Series!
}

type CharacterEdge {
  cursor: String!
  node: Character!
}

type CharacterConnection {
  edges: [CharacterEdge!]!
  pageInfo: PageInfo!
}

"""Properties by which character connections can be sorted."""
enum CharactersSort {
  """Characters by newest first"""
  NEW

  """Characters by top likes"""
  TOP

  """Characters by most posts"""
  POPULAR
}

extend type Query {
  """Get or search all characters"""
  characters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by character slugs."""
    slugs: [String!]

    """
    When searching for a character by slug, you need to include the series' slug since slugs are unique-per-series.

    Only one slug is allowed for now since you don't want inaccurate results
    """
    seriesSlug: String

    """Filter by the name of the character."""
    name: String

    """Sorting options for characters."""
    sortBy: CharactersSort! = POPULAR
  ): CharacterConnection!

  """Get a single character."""
  character(
    """Search by slug of the character."""
    slug: String!

    """A series slug is required since character slugs are unique-per-series."""
    seriesSlug: String!
  ): Character
}

extend type Post {
  """Characters that belong to this post"""
  characters: [Character!]! @goField(forceResolver: true)
}

"""Create a new character."""
input CreateCharacterInput {
  """The chosen series for the character."""
  seriesId: ID!

  """
  The chosen slug for the character.

  Validation: Max 25 characters. No spaces allowed. Alphanumeric characters.
  """
  slug: String!

  """
  The chosen name for the character.

  Validation: Max 25 characters.
  """
  name: String!
}

"""Payload for a new character"""
type CreateCharacterPayload {
  """The character after creation"""
  character: Character

  """Validation for creating a new character"""
  validation: CreateCharacterValidation
}

"""Validation for creating a new character"""
enum CreateCharacterValidation {
  SLUG_TAKEN
}

"""Update character."""
input UpdateCharacterNameInput {
  """The character to update"""
  id: ID!

  """
  The name to update.

  Validation: Max 25 characters.
  """
  name: String!

  """
  The localization for this name.

  Validation: Must be one of the languages from the languages query.
  """
  locale: BCP47!
}

"""Update character."""
input UpdateCharacterThumbnailInput {
  """The character to update"""
  id: ID!

  """The thumbnail"""
  thumbnail: String!
}

"""Payload for updating character"""
type UpdateCharacterNamePayload {
  """The character after update"""
  character: Character
}

"""Payload for updating character"""
type UpdateCharacterThumbnailPayload {
  """The character after update"""
  character: Character
}

extend type Mutation {
  """
  Create a new character
  """
  createCharacter(input: CreateCharacterInput!): CreateCharacterPayload

  """
  Update character title
  """
  updateCharacterName(input: UpdateCharacterNameInput!): UpdateCharacterNamePayload

  """
  Update character thumbnail
  """
  updateCharacterThumbnail(input: UpdateCharacterThumbnailInput!): UpdateCharacterThumbnailPayload
}
