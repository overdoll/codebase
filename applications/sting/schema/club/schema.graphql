type Club implements Node & Object @key(fields: "id") {
  """An ID pointing to this club."""
  id: ID!

  """A url-friendly ID. Should be used when searching"""
  slug: String!

  """A URL pointing to the object's thumbnail."""
  thumbnail: Resource

  """A name for this club."""
  name: String!
}

type ClubEdge {
  cursor: String!
  node: Club!
}

type ClubConnection {
  edges: [ClubEdge!]!
  pageInfo: PageInfo!
}

"""Ordering options for clubs"""
input ClubsOrder {
  """The field to order clubs by."""
  field: ClubsOrderField!
}

"""Properties by which club connections can be ordered."""
enum ClubsOrderField {
  """Club by created time"""
  CREATED_AT
}

extend type Query {
  """Search multiple clubs."""
  clubs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by club slugs."""
    slugs: [String!]

    """Filter by the name of the club."""
    name: String

    """Ordering options for clubs."""
    orderBy: ClubsOrder! = { field: CREATED_AT }
  ): ClubConnection!

  """Get a single club."""
  club(
    """Search by slug of the club."""
    slug: String!
  ): Club
}

extend type Post {
  """Represents the club that this post belongs to"""
  club: Club
}
