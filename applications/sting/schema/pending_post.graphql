type PendingPost implements PostObject & Node {
  id: ID!

  """The state of the post"""
  state: PendingPostStateEnum!

  """Represents the account that this post belongs to"""
  artist: Actor!

  """The moderator to whom this pending post was assigned"""
  moderator: Actor!

  """The actor that contributed this post"""
  contributor: Actor!

  """Content belonging to this post"""
  content: [Content!]!

  """The media that was requested."""
  mediaRequests: [String!]

  """The characters that were requested"""
  characterRequests: [CharacterRequestType!]

  """The date and time of when this post was created"""
  postedAt: Time!

  """The date at which this pending post will be reassigned"""
  reassignmentAt: Time!
}

enum PendingPostStateEnum {
  Review
  Published
  Discarded
  Rejected
}

type CharacterRequestType {
  name: String!
  media: String!
}

input CharacterRequest {
  name: String!
  media: String!
}

"""Create pending post."""
input CreatePendingPostInput {

  """Image IDs for the content"""
  content: [String!]!

  """Category IDs for this post"""
  categoryIds: [ID!]!

  """Ids for all the characters"""
  characterIds: [ID!]!

  """Requests (custom)"""
  mediaRequests: [String!]
  characterRequests: [CharacterRequest!]

  """Existing artist's ID"""
  existingArtist: ID

  """Custom Artist's username"""
  customArtistUsername: String

  """The author of this post is the artist, as well as contributor"""
  posterIsArtist: Boolean
}

"""Payload for a created pending post"""
type CreatePendingPostPayload {
  """The pending post after the creation"""
  pendingPost: PendingPost

  """If this pending post will be in review or not"""
  review: Boolean
}

type PendingPostEdge {
  cursor: String!
  node: PendingPost!
}

type PendingPostConnection {
  edges: [PendingPostEdge!]!
  pageInfo: PageInfo!
}

extend type Account @key(fields: "id") {
  """Pending posts queue specific to this account (when moderator)"""
  pendingPostsForModerator: PendingPostConnection! @goField(forceResolver: true) @cursor

  """Pending posts for this account"""
  pendingPosts: PendingPostConnection! @goField(forceResolver: true) @cursor
}


extend type Mutation {
  """
  Create a new pending post
  """
  createPendingPost(input: CreatePendingPostInput!): CreatePendingPostPayload
}