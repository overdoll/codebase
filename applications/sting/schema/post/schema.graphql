enum PendingPostStateEnum {
  Review
  Published
  Discarded
  Rejected
}

type PendingPost {
  id: ID!
  state: PendingPostStateEnum!
  moderator: String!
  contributor: Contributor!
  content: [String!]!
  categories: [Category!]!
  characters: [Character!]!
  mediaRequests: [String!]
  characterRequests: [CharacterRequestType!]
  artistId: String
  artistUsername: String!
  postedAt: Time!
  reassignmentAt: Time!
}

type Contributor {
  id: ID!
  username: String!
  avatar: String!
}

type PendingPostEdge {
  cursor: String!
  node: PendingPost!
}

type PendingPostConnection {
  edges: [PendingPostEdge!]!
  pageInfo: PageInfo!
}

input PostInput {
  content: [String!]!
  categories: [String!]!
  characters: [String!]!
  mediaRequests: [String!]
  characterRequests: [CharacterRequest!]
  artistId: String
  artistUsername: String
}

type PostResponse {
  id: String!
  review: Boolean!
  validation: Validation
}

input PendingPostFilters {
  moderatorId: String
  contributorId: String
  artistId: String
  id: String
}

extend type Query {
  """
  Get Pending Posts, specific to a moderator

  Can paginate using Connection Inputs and filter with PendingPostFilters

  All filters will work, except moderatorId, which is staff-only (by default, will grab pending post for logged-in user)
  """
  pendingPosts(after: String, before: String, first: Int, last: Int, filter: PendingPostFilters): PendingPostConnection!

  """
  Get a single pending post by ID
  """
  pendingPost(id: String!): PendingPost!
}

extend type Mutation {
  """
  Post a new post
  """
  post(data: PostInput): PostResponse!

  """
  Update post
  """
  updatePost(id: String!, data: PostInput): Response!
}
