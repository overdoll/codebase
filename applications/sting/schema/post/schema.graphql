"""Represents content for a post."""
type PostContent {
  """The ID of this content."""
  id: ID!

  """The resource belonging to this content."""
  resource: Resource!

  """Whether or not this content is supporter only."""
  isSupporterOnly: Boolean!

  """Whether or not the viewer is able to see this content."""
  viewerCanViewSupporterOnlyContent: Boolean!
}

type Post implements Node @key(fields: "id") {
  id: ID!

  """The reference of this post. Should always be used to reference this post."""
  reference: String!

  """The state of the post."""
  state: PostState!

  """The supporter-only status."""
  supporterOnlyStatus: SupporterOnlyStatus!

  """The moderator to whom this pending post was assigned"""
  moderator: Account

  """The contributor who contributed this post"""
  contributor: Account!

  """The club belonging to the post"""
  club: Club!

  """Content belonging to this post"""
  content: [PostContent!]!

  """The date and time of when this post was created"""
  createdAt: Time!

  """The date and time of when this post was posted"""
  postedAt: Time

  """The date at which this pending post will be reassigned"""
  reassignmentAt: Time

  """Suggested posts for this post."""
  suggestedPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)
}

enum PostState {
  DRAFT
  PUBLISHING
  REVIEW
  PUBLISHED
  DISCARDING
  DISCARDED
  REJECTED
  PROCESSING
  REMOVING
  REMOVED
}

enum SupporterOnlyStatus {
  """None of the content requires supporting to view."""
  NONE

  """Some of the content requires supporting to view, at least 1 content piece is free."""
  PARTIAL

  """All of the content is supporter-only."""
  FULL
}

"""Create a new post. A club ID is required."""
input CreatePostInput {
  """The club ID that this post will belong to"""
  clubId: ID!
}

"""Update post audience."""
input UpdatePostAudienceInput {
  """The post to update"""
  id: ID!

  """The audience that this post belongs to"""
  audienceId: ID!
}

"""Add post content."""
input AddPostContentInput {
  """The post to update"""
  id: ID!

  """Image IDs for the content"""
  content: [String!]!
}

"""Remove post content."""
input RemovePostContentInput {
  """The post to update"""
  id: ID!

  """Content IDs for the content"""
  contentIds: [ID!]!
}

"""Update post content order."""
input UpdatePostContentOrderInput {
  """The post to update"""
  id: ID!

  """Content IDs for the content"""
  contentIds: [ID!]!
}

"""Update post content is supporter only."""
input UpdatePostContentIsSupporterOnlyInput {
  """The post to update"""
  id: ID!

  """Content IDs to update"""
  contentIds: [ID!]!

  """The change to make"""
  isSupporterOnly: Boolean!
}

"""Update post audience."""
input UpdatePostCategoriesInput {
  """The post to update"""
  id: ID!

  """Category IDs for this post"""
  categoryIds: [ID!]!
}

"""Update post characters."""
input UpdatePostCharactersInput {
  """The post to update"""
  id: ID!

  """Ids for all the characters"""
  characterIds: [ID!]!
}

"""Publish post."""
input SubmitPostInput {
  """The post to publish"""
  id: ID!
}

"""Payload for a created pending post"""
type CreatePostPayload {
  """The pending post after the creation"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostClubPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostAudiencePayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type AddPostContentPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type RemovePostContentPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostContentOrderPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostContentIsSupporterOnlyPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostCategoriesPayload {
  """The post after the update"""
  post: Post
}

"""Payload for updating a post"""
type UpdatePostCharactersPayload {
  """The post after the update"""
  post: Post
}

"""Payload for submitting a post"""
type SubmitPostPayload {
  """The post after being submitted"""
  post: Post

  """Whether or not the submitted post is going in review"""
  inReview: Boolean
}

type PostEdge {
  cursor: String!
  node: Post!
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}


"""Properties by which posts connections can be sorted."""
enum PostsSort {
  """Posts by newest first"""
  NEW

  """Posts by top likes"""
  TOP
}

extend type Account {
  """Posts feed for the clubs that the account currently is a member of."""
  clubMembersPostsFeed(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)

  """Posts queue specific to this account (when moderator)"""
  moderatorPostsQueue(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection! @goField(forceResolver: true)

  """Contributions specific to this account"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Mutation {
  """
  Create a new post
  """
  createPost(input: CreatePostInput!): CreatePostPayload

  """
  Update a post in draft status - audience
  """
  updatePostAudience(input: UpdatePostAudienceInput!): UpdatePostAudiencePayload

  """
  Update a post in draft status - add content
  """
  addPostContent(input: AddPostContentInput!): AddPostContentPayload

  """
  Update a post in draft status - remove content
  """
  removePostContent(input: RemovePostContentInput!): RemovePostContentPayload

  """
  Update a post in draft status - update post content order - need to send exact same IDs
  """
  updatePostContentOrder(input: UpdatePostContentOrderInput!): UpdatePostContentOrderPayload

  """
  Update a post content - whether or not it is supporter only
  """
  updatePostContentIsSupporterOnly(input: UpdatePostContentIsSupporterOnlyInput!): UpdatePostContentIsSupporterOnlyPayload

  """
  Update a post in draft status - characters
  """
  updatePostCharacters(input: UpdatePostCharactersInput!): UpdatePostCharactersPayload

  """
  Update a post in draft status - categories
  """
  updatePostCategories(input: UpdatePostCategoriesInput!): UpdatePostCategoriesPayload

  """
  Submit a post. Will be either in review or instantly move to publishing if the account is verified
  """
  submitPost(input: SubmitPostInput!): SubmitPostPayload
}

extend type Query {
  """Posts feed. The default."""
  postsFeed(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!

  """Look up a single post"""
  post(
    """Look up a post by a reference #"""
    reference: String!
  ): Post

  """Search multiple posts"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection!
}

extend type Category {
  """Posts belonging to this category"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Character {
  """Posts belonging to this character"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Series {
  """Posts belonging to this series"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Club {
  """Posts belonging to this club"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by audience slugs."""
    audienceSlugs: [String!]

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}

extend type Audience {
  """Posts belonging to this audience"""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the elements in the list that come before the specified cursor."""
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Search by category slugs."""
    categorySlugs: [String!]

    """Search by character slugs."""
    characterSlugs: [String!]

    """Search by series slugs."""
    seriesSlugs: [String!]

    """Search by a post state."""
    state: PostState = PUBLISHED

    """Search by a post supporter only status."""
    supporterOnlyStatus: [SupporterOnlyStatus!]

    """Sorting options for posts."""
    sortBy: PostsSort! = TOP
  ): PostConnection! @goField(forceResolver: true)
}
