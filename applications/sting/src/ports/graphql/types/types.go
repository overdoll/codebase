// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"overdoll/libraries/graphql/relay"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
}

type Account struct {
	ID        string `json:"id"`
	TestField string `json:"testField"`
}

func (Account) IsEntity() {}
func (Account) IsNode()   {}

type Artist struct {
	ID       string `json:"id"`
	Avatar   string `json:"avatar"`
	Username string `json:"username"`
}

type Category struct {
	ID        string `json:"id"`
	Thumbnail string `json:"thumbnail"`
	Title     string `json:"title"`
}

type Character struct {
	ID        string `json:"id"`
	Thumbnail string `json:"thumbnail"`
	Name      string `json:"name"`
	Media     *Media `json:"media"`
}

type CharacterRequest struct {
	Name  string `json:"name"`
	Media string `json:"media"`
}

type CharacterRequestType struct {
	Name  string `json:"name"`
	Media string `json:"media"`
}

type Contributor struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Avatar   string `json:"avatar"`
}

type Media struct {
	ID        string `json:"id"`
	Thumbnail string `json:"thumbnail"`
	Title     string `json:"title"`
}

type PendingPost struct {
	ID                string                  `json:"id"`
	State             PendingPostStateEnum    `json:"state"`
	Moderator         string                  `json:"moderator"`
	Contributor       *Contributor            `json:"contributor"`
	Content           []string                `json:"content"`
	Categories        []*Category             `json:"categories"`
	Characters        []*Character            `json:"characters"`
	MediaRequests     []string                `json:"mediaRequests"`
	CharacterRequests []*CharacterRequestType `json:"characterRequests"`
	ArtistID          *string                 `json:"artistId"`
	ArtistUsername    string                  `json:"artistUsername"`
	PostedAt          time.Time               `json:"postedAt"`
	ReassignmentAt    time.Time               `json:"reassignmentAt"`
}

type PendingPostConnection struct {
	Edges    []*PendingPostEdge `json:"edges"`
	PageInfo *relay.PageInfo    `json:"pageInfo"`
}

type PendingPostEdge struct {
	Cursor string       `json:"cursor"`
	Node   *PendingPost `json:"node"`
}

type PendingPostFilters struct {
	ModeratorID   *string `json:"moderatorId"`
	ContributorID *string `json:"contributorId"`
	ArtistID      *string `json:"artistId"`
	ID            *string `json:"id"`
}

type PostInput struct {
	Content           []string            `json:"content"`
	Categories        []string            `json:"categories"`
	Characters        []string            `json:"characters"`
	MediaRequests     []string            `json:"mediaRequests"`
	CharacterRequests []*CharacterRequest `json:"characterRequests"`
	ArtistID          *string             `json:"artistId"`
	ArtistUsername    *string             `json:"artistUsername"`
}

type PostResponse struct {
	ID         string      `json:"id"`
	Review     bool        `json:"review"`
	Validation *Validation `json:"validation"`
}

type Response struct {
	Validation *Validation `json:"validation"`
	Ok         bool        `json:"ok"`
}

type SearchInput struct {
	Search string `json:"search"`
}

type Validation struct {
	Code string `json:"code"`
}

type PendingPostStateEnum string

const (
	PendingPostStateEnumReview    PendingPostStateEnum = "Review"
	PendingPostStateEnumPublished PendingPostStateEnum = "Published"
	PendingPostStateEnumDiscarded PendingPostStateEnum = "Discarded"
	PendingPostStateEnumRejected  PendingPostStateEnum = "Rejected"
)

var AllPendingPostStateEnum = []PendingPostStateEnum{
	PendingPostStateEnumReview,
	PendingPostStateEnumPublished,
	PendingPostStateEnumDiscarded,
	PendingPostStateEnumRejected,
}

func (e PendingPostStateEnum) IsValid() bool {
	switch e {
	case PendingPostStateEnumReview, PendingPostStateEnumPublished, PendingPostStateEnumDiscarded, PendingPostStateEnumRejected:
		return true
	}
	return false
}

func (e PendingPostStateEnum) String() string {
	return string(e)
}

func (e *PendingPostStateEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PendingPostStateEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PendingPostStateEnum", str)
	}
	return nil
}

func (e PendingPostStateEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
