// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	graphql1 "overdoll/libraries/graphql"
	"overdoll/libraries/graphql/relay"
	"strconv"
	"time"
)

// Represents an account
type Actor interface {
	IsActor()
}

type CategoryContainer interface {
	IsCategoryContainer()
}

type CharacterContainer interface {
	IsCharacterContainer()
}

type PostObject interface {
	IsPostObject()
}

type Account struct {
	// Pending posts queue specific to this account (when moderator)
	PendingPostsForModerator *PendingPostConnection `json:"pendingPostsForModerator"`
	// Pending posts for this account
	PendingPosts *PendingPostConnection `json:"pendingPosts"`
	ID           relay.ID               `json:"id"`
	// Posts specific to this account
	Posts *PostConnection `json:"posts"`
	// Contributions specific to this account
	Contributions *PostConnection `json:"contributions"`
}

func (Account) IsEntity() {}

type Artist struct {
	ID       relay.ID `json:"id"`
	Avatar   string   `json:"avatar"`
	Username string   `json:"username"`
}

func (Artist) IsNode() {}

type ArtistConnection struct {
	Edges    []*ArtistEdge   `json:"edges"`
	PageInfo *relay.PageInfo `json:"pageInfo"`
}

type ArtistEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Artist `json:"node"`
}

type Category struct {
	ID        relay.ID `json:"id"`
	Thumbnail string   `json:"thumbnail"`
	Title     string   `json:"title"`
}

func (Category) IsNode() {}

type CategoryConnection struct {
	Edges    []*CategoryEdge `json:"edges"`
	PageInfo *relay.PageInfo `json:"pageInfo"`
}

type CategoryEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Category `json:"node"`
}

type Character struct {
	ID        relay.ID `json:"id"`
	Thumbnail string   `json:"thumbnail"`
	Name      string   `json:"name"`
	Media     *Media   `json:"media"`
}

func (Character) IsNode() {}

type CharacterConnection struct {
	Edges    []*CharacterEdge `json:"edges"`
	PageInfo *relay.PageInfo  `json:"pageInfo"`
}

type CharacterEdge struct {
	Cursor string     `json:"cursor"`
	Node   *Character `json:"node"`
}

type CharacterRequest struct {
	Name  string `json:"name"`
	Media string `json:"media"`
}

type CharacterRequestType struct {
	Name  string `json:"name"`
	Media string `json:"media"`
}

type Content struct {
	URL graphql1.URI `json:"url"`
}

// Create pending post.
type CreatePendingPostInput struct {
	// Image IDs for the content
	Content []string `json:"content"`
	// Category IDs for this post
	CategoryIds []string `json:"categoryIds"`
	// Ids for all the characters
	CharacterIds []string `json:"characterIds"`
	// Requests (custom)
	MediaRequests     []string            `json:"mediaRequests"`
	CharacterRequests []*CharacterRequest `json:"characterRequests"`
	// Existing artist's ID
	ExistingArtist *relay.ID `json:"existingArtist"`
	// Custom Artist's username
	CustomArtistUsername *string `json:"customArtistUsername"`
	// The author of this post is the artist, as well as contributor
	PosterIsArtist *bool `json:"posterIsArtist"`
}

// Payload for a created pending post
type CreatePendingPostPayload struct {
	// The pending post after the creation
	PendingPost *PendingPost `json:"pendingPost"`
	// If this pending post will be in review or not
	Review *bool `json:"review"`
}

type Media struct {
	ID        relay.ID `json:"id"`
	Thumbnail string   `json:"thumbnail"`
	Title     string   `json:"title"`
}

func (Media) IsNode() {}

type MediaConnection struct {
	Edges    []*MediaEdge    `json:"edges"`
	PageInfo *relay.PageInfo `json:"pageInfo"`
}

type MediaEdge struct {
	Cursor string `json:"cursor"`
	Node   *Media `json:"node"`
}

type PendingPost struct {
	ID relay.ID `json:"id"`
	// The state of the post
	State PendingPostStateEnum `json:"state"`
	// Represents the account that this post belongs to
	Artist Actor `json:"artist"`
	// The moderator to whom this pending post was assigned
	Moderator Actor `json:"moderator"`
	// The actor that contributed this post
	Contributor Actor `json:"contributor"`
	// Content belonging to this post
	Content []*Content `json:"content"`
	// The media that was requested.
	MediaRequests []string `json:"mediaRequests"`
	// The characters that were requested
	CharacterRequests []*CharacterRequestType `json:"characterRequests"`
	// The date and time of when this post was created
	PostedAt time.Time `json:"postedAt"`
	// The date at which this pending post will be reassigned
	ReassignmentAt time.Time `json:"reassignmentAt"`
	// Categories that belong to this post
	Categories []*Category `json:"categories"`
	// Characters that belong to this post
	Characters []*Character `json:"characters"`
}

func (PendingPost) IsPostObject()         {}
func (PendingPost) IsNode()               {}
func (PendingPost) IsCategoryContainer()  {}
func (PendingPost) IsCharacterContainer() {}

type PendingPostConnection struct {
	Edges    []*PendingPostEdge `json:"edges"`
	PageInfo *relay.PageInfo    `json:"pageInfo"`
}

type PendingPostEdge struct {
	Cursor string       `json:"cursor"`
	Node   *PendingPost `json:"node"`
}

type Post struct {
	ID relay.ID `json:"id"`
	// Represents the account that this post belongs to
	Artist Actor `json:"artist"`
	// Content belonging to this post
	Content []*Content `json:"content"`
	// The date and time of when this post was created
	PostedAt time.Time `json:"postedAt"`
	// Categories that belong to this post
	Categories []*Category `json:"categories"`
}

func (Post) IsPostObject()        {}
func (Post) IsNode()              {}
func (Post) IsCategoryContainer() {}

type PostConnection struct {
	Edges    []*PostEdge     `json:"edges"`
	PageInfo *relay.PageInfo `json:"pageInfo"`
}

type PostEdge struct {
	Cursor string `json:"cursor"`
	Node   *Post  `json:"node"`
}

type PendingPostStateEnum string

const (
	PendingPostStateEnumReview    PendingPostStateEnum = "Review"
	PendingPostStateEnumPublished PendingPostStateEnum = "Published"
	PendingPostStateEnumDiscarded PendingPostStateEnum = "Discarded"
	PendingPostStateEnumRejected  PendingPostStateEnum = "Rejected"
)

var AllPendingPostStateEnum = []PendingPostStateEnum{
	PendingPostStateEnumReview,
	PendingPostStateEnumPublished,
	PendingPostStateEnumDiscarded,
	PendingPostStateEnumRejected,
}

func (e PendingPostStateEnum) IsValid() bool {
	switch e {
	case PendingPostStateEnumReview, PendingPostStateEnumPublished, PendingPostStateEnumDiscarded, PendingPostStateEnumRejected:
		return true
	}
	return false
}

func (e PendingPostStateEnum) String() string {
	return string(e)
}

func (e *PendingPostStateEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PendingPostStateEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PendingPostStateEnum", str)
	}
	return nil
}

func (e PendingPostStateEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
