// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "overdoll/applications/loader/proto"
)

// MockLoaderClient is an autogenerated mock type for the LoaderClient type
type MockLoaderClient struct {
	mock.Mock
}

// CopyResourcesAndApplyFilter provides a mock function with given fields: ctx, in, opts
func (_m *MockLoaderClient) CopyResourcesAndApplyFilter(ctx context.Context, in *proto.CopyResourcesAndApplyFilterRequest, opts ...grpc.CallOption) (*proto.CopyResourcesAndApplyFilterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CopyResourcesAndApplyFilterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CopyResourcesAndApplyFilterRequest, ...grpc.CallOption) *proto.CopyResourcesAndApplyFilterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CopyResourcesAndApplyFilterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.CopyResourcesAndApplyFilterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrGetResourcesFromUploads provides a mock function with given fields: ctx, in, opts
func (_m *MockLoaderClient) CreateOrGetResourcesFromUploads(ctx context.Context, in *proto.CreateOrGetResourcesFromUploadsRequest, opts ...grpc.CallOption) (*proto.CreateOrGetResourcesFromUploadsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CreateOrGetResourcesFromUploadsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateOrGetResourcesFromUploadsRequest, ...grpc.CallOption) *proto.CreateOrGetResourcesFromUploadsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateOrGetResourcesFromUploadsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateOrGetResourcesFromUploadsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResources provides a mock function with given fields: ctx, in, opts
func (_m *MockLoaderClient) DeleteResources(ctx context.Context, in *proto.DeleteResourcesRequest, opts ...grpc.CallOption) (*proto.DeleteResourcesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.DeleteResourcesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteResourcesRequest, ...grpc.CallOption) *proto.DeleteResourcesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteResourcesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteResourcesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResources provides a mock function with given fields: ctx, in, opts
func (_m *MockLoaderClient) GetResources(ctx context.Context, in *proto.GetResourcesRequest, opts ...grpc.CallOption) (*proto.GetResourcesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.GetResourcesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetResourcesRequest, ...grpc.CallOption) *proto.GetResourcesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetResourcesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetResourcesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockLoaderClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLoaderClient creates a new instance of MockLoaderClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLoaderClient(t mockConstructorTestingTNewMockLoaderClient) *MockLoaderClient {
	mock := &MockLoaderClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
